{"remainingRequest":"/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/node_modules/babel-loader/lib/index.js!/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/src/parula-js/src/parula.js","dependencies":[{"path":"/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/src/parula-js/src/parula.js","mtime":1633832070000},{"path":"/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF90eXBlb2YgPSByZXF1aXJlKCIvVXNlcnMvaHl1bmpvbmdraW0vRG93bmxvYWRzL3BhcnVsYVx1MTEwQ1x1MTE2MVx1MTEwNVx1MTE2RFx1MTEwM1x1MTE3M1x1MTFBRi9wYXJ1bGEtZnJvbnRlbmQvY2xpZW50LXYxLjAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mIikuZGVmYXVsdDsKCnZhciBfb2JqZWN0U3ByZWFkID0gcmVxdWlyZSgiL1VzZXJzL2h5dW5qb25na2ltL0Rvd25sb2Fkcy9wYXJ1bGFcdTExMENcdTExNjFcdTExMDVcdTExNkRcdTExMDNcdTExNzNcdTExQUYvcGFydWxhLWZyb250ZW5kL2NsaWVudC12MS4wL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDIiKS5kZWZhdWx0OwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL1VzZXJzL2h5dW5qb25na2ltL0Rvd25sb2Fkcy9wYXJ1bGFcdTExMENcdTExNjFcdTExMDVcdTExNkRcdTExMDNcdTExNzNcdTExQUYvcGFydWxhLWZyb250ZW5kL2NsaWVudC12MS4wL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKdmFyIF9jbGFzc0NhbGxDaGVjayA9IHJlcXVpcmUoIi9Vc2Vycy9oeXVuam9uZ2tpbS9Eb3dubG9hZHMvcGFydWxhXHUxMTBDXHUxMTYxXHUxMTA1XHUxMTZEXHUxMTAzXHUxMTczXHUxMUFGL3BhcnVsYS1mcm9udGVuZC9jbGllbnQtdjEuMC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLmRlZmF1bHQ7Cgp2YXIgX2NyZWF0ZUNsYXNzID0gcmVxdWlyZSgiL1VzZXJzL2h5dW5qb25na2ltL0Rvd25sb2Fkcy9wYXJ1bGFcdTExMENcdTExNjFcdTExMDVcdTExNkRcdTExMDNcdTExNzNcdTExQUYvcGFydWxhLWZyb250ZW5kL2NsaWVudC12MS4wL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIikuZGVmYXVsdDsKCnJlcXVpcmUoInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIik7Cgp2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCJmYmVtaXR0ZXIiKSwKICAgIEV2ZW50RW1pdHRlciA9IF9yZXF1aXJlLkV2ZW50RW1pdHRlcjsKCnZhciBXZWIzID0gcmVxdWlyZSgid2ViMyIpOwoKdmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoIi4vdXRpbHMvdXRpbHMuanMiKSwKICAgIG1ha2VDb250cmFjdEluc3RhbmNlID0gX3JlcXVpcmUyLm1ha2VDb250cmFjdEluc3RhbmNlLAogICAgY29uZmlybVRyYW5zYWN0aW9uID0gX3JlcXVpcmUyLmNvbmZpcm1UcmFuc2FjdGlvbiwKICAgIGNyZWF0ZVR5cGVkRGF0YUFuZFNpZ25hdHVyZSA9IF9yZXF1aXJlMi5jcmVhdGVUeXBlZERhdGFBbmRTaWduYXR1cmUsCiAgICByZWNvdmVyVHlwZWRTaWduYXR1cmUgPSBfcmVxdWlyZTIucmVjb3ZlclR5cGVkU2lnbmF0dXJlLAogICAgZW5jID0gX3JlcXVpcmUyLmVuYywKICAgIGRlY0Fzc2V0ID0gX3JlcXVpcmUyLmRlY0Fzc2V0LAogICAgZW5jRGF0YVYxID0gX3JlcXVpcmUyLmVuY0RhdGFWMTsKCnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuL2FwaScpLAogICAgUGFydWxhQVBJID0gX3JlcXVpcmUzLlBhcnVsYUFQSTsKCnZhciBfcmVxdWlyZTQgPSByZXF1aXJlKCIuL2NvbnN0YW50cyIpLAogICAgTlVMTF9CTE9DS19IQVNIID0gX3JlcXVpcmU0Lk5VTExfQkxPQ0tfSEFTSCwKICAgIFpFUk9fQUREUkVTUyA9IF9yZXF1aXJlNC5aRVJPX0FERFJFU1MsCiAgICBPUkRFUl9EQVRBX1YxID0gX3JlcXVpcmU0Lk9SREVSX0RBVEFfVjEsCiAgICBFUkMyMCA9IF9yZXF1aXJlNC5FUkMyMCwKICAgIEVSQzcyMSA9IF9yZXF1aXJlNC5FUkM3MjEsCiAgICBFUkMxMTU1ID0gX3JlcXVpcmU0LkVSQzExNTUsCiAgICBFVEggPSBfcmVxdWlyZTQuRVRIOwoKdmFyIF9yZXF1aXJlNSA9IHJlcXVpcmUoIi4vdHlwZXMiKSwKICAgIE5ldHdvcmsgPSBfcmVxdWlyZTUuTmV0d29yaywKICAgIEV2ZW50VHlwZSA9IF9yZXF1aXJlNS5FdmVudFR5cGUsCiAgICBPcmRlciA9IF9yZXF1aXJlNS5PcmRlciwKICAgIEFzc2V0ID0gX3JlcXVpcmU1LkFzc2V0OwoKdmFyIF9yZXF1aXJlNiA9IHJlcXVpcmUoIi4vY29udHJhY3RzIiksCiAgICBORlRDb250cmFjdCA9IF9yZXF1aXJlNi5ORlRDb250cmFjdCwKICAgIE5GVDExNTVDb250cmFjdCA9IF9yZXF1aXJlNi5ORlQxMTU1Q29udHJhY3QsCiAgICBFeGNoYW5nZSA9IF9yZXF1aXJlNi5FeGNoYW5nZSwKICAgIFJveWFsdGllc1JlZ2lzdHJ5ID0gX3JlcXVpcmU2LlJveWFsdGllc1JlZ2lzdHJ5LAogICAgSUVSQzIwID0gX3JlcXVpcmU2LklFUkMyMCwKICAgIElFUkMxNjUgPSBfcmVxdWlyZTYuSUVSQzE2NSwKICAgIElFUkMxMTU1ID0gX3JlcXVpcmU2LklFUkMxMTU1OwoKdmFyIF9yZXF1aXJlNyA9IHJlcXVpcmUoIi4uL2NvbmZpZ3Mvcmlua2VieSIpLAogICAgY29uZmlnID0gX3JlcXVpcmU3LmNvbmZpZzsgLy8gZGVmYXVsdENvbmZpZwoKCnZhciBQYXJ1bGEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKCiAgZnVuY3Rpb24gUGFydWxhKHByb3ZpZGVyKSB7CiAgICB2YXIgYXBpQ29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgIHZhciBsb2dnZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFydWxhKTsKCiAgICAvLyBhcGlDb25maWcuZ2FzUHJpY2UgPSBhcGlDb25maWcuZ2FzUHJpY2UgfHwgbWFrZUJpZ051bWJlcigzMDAwMDApCiAgICBpZiAoT2JqZWN0LmtleXMoYXBpQ29uZmlnKSA9PSAwKSB7CiAgICAgIGFwaUNvbmZpZyA9IGNvbmZpZzsKICAgIH0KCiAgICBpZiAoTnVtYmVyKHByb3ZpZGVyLmNoYWluSWQpICE9IGFwaUNvbmZpZy5jaGFpbklkKSB7CiAgICAgIHRocm93ICJwYXJ1bGEtanMuY29uc3RydWN0b3I6OiBwcm92aWRlci5jaGFpbl9pZCAhPSBjb25maWcuY2hhaW5faWQiOwogICAgfQoKICAgIHRoaXMubmV0d29ya05hbWUgPSBhcGlDb25maWcubmV0d29ya05hbWU7CiAgICB0aGlzLm5ldElkID0gYXBpQ29uZmlnLm5ldElkOwogICAgdGhpcy5uZnRBZGRyZXNzID0gYXBpQ29uZmlnLm5mdEFkZHJlc3M7CiAgICB0aGlzLm5mdDExNTVBZGRyZXNzID0gYXBpQ29uZmlnLm5mdDExNTVBZGRyZXNzOwogICAgdGhpcy5leGNoYW5nZUFkZHJlc3MgPSBhcGlDb25maWcuZXhjaGFuZ2VBZGRyZXNzOwogICAgdGhpcy5yb3lhbHRpZXNBZGRyZXNzID0gYXBpQ29uZmlnLnJveWFsdGllc1JlZ2lzdHJ5QWRkcmVzczsKICAgIHRoaXMudHJhbnNmZXJQcm94eUFkZHJlc3MgPSBhcGlDb25maWcudHJhbnNmZXJQcm94eUFkZHJlc3M7CiAgICB0aGlzLmVyYzIwVHJhbnNmZXJQcm94eUFkZHJlc3MgPSBhcGlDb25maWcuZXJjMjBUcmFuc2ZlclByb3h5QWRkcmVzczsKICAgIHZhciBuZWVkZWRQcm9wZXJ0aWVzID0gWyduZnRBZGRyZXNzJywgJ25mdDExNTVBZGRyZXNzJywgJ25ldElkJywgJ25ldHdvcmtOYW1lJywgJ3JlYWRvbmx5UHJvdmlkZXJVcmwnLCAnZXhjaGFuZ2VBZGRyZXNzJywgJ3JveWFsdGllc1JlZ2lzdHJ5QWRkcmVzcycsICd0cmFuc2ZlclByb3h5QWRkcmVzcycsICdlcmMyMFRyYW5zZmVyUHJveHlBZGRyZXNzJ107CiAgICBuZWVkZWRQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7CiAgICAgIGlmIChhcGlDb25maWdbcHJvcE5hbWVdID09IHVuZGVmaW5lZCkgewogICAgICAgIHRocm93ICJDb25maWd1cmF0aW9uIG5lZWRlZCAnIi5jb25jYXQocHJvcE5hbWUsICInIGlzIG5vdCBkZWZpbmVkIik7CiAgICAgIH0KICAgIH0pOyAvLyBXZWIzIENvbmZpZwoKICAgIHRoaXMud2ViMyA9IG5ldyBXZWIzKHByb3ZpZGVyKTsKICAgIHRoaXMud2ViM1JlYWRPbmx5ID0gbmV3IFdlYjMoYXBpQ29uZmlnLnJlYWRvbmx5UHJvdmlkZXJVcmwpOwogICAgdGhpcy5nYXNQcmljZUFkZGl0aW9uID0gbmV3IFdlYjMudXRpbHMuQk4oMSk7CiAgICBhcGlDb25maWcud2ViMyA9IHRoaXMud2ViM1JlYWRPbmx5OwogICAgdGhpcy5hcGkgPSBuZXcgUGFydWxhQVBJKGFwaUNvbmZpZywgbG9nZ2VyKTsKCiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlciB8fCBmdW5jdGlvbiAoYXJnKSB7CiAgICAgIHJldHVybiBhcmc7CiAgICB9OwoKICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUGFydWxhLCBbewogICAga2V5OiAiY3JlYXRlQXJ0d29yayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2NyZWF0ZUFydHdvcmsgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoc2lnbmVyKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgICAgdmFyIG93bmVyLAogICAgICAgICAgICBlcmM3MjFtZXRhZGF0YVVSTCwKICAgICAgICAgICAgcm95YWx0aWVzLAogICAgICAgICAgICB0bywKICAgICAgICAgICAgbmZ0X2NvbnRyYWN0LAogICAgICAgICAgICBfY2FsbG9iaiwKICAgICAgICAgICAgZnJvbSwKICAgICAgICAgICAgX3BhcmFtLAogICAgICAgICAgICByZXQsCiAgICAgICAgICAgIF9hcmdzID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBvd25lciA9IF9hcmdzLmxlbmd0aCA+IDEgJiYgX2FyZ3NbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzWzFdIDogJyc7CiAgICAgICAgICAgICAgICBlcmM3MjFtZXRhZGF0YVVSTCA9IF9hcmdzLmxlbmd0aCA+IDIgJiYgX2FyZ3NbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzWzJdIDogJyc7CiAgICAgICAgICAgICAgICByb3lhbHRpZXMgPSBfYXJncy5sZW5ndGggPiAzICYmIF9hcmdzWzNdICE9PSB1bmRlZmluZWQgPyBfYXJnc1szXSA6IFtdOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtQWRkcmVzcyhbc2lnbmVyXSk7CgogICAgICAgICAgICAgICAgaWYgKG93bmVyKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtQWRkcmVzcyhbb3duZXJdKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIG93bmVyID0gc2lnbmVyOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRvID0gdGhpcy5uZnRBZGRyZXNzOwogICAgICAgICAgICAgICAgbmZ0X2NvbnRyYWN0ID0gdGhpcy5fbWFrZUNvbnRyYWN0SW5zdGFuY2UoTkZUQ29udHJhY3QsIHRoaXMubmZ0QWRkcmVzcyk7CiAgICAgICAgICAgICAgICAvLyBjaGVjayByb3lhbHRpZXMgdmFsaWQKICAgICAgICAgICAgICAgIHJveWFsdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3lhbHR5KSB7CiAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHJveWFsdHkgYWNjb3VudAogICAgICAgICAgICAgICAgICB2YXIgaXNfdmFsaWRfYWRkcmVzcyA9IF90aGlzLndlYjMudXRpbHMuaXNBZGRyZXNzKHJveWFsdHlbMF0pOwoKICAgICAgICAgICAgICAgICAgaWYgKCFpc192YWxpZF9hZGRyZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgImZhaWwgdG8gbWludCB3aXRoIHJveWFsdHksIGludmFsaWQgYWRkcmVzczogIi5jb25jYXQocm95YWx0eVswXSk7CiAgICAgICAgICAgICAgICAgIH0gLy8gY2hlY2sgcm95YWx0eSB2YWx1ZQoKCiAgICAgICAgICAgICAgICAgIHZhciBfdmFsID0gTnVtYmVyKHJveWFsdHlbMV0pOwoKICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKF92YWwpIHx8IF92YWwgPCAxIHx8IF92YWwgPiA1MDApIHsKICAgICAgICAgICAgICAgICAgICAvLyAxfjUwMAogICAgICAgICAgICAgICAgICAgIHRocm93ICJmYWlsIHRvIG1pbnQgd2l0aCByb3lhbHR5LCBpbnZhbGlkIHZhbHVlOiAiLmNvbmNhdChyb3lhbHR5WzFdKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKHJveWFsdGllcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVHlwZVBhcnQoW3JveWFsdGllc10pOwoKICAgICAgICAgICAgICAgICAgX2NhbGxvYmogPSBuZnRfY29udHJhY3QubWV0aG9kcy5taW50SXRlbVdpdGhSb3lhbHR5KG93bmVyLCBlcmM3MjFtZXRhZGF0YVVSTCwgb3duZXIsIHJveWFsdGllcyk7IC8vIHJveWFsdHlPd25lciwgcm95YWx0aWVzCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBfY2FsbG9iaiA9IG5mdF9jb250cmFjdC5tZXRob2RzLm1pbnRJdGVtKG93bmVyLCBlcmM3MjFtZXRhZGF0YVVSTCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnJvbSA9IHNpZ25lcjsKICAgICAgICAgICAgICAgIF9wYXJhbSA9IHt9OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRyYW5zYWN0aW9uQW5kQ29uZmlybShmcm9tLCB0bywgX2NhbGxvYmosIF9wYXJhbSwgRXZlbnRUeXBlLlRyYW5zYWN0aW9uQ3JlYXRlZCwgIkNyZWF0ZSBORlQiKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIHJldCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFyZXQuc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhY3RUcmFuc2ZlckluZm8ocmV0LnR4LnRyYW5zYWN0aW9uSGFzaCk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dC5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjcmVhdGVBcnR3b3JrKF94KSB7CiAgICAgICAgcmV0dXJuIF9jcmVhdGVBcnR3b3JrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjcmVhdGVBcnR3b3JrOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY3JlYXRlQXJ0d29yazExNTUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jcmVhdGVBcnR3b3JrMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoc2lnbmVyKSB7CiAgICAgICAgdmFyIG93bmVyLAogICAgICAgICAgICBlcmM3MjFtZXRhZGF0YVVSTCwKICAgICAgICAgICAgaWQsCiAgICAgICAgICAgIHF1YW50aXR5LAogICAgICAgICAgICByb3lhbHRpZXMsCiAgICAgICAgICAgIHRvLAogICAgICAgICAgICBuZnRfY29udHJhY3QsCiAgICAgICAgICAgIF9jYWxsb2JqLAogICAgICAgICAgICBmcm9tLAogICAgICAgICAgICBfcGFyYW0sCiAgICAgICAgICAgIHJldCwKICAgICAgICAgICAgX2FyZ3MyID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgb3duZXIgPSBfYXJnczIubGVuZ3RoID4gMSAmJiBfYXJnczJbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlsxXSA6ICcnOwogICAgICAgICAgICAgICAgZXJjNzIxbWV0YWRhdGFVUkwgPSBfYXJnczIubGVuZ3RoID4gMiAmJiBfYXJnczJbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlsyXSA6ICcnOwogICAgICAgICAgICAgICAgaWQgPSBfYXJnczIubGVuZ3RoID4gMyAmJiBfYXJnczJbM10gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlszXSA6IDA7CiAgICAgICAgICAgICAgICBxdWFudGl0eSA9IF9hcmdzMi5sZW5ndGggPiA0ICYmIF9hcmdzMls0XSAhPT0gdW5kZWZpbmVkID8gX2FyZ3MyWzRdIDogMTsKICAgICAgICAgICAgICAgIHJveWFsdGllcyA9IF9hcmdzMi5sZW5ndGggPiA1ICYmIF9hcmdzMls1XSAhPT0gdW5kZWZpbmVkID8gX2FyZ3MyWzVdIDogW107CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1BZGRyZXNzKFtzaWduZXJdKTsKCiAgICAgICAgICAgICAgICBpZiAob3duZXIpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1BZGRyZXNzKFtvd25lcl0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgb3duZXIgPSBzaWduZXI7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1VaW50TnVtYmVyKFtpZCwgcXVhbnRpdHldKTsKCiAgICAgICAgICAgICAgICB0byA9IHRoaXMubmZ0MTE1NUFkZHJlc3M7CiAgICAgICAgICAgICAgICBuZnRfY29udHJhY3QgPSB0aGlzLl9tYWtlQ29udHJhY3RJbnN0YW5jZShORlQxMTU1Q29udHJhY3QsIHRoaXMubmZ0MTE1NUFkZHJlc3MpOwoKICAgICAgICAgICAgICAgIGlmIChyb3lhbHRpZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbVR5cGVQYXJ0KFtyb3lhbHRpZXNdKTsKCiAgICAgICAgICAgICAgICAgIF9jYWxsb2JqID0gbmZ0X2NvbnRyYWN0Lm1ldGhvZHMubWludEl0ZW1XaXRoUm95YWx0eShvd25lciwgaWQsIHF1YW50aXR5LCBbXSwgb3duZXIsIHJveWFsdGllcyk7IC8vLCByb3lhbHR5T3duZXIsIHJveWFsdGllcwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgX2NhbGxvYmogPSBuZnRfY29udHJhY3QubWV0aG9kcy5taW50SXRlbShvd25lciwgaWQsIHF1YW50aXR5LCBbXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnJvbSA9IHNpZ25lcjsKICAgICAgICAgICAgICAgIF9wYXJhbSA9IHt9OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRUcmFuc2FjdGlvbkFuZENvbmZpcm0oZnJvbSwgdG8sIF9jYWxsb2JqLCBfcGFyYW0sIEV2ZW50VHlwZS5UcmFuc2FjdGlvbkNyZWF0ZWQsICJDcmVhdGUgTkZUIik7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICByZXQgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIXJldC5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxOTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHRyYWN0VHJhbnNmZXJJbmZvKHJldC50eC50cmFuc2FjdGlvbkhhc2gpOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUFydHdvcmsxMTU1KF94MikgewogICAgICAgIHJldHVybiBfY3JlYXRlQXJ0d29yazIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNyZWF0ZUFydHdvcmsxMTU1OwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY3JlYXRlU2VsbE9yZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY3JlYXRlU2VsbE9yZGVyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhfcmVmKSB7CiAgICAgICAgdmFyIG1ha2VyLCBtYVR5cGVNViwgbWFDb250cmFjdEFkZHJlc3MsIG1hVmFsdWUsIF9yZWYkcXVhbnRpdHksIHF1YW50aXR5LCBfcmVmJHRha2VyLCB0YWtlciwgdGFUeXBlTVYsIHRhQ29udHJhY3RBZGRyZXNzLCB0YVZhbHVlLCBfcmVmJHNhbHQsIHNhbHQsIF9yZWYkc3RhcnREYXRldGltZSwgc3RhcnREYXRldGltZSwgX3JlZiRlbmREYXRldGltZSwgZW5kRGF0ZXRpbWUsIHJlYWxPd25lciwgYmFsYW5jZU9mLCBvcmlnaW5GZWVzLCBwYXlvdXRzLCBlbmNEYXRhLCBtYUVuY0RhdGEsIHRhRW5jRGF0YSwgcmV0OwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbWFrZXIgPSBfcmVmLm1ha2VyLCBtYVR5cGVNViA9IF9yZWYubWFUeXBlTVYsIG1hQ29udHJhY3RBZGRyZXNzID0gX3JlZi5tYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSA9IF9yZWYubWFWYWx1ZSwgX3JlZiRxdWFudGl0eSA9IF9yZWYucXVhbnRpdHksIHF1YW50aXR5ID0gX3JlZiRxdWFudGl0eSA9PT0gdm9pZCAwID8gMSA6IF9yZWYkcXVhbnRpdHksIF9yZWYkdGFrZXIgPSBfcmVmLnRha2VyLCB0YWtlciA9IF9yZWYkdGFrZXIgPT09IHZvaWQgMCA/IFpFUk9fQUREUkVTUyA6IF9yZWYkdGFrZXIsIHRhVHlwZU1WID0gX3JlZi50YVR5cGVNViwgdGFDb250cmFjdEFkZHJlc3MgPSBfcmVmLnRhQ29udHJhY3RBZGRyZXNzLCB0YVZhbHVlID0gX3JlZi50YVZhbHVlLCBfcmVmJHNhbHQgPSBfcmVmLnNhbHQsIHNhbHQgPSBfcmVmJHNhbHQgPT09IHZvaWQgMCA/IERhdGUubm93KCkgOiBfcmVmJHNhbHQsIF9yZWYkc3RhcnREYXRldGltZSA9IF9yZWYuc3RhcnREYXRldGltZSwgc3RhcnREYXRldGltZSA9IF9yZWYkc3RhcnREYXRldGltZSA9PT0gdm9pZCAwID8gMCA6IF9yZWYkc3RhcnREYXRldGltZSwgX3JlZiRlbmREYXRldGltZSA9IF9yZWYuZW5kRGF0ZXRpbWUsIGVuZERhdGV0aW1lID0gX3JlZiRlbmREYXRldGltZSA9PT0gdm9pZCAwID8gMCA6IF9yZWYkZW5kRGF0ZXRpbWU7CgogICAgICAgICAgICAgICAgaWYgKHRhVHlwZU1WID09IEVUSCkgewogICAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbUFkZHJlc3MoW21ha2VyLCBtYUNvbnRyYWN0QWRkcmVzcywgdGFrZXJdKTsgLy8gZXRo64qUIGNvbnRyYWN0QWRkcmVzcyDsl4bsnYwKCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbUFkZHJlc3MoW21ha2VyLCBtYUNvbnRyYWN0QWRkcmVzcywgdGFrZXIsIHRhQ29udHJhY3RBZGRyZXNzXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1UeXBlTVYoW21hVHlwZU1WLCB0YVR5cGVNVl0pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVWludE51bWJlcihbbWFWYWx1ZSwgdGFWYWx1ZV0pOwoKICAgICAgICAgICAgICAgIGlmICghKG1hVHlwZU1WID09IEVSQzcyMSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW5Pd25lck9mKG1hQ29udHJhY3RBZGRyZXNzLCBtYVZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgcmVhbE93bmVyID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCEocmVhbE93bmVyLnRvVXBwZXJDYXNlKCkgIT0gbWFrZXIudG9VcHBlckNhc2UoKSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgZXJyOiAiT3JkZXJlcigiLmNvbmNhdChtYWtlciwgIikgaXMgbm90IHRoZSB0b2tlbiBvd25lcigiKS5jb25jYXQocmVhbE93bmVyLCAiKSIpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIGlmICghKG1hVHlwZU1WID09IEVSQzExNTUpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRCYWxhbmNlT2YobWFrZXIsIG1hQ29udHJhY3RBZGRyZXNzLCBtYVZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIGJhbGFuY2VPZiA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKGJhbGFuY2VPZiA8IHF1YW50aXR5KSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICBzdGF0dXM6IGZhbHNlLAogICAgICAgICAgICAgICAgICBlcnI6ICJPcmRlcmVyKCIuY29uY2F0KG1ha2VyLCAiKSdzIGJhbGFuY2UgaXMgbm90IGVub3VnaC4gIikKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgZXJyOiAiVW5zdXBwb3J0ZWQgYXNzZXQgdHlwZTogIi5jb25jYXQobWFUeXBlTVYpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIG9yaWdpbkZlZXMgPSBbXTsgLy8gb3JpZ2luRmVlcyDqsIAg7JuQ7LKc7KeV7IiYIOuKkOuCjOyduOqwgOuztOuLpAoKICAgICAgICAgICAgICAgIHBheW91dHMgPSBbW21ha2VyLCAxMDAwMF1dOyAvLyAxMDAlIG9mIHRha2VBc3NldCB0byBvcmRlck1ha2VyCgogICAgICAgICAgICAgICAgZW5jRGF0YSA9IGVuY0RhdGFWMSh0aGlzLndlYjMsIFtwYXlvdXRzLCBvcmlnaW5GZWVzXSk7IC8vIFRPRE86IGNoZWNrIHN0YXJ0IGFuZCBlbmQgZGF0ZSAKICAgICAgICAgICAgICAgIC8vICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpCiAgICAgICAgICAgICAgICAvLyAgIGRhdGUudmFsdWVPZigpIC8vIDE2MjI2ODMyOTUzMjgKICAgICAgICAgICAgICAgIC8vICAgbmV3IERhdGUoMTYyMjY4MzI5NTMyOCkgLy8gMjAyMS0wNi0wM1QwMToyMTozNS4zMjhaCgogICAgICAgICAgICAgICAgbWFFbmNEYXRhID0gdGhpcy5fZW5jQXNzZXREYXRhKG1hVHlwZU1WLCBtYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSk7CiAgICAgICAgICAgICAgICB0YUVuY0RhdGEgPSB0aGlzLl9lbmNBc3NldERhdGEodGFUeXBlTVYsIHRhQ29udHJhY3RBZGRyZXNzLCB0YVZhbHVlKTsgLy8gb3JkZXIgc3RydWN0CgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyODsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYWtlT3JkZXJBbmRBcHByb3ZlKG1ha2VyLCBBc3NldChtYVR5cGVNViwgbWFFbmNEYXRhLCBxdWFudGl0eSksIC8vIDcyMeydtOuptCB2YWx1ZSAxLCAxMTU166m0IDEg7J207IOBCiAgICAgICAgICAgICAgICB0YWtlciwgQXNzZXQodGFUeXBlTVYsIHRhRW5jRGF0YSwgdGFWYWx1ZSksIC8vIHRha2VyQXNzZXQsCiAgICAgICAgICAgICAgICBzYWx0LCBzdGFydERhdGV0aW1lLCBlbmREYXRldGltZSwgT1JERVJfREFUQV9WMSwgZW5jRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgICAgICByZXQgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCByZXQpOwoKICAgICAgICAgICAgICBjYXNlIDMwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY3JlYXRlU2VsbE9yZGVyKF94MykgewogICAgICAgIHJldHVybiBfY3JlYXRlU2VsbE9yZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjcmVhdGVTZWxsT3JkZXI7CiAgICB9KCkgLy8g64iE6rCAIO2MkOuLpOqzoCDrgrTrhpPsnYAg6rGwIOyCsOuLpOuKlCDsmKTrjZQm66ek7LmYCgogIH0sIHsKICAgIGtleTogImNyZWF0ZUJ1eU9yZGVyQW5kTWF0Y2giLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jcmVhdGVCdXlPcmRlckFuZE1hdGNoID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChfcmVmMikgewogICAgICAgIHZhciBtYWtlciwgbWFUeXBlTVYsIG1hQ29udHJhY3RBZGRyZXNzLCBtYVZhbHVlLCBzZWxsT3JkZXJJZCwgX3JlZjIkc2FsdCwgc2FsdCwgX3JlZjIkc3RhcnQsIHN0YXJ0LCBfcmVmMiRlbmQsIGVuZCwgZXJyLCBvcmlnaW5GZWVzLCBwYXlvdXRzLCBlbmNEYXRhLCBzZWxsT3JkZXIsIGFzc2V0RGF0YSwgbWFrZUFzc2V0LCByZXRCdXlPcmRlciwgdmFsdWUsIHJldE1hdGNoOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbWFrZXIgPSBfcmVmMi5tYWtlciwgbWFUeXBlTVYgPSBfcmVmMi5tYVR5cGVNViwgbWFDb250cmFjdEFkZHJlc3MgPSBfcmVmMi5tYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSA9IF9yZWYyLm1hVmFsdWUsIHNlbGxPcmRlcklkID0gX3JlZjIuc2VsbE9yZGVySWQsIF9yZWYyJHNhbHQgPSBfcmVmMi5zYWx0LCBzYWx0ID0gX3JlZjIkc2FsdCA9PT0gdm9pZCAwID8gMCA6IF9yZWYyJHNhbHQsIF9yZWYyJHN0YXJ0ID0gX3JlZjIuc3RhcnQsIHN0YXJ0ID0gX3JlZjIkc3RhcnQgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiRzdGFydCwgX3JlZjIkZW5kID0gX3JlZjIuZW5kLCBlbmQgPSBfcmVmMiRlbmQgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiRlbmQ7CgogICAgICAgICAgICAgICAgaWYgKG1hVHlwZU1WID09IEVUSCkgewogICAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbUFkZHJlc3MoW21ha2VyXSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbUFkZHJlc3MoW21ha2VyLCBtYUNvbnRyYWN0QWRkcmVzc10pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVHlwZU1WKFttYVR5cGVNVl0pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVWludE51bWJlcihbbWFWYWx1ZSwgc2VsbE9yZGVySWRdKTsKCiAgICAgICAgICAgICAgICBlcnIgPSAnJzsKICAgICAgICAgICAgICAgIG9yaWdpbkZlZXMgPSBbXTsKICAgICAgICAgICAgICAgIHBheW91dHMgPSBbW21ha2VyLCAxMDAwMF1dOyAvLyAxMDAlIG9mIHRha2VBc3NldCB0byBvcmRlck1ha2VyCgogICAgICAgICAgICAgICAgZW5jRGF0YSA9IGVuY0RhdGFWMSh0aGlzLndlYjMsIFtwYXlvdXRzLCBvcmlnaW5GZWVzXSk7IC8vIGFwaS5nZXQgc2VsbCBvcmRlcgoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcGkuZ2V0U2VsbE9yZGVyKHsKICAgICAgICAgICAgICAgICAgaWQ6IHNlbGxPcmRlcklkCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIHNlbGxPcmRlciA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgLy8g6rWs7ZiEIO2VhOyalCwg65SU7YWM7J287ZWcIOyCrOyaqeuyleuPhCDtlYTsmpQKICAgICAgICAgICAgICAgIGFzc2V0RGF0YSA9IHRoaXMuX2VuY0Fzc2V0RGF0YShtYVR5cGVNViwgbWFDb250cmFjdEFkZHJlc3MsIG1hVmFsdWUpOwogICAgICAgICAgICAgICAgbWFrZUFzc2V0ID0gQXNzZXQobWFUeXBlTVYsIGFzc2V0RGF0YSwgbWFWYWx1ZSk7CgogICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tEaWZmQXNzZXRzKG1ha2VBc3NldCwgc2VsbE9yZGVyLm9yZGVyLnRha2VBc3NldCk7IC8vIG9yZGVyIHN0cnVjdAoKCiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VPcmRlckFuZEFwcHJvdmUobWFrZXIsIG1ha2VBc3NldCwgc2VsbE9yZGVyLm9yZGVyLm1ha2VyLCBzZWxsT3JkZXIub3JkZXIubWFrZUFzc2V0LCAvLyDrs7TsnpDrs7TsnpAgCiAgICAgICAgICAgICAgICBzYWx0LCBzdGFydCwgZW5kLCBPUkRFUl9EQVRBX1YxLCBlbmNEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHJldEJ1eU9yZGVyID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1hVHlwZU1WID09IEVUSCA/IG1hVmFsdWUgOiAwOyAvLyBpZiBldGggdmFsdWUgbmVlZCwgaW4gd2VpCiAgICAgICAgICAgICAgICAvLyBuZWVkIHB1dCBidXktb3JkZXI/CgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyMDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXRjaE9yZGVycyhzZWxsT3JkZXIub3JkZXIsIHNlbGxPcmRlci5zaWduYXR1cmUsIHJldEJ1eU9yZGVyLm9yZGVyLCByZXRCdXlPcmRlci5zaWduYXR1cmUsIG1ha2VyLCB2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICByZXRNYXRjaCA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXRNYXRjaC5zdGF0dXMsCiAgICAgICAgICAgICAgICAgIGVycjogJycKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY3JlYXRlQnV5T3JkZXJBbmRNYXRjaChfeDQpIHsKICAgICAgICByZXR1cm4gX2NyZWF0ZUJ1eU9yZGVyQW5kTWF0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNyZWF0ZUJ1eU9yZGVyQW5kTWF0Y2g7CiAgICB9KCkgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLy8vIGJpZOyXkCDrp6Tsua3snYAg7Ja065a76rKMPwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBhdWN0aW9uIOuTseuhnSAtPiDsnoXssLAoYnV5T3JkZXIpIC0+IOuCmeywsChzZWxsT3JkZXIgLT4gbWF0Y2hPcmRlcnMpCiAgICAvLwogICAgLy8gMS4gYXVjdGlvbiDrk7HroZ3tlZjquLAKICAgIC8vICAgLSDsg4HtkogKICAgIC8vICAgLSBhc3NldAogICAgLy8gICAgIC0g7Iuc7J6R6rCACiAgICAvLyAgIC0g7Iuc7J6R7J287IucCiAgICAvLyAgIC0g7KKF66OM7J287IucCiAgICAvLyAgIC0gCiAgICAvLyAyLiBsaXN0aW5nIGF1Y3Rpb24KICAgIC8vICAgYXVjdGlvbiBpdGVt7J2AIFtiaWRdIOuyhO2KvCDtkZzsi5wKICAgIC8vICAg7Iuk7Iuc6rCEIOyiheujjOq5jOyngCDrgqjsnYAg7Iuc6rCEIO2RnOyLnAogICAgLy8gICDsoJXroKwgKGViYXnssLjqs6A6IGh0dHBzOi8vd3d3LmViYXkuY29tL2IvVG95cy1Ib2JiaWVzLzIyMC9ibl8xODY1NDk3P0xIX0F1Y3Rpb249MSZydD1uYyZfc29wPTUpCiAgICAvLyAgICAgYmVzdCBtYXRjaAogICAgLy8gICAgIHRpbWU6IGVuZGRpbmcgc29vbmVzdAogICAgLy8gICAgIHRpbWU6IG5ld2x5IGxpc3RlZAogICAgLy8gICAgIHByaWNlICsgc2hpcHBpbmc6IGxvd2VzdCBmaXJzdAogICAgLy8gICAgIHByaWNlICsgc2hpcHBpbmc6IGhpZ2hlc3QgZmlyc3QKICAgIC8vICAgICBudW1iZXIgb2YgYmlkczogZmV3ZXN0IGZpcnN0CiAgICAvLyAgICAgbnVtYmVyIG9mIGJpZHM6IG1vc3QgZmlyc3QKICAgIC8vIDMuIGJpZGRpbmcKICAgIC8vIDQuIOuCmeywsChtYXRjaGluZ09yZGVyKQogICAgLy8g6rK966ekIOuCtCDrhpPripQg7Jik642UCgogIH0sIHsKICAgIGtleTogImNyZWF0ZUF1Y3Rpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jcmVhdGVBdWN0aW9uID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShfcmVmMykgewogICAgICAgIHZhciBzdGFydERhdGV0aW1lLCBlbmREYXRldGltZSwgbWFrZXIsIG1hVHlwZU1WLCBtYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSwgX3JlZjMkcXVhbnRpdHksIHF1YW50aXR5LCBfcmVmMyR0YWtlciwgdGFrZXIsIHRhVHlwZU1WLCB0YUNvbnRyYWN0QWRkcmVzcywgdGFQcmljZUJlZ2luLCBfcmVmMyR0YVByaWNlRW5kLCB0YVByaWNlRW5kLCBfcmVmMyRpc1RpbWVMaW1pdGVkLCBpc1RpbWVMaW1pdGVkLCBfcmVmMyRwcmljZU1pbkhpZGRlbiwgcHJpY2VNaW5IaWRkZW4sIHJlYWxPd25lciwgYmFsYW5jZU9mLCByZXRPcmRlckRhdGEsIGVycjsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZXRpbWUgPSBfcmVmMy5zdGFydERhdGV0aW1lLCBlbmREYXRldGltZSA9IF9yZWYzLmVuZERhdGV0aW1lLCBtYWtlciA9IF9yZWYzLm1ha2VyLCBtYVR5cGVNViA9IF9yZWYzLm1hVHlwZU1WLCBtYUNvbnRyYWN0QWRkcmVzcyA9IF9yZWYzLm1hQ29udHJhY3RBZGRyZXNzLCBtYVZhbHVlID0gX3JlZjMubWFWYWx1ZSwgX3JlZjMkcXVhbnRpdHkgPSBfcmVmMy5xdWFudGl0eSwgcXVhbnRpdHkgPSBfcmVmMyRxdWFudGl0eSA9PT0gdm9pZCAwID8gMSA6IF9yZWYzJHF1YW50aXR5LCBfcmVmMyR0YWtlciA9IF9yZWYzLnRha2VyLCB0YWtlciA9IF9yZWYzJHRha2VyID09PSB2b2lkIDAgPyBaRVJPX0FERFJFU1MgOiBfcmVmMyR0YWtlciwgdGFUeXBlTVYgPSBfcmVmMy50YVR5cGVNViwgdGFDb250cmFjdEFkZHJlc3MgPSBfcmVmMy50YUNvbnRyYWN0QWRkcmVzcywgdGFQcmljZUJlZ2luID0gX3JlZjMudGFQcmljZUJlZ2luLCBfcmVmMyR0YVByaWNlRW5kID0gX3JlZjMudGFQcmljZUVuZCwgdGFQcmljZUVuZCA9IF9yZWYzJHRhUHJpY2VFbmQgPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR0YVByaWNlRW5kLCBfcmVmMyRpc1RpbWVMaW1pdGVkID0gX3JlZjMuaXNUaW1lTGltaXRlZCwgaXNUaW1lTGltaXRlZCA9IF9yZWYzJGlzVGltZUxpbWl0ZWQgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRpc1RpbWVMaW1pdGVkLCBfcmVmMyRwcmljZU1pbkhpZGRlbiA9IF9yZWYzLnByaWNlTWluSGlkZGVuLCBwcmljZU1pbkhpZGRlbiA9IF9yZWYzJHByaWNlTWluSGlkZGVuID09PSB2b2lkIDAgPyAtMSA6IF9yZWYzJHByaWNlTWluSGlkZGVuOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtQWRkcmVzcyhbbWFrZXIsIG1hQ29udHJhY3RBZGRyZXNzLCB0YWtlcl0pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVHlwZU1WKFttYVR5cGVNViwgdGFUeXBlTVZdKTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbVVpbnROdW1iZXIoW21hVmFsdWUsIHF1YW50aXR5LCBzdGFydERhdGV0aW1lLCBlbmREYXRldGltZSwgdGFQcmljZUJlZ2luLCB0YVByaWNlQmVnaW5dKTsKCiAgICAgICAgICAgICAgICBpZiAoIShtYVR5cGVNViA9PSBFUkM3MjEpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFRva2VuT3duZXJPZihtYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIHJlYWxPd25lciA9IF9jb250ZXh0NS5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKHJlYWxPd25lci50b1VwcGVyQ2FzZSgpICE9IG1ha2VyLnRvVXBwZXJDYXNlKCkpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGVycjogIk9yZGVyZXIoIi5jb25jYXQobWFrZXIsICIpIGlzIG5vdCB0aGUgdG9rZW4gb3duZXIoIikuY29uY2F0KHJlYWxPd25lciwgIikiKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBpZiAoIShtYVR5cGVNViA9PSBFUkMxMTU1KSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QmFsYW5jZU9mKG1ha2VyLCBtYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBiYWxhbmNlT2YgPSBfY29udGV4dDUuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShiYWxhbmNlT2YgPCBxdWFudGl0eSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgZXJyOiAiT3JkZXJlcigiLmNvbmNhdChtYWtlciwgIikncyBiYWxhbmNlIGlzIG5vdCBlbm91Z2guICIpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGVycjogIlVuc3VwcG9ydGVkIGFzc2V0IHR5cGU6ICIuY29uY2F0KG1hVHlwZU1WKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICByZXRPcmRlckRhdGEgPSBudWxsOwogICAgICAgICAgICAgICAgZXJyID0gJyc7CgogICAgICAgICAgICAgICAgaWYgKCEodGFQcmljZUVuZCAhPSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDI4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDI2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2VsbE9yZGVyKHsKICAgICAgICAgICAgICAgICAgbWFrZXI6IG1ha2VyLAogICAgICAgICAgICAgICAgICBtYVR5cGVNVjogbWFUeXBlTVYsCiAgICAgICAgICAgICAgICAgIG1hQ29udHJhY3RBZGRyZXNzOiBtYUNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgICAgbWFWYWx1ZTogbWFWYWx1ZSwKICAgICAgICAgICAgICAgICAgdGFrZXI6IHRha2VyLAogICAgICAgICAgICAgICAgICB0YVR5cGVNVjogdGFUeXBlTVYsCiAgICAgICAgICAgICAgICAgIHRhQ29udHJhY3RBZGRyZXNzOiB0YUNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgICAgdGFWYWx1ZTogdGFQcmljZUVuZCwKICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHF1YW50aXR5LAogICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnREYXRldGltZSwKICAgICAgICAgICAgICAgICAgZW5kOiBlbmREYXRldGltZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgICByZXRPcmRlckRhdGEgPSBfY29udGV4dDUuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIXJldE9yZGVyRGF0YS5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZXRPcmRlckRhdGEuZXJyKTsKICAgICAgICAgICAgICAgICAgZXJyID0gImVycjogIi5jb25jYXQocmV0T3JkZXJEYXRhLmVycik7CiAgICAgICAgICAgICAgICB9IC8vIGNvbnNvbGUubG9nKHJldE9yZGVyRGF0YS5kYXRhLCByZXRPcmRlckRhdGEuc2lnbmF0dXJlKQoKCiAgICAgICAgICAgICAgY2FzZSAyODoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJldE9yZGVyRGF0YSksIHt9LCB7CiAgICAgICAgICAgICAgICAgIGVycjogZXJyCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjcmVhdGVBdWN0aW9uKF94NSkgewogICAgICAgIHJldHVybiBfY3JlYXRlQXVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY3JlYXRlQXVjdGlvbjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNyZWF0ZUJpZE9yZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY3JlYXRlQmlkT3JkZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KF9yZWY0KSB7CiAgICAgICAgdmFyIG1ha2VyLCBtYVR5cGVNViwgbWFDb250cmFjdEFkZHJlc3MsIG1hVmFsdWUsIGF1Y3Rpb25JZCwgb3JpZ2luRmVlcywgcGF5b3V0cywgZW5jRGF0YSwgYXVjdGlvbk9yZGVyLCBhc3NldERhdGEsIG1ha2VBc3NldCwgb3JkZXJfbWFrZXIsIG9yZGVyX21ha2VyX2Fzc2V0LCByZXQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG1ha2VyID0gX3JlZjQubWFrZXIsIG1hVHlwZU1WID0gX3JlZjQubWFUeXBlTVYsIG1hQ29udHJhY3RBZGRyZXNzID0gX3JlZjQubWFDb250cmFjdEFkZHJlc3MsIG1hVmFsdWUgPSBfcmVmNC5tYVZhbHVlLCBhdWN0aW9uSWQgPSBfcmVmNC5hdWN0aW9uSWQ7CgogICAgICAgICAgICAgICAgaWYgKCEobWFUeXBlTVYgPT0gRVRIKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGVycjogIkNhbid0IHVzZSBFVEggZm9yIGJpZC1vcmRlciIKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbUFkZHJlc3MoW21ha2VyLCBtYUNvbnRyYWN0QWRkcmVzc10pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVHlwZU1WKFttYVR5cGVNVl0pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVWludE51bWJlcihbbWFWYWx1ZSwgYXVjdGlvbklkXSk7CgogICAgICAgICAgICAgICAgb3JpZ2luRmVlcyA9IFtdOwogICAgICAgICAgICAgICAgcGF5b3V0cyA9IFtbbWFrZXIsIDEwMDAwXV07IC8vIDEwMCUgb2YgdGFrZUFzc2V0IHRvIG9yZGVyTWFrZXIKCiAgICAgICAgICAgICAgICBlbmNEYXRhID0gZW5jRGF0YVYxKHRoaXMud2ViMywgW3BheW91dHMsIG9yaWdpbkZlZXNdKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcGkuZ2V0QXVjdGlvbk9yZGVyKHsKICAgICAgICAgICAgICAgICAgaWQ6IGF1Y3Rpb25JZAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBhdWN0aW9uT3JkZXIgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIGFzc2V0RGF0YSA9IHRoaXMuX2VuY0Fzc2V0RGF0YShtYVR5cGVNViwgbWFDb250cmFjdEFkZHJlc3MsIG1hVmFsdWUpOwogICAgICAgICAgICAgICAgbWFrZUFzc2V0ID0gQXNzZXQobWFUeXBlTVYsIGFzc2V0RGF0YSwgbWFWYWx1ZSk7CgogICAgICAgICAgICAgICAgaWYgKCFhdWN0aW9uT3JkZXIuaW1tZWRpYXRlX2J1eWFibGUpIHsKICAgICAgICAgICAgICAgICAgb3JkZXJfbWFrZXJfYXNzZXQgPSBhdWN0aW9uT3JkZXIub3JkZXIubWFrZUFzc2V0OwogICAgICAgICAgICAgICAgICBvcmRlcl9tYWtlciA9IGF1Y3Rpb25PcmRlci5vcmRlci5tYWtlcjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIG9yZGVyX21ha2VyID0gYXVjdGlvbk9yZGVyLm9yZGVyLm1ha2VyOwogICAgICAgICAgICAgICAgICBvcmRlcl9tYWtlcl9hc3NldCA9IGF1Y3Rpb25PcmRlci5vcmRlci5tYWtlQXNzZXQ7CiAgICAgICAgICAgICAgICB9IC8vIHRoaXMuX2NoZWNrRGlmZkFzc2V0cyhtYWtlQXNzZXQsIGF1Y3Rpb25PcmRlci5vcmRlci50YWtlQXNzZXQpCiAgICAgICAgICAgICAgICAvLyBvcmRlciBzdHJ1Y3QKCgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYWtlT3JkZXJBbmRBcHByb3ZlKG1ha2VyLCBtYWtlQXNzZXQsIG9yZGVyX21ha2VyLCBvcmRlcl9tYWtlcl9hc3NldCwgMSwgMCwgMCwgT1JERVJfREFUQV9WMSwgZW5jRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICByZXQgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCByZXQpOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY3JlYXRlQmlkT3JkZXIoX3g2KSB7CiAgICAgICAgcmV0dXJuIF9jcmVhdGVCaWRPcmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY3JlYXRlQmlkT3JkZXI7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJjcmVhdGVCaWRNYXRjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2NyZWF0ZUJpZE1hdGNoID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNyhfcmVmNSkgewogICAgICAgIHZhciBtYWtlciwgbWFUeXBlTVYsIG1hQ29udHJhY3RBZGRyZXNzLCBtYVZhbHVlLCBfcmVmNSRxdWFudGl0eSwgcXVhbnRpdHksIGJpZElkLCBvcmlnaW5GZWVzLCBwYXlvdXRzLCBlbmNEYXRhLCBiaWRPcmRlciwgYXNzZXREYXRhLCBtYWtlQXNzZXQsIHJldEJpZE1hdGNoT3JkZXIsIHJldDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG1ha2VyID0gX3JlZjUubWFrZXIsIG1hVHlwZU1WID0gX3JlZjUubWFUeXBlTVYsIG1hQ29udHJhY3RBZGRyZXNzID0gX3JlZjUubWFDb250cmFjdEFkZHJlc3MsIG1hVmFsdWUgPSBfcmVmNS5tYVZhbHVlLCBfcmVmNSRxdWFudGl0eSA9IF9yZWY1LnF1YW50aXR5LCBxdWFudGl0eSA9IF9yZWY1JHF1YW50aXR5ID09PSB2b2lkIDAgPyAxIDogX3JlZjUkcXVhbnRpdHksIGJpZElkID0gX3JlZjUuYmlkSWQ7CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1BZGRyZXNzKFttYWtlciwgbWFDb250cmFjdEFkZHJlc3NdKTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbVR5cGVNVihbbWFUeXBlTVZdKTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbVVpbnROdW1iZXIoW21hVmFsdWUsIGJpZElkLCBxdWFudGl0eV0pOwoKICAgICAgICAgICAgICAgIG9yaWdpbkZlZXMgPSBbXTsKICAgICAgICAgICAgICAgIHBheW91dHMgPSBbW21ha2VyLCAxMDAwMF1dOwogICAgICAgICAgICAgICAgZW5jRGF0YSA9IGVuY0RhdGFWMSh0aGlzLndlYjMsIFtwYXlvdXRzLCBvcmlnaW5GZWVzXSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcGkuZ2V0QmlkT3JkZXIoewogICAgICAgICAgICAgICAgICBpZDogYmlkSWQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBiaWRPcmRlciA9IF9jb250ZXh0Ny5zZW50OwogICAgICAgICAgICAgICAgYXNzZXREYXRhID0gdGhpcy5fZW5jQXNzZXREYXRhKG1hVHlwZU1WLCBtYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSk7CiAgICAgICAgICAgICAgICBtYWtlQXNzZXQgPSBBc3NldChtYVR5cGVNViwgYXNzZXREYXRhLCBxdWFudGl0eSk7CgogICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tEaWZmQXNzZXRzKG1ha2VBc3NldCwgYmlkT3JkZXIub3JkZXIudGFrZUFzc2V0KTsKCiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VPcmRlckFuZEFwcHJvdmUobWFrZXIsIG1ha2VBc3NldCwgYmlkT3JkZXIub3JkZXIubWFrZXIsIGJpZE9yZGVyLm9yZGVyLm1ha2VBc3NldCwgMCwgMCwgMCwgT1JERVJfREFUQV9WMSwgZW5jRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICByZXRCaWRNYXRjaE9yZGVyID0gX2NvbnRleHQ3LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDE4OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hdGNoT3JkZXJzKHJldEJpZE1hdGNoT3JkZXIub3JkZXIsIHJldEJpZE1hdGNoT3JkZXIuc2lnbmF0dXJlLCBiaWRPcmRlci5vcmRlciwgYmlkT3JkZXIuc2lnbmF0dXJlLCBtYWtlcik7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgICByZXQgPSBfY29udGV4dDcuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCByZXQpOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU3LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY3JlYXRlQmlkTWF0Y2goX3g3KSB7CiAgICAgICAgcmV0dXJuIF9jcmVhdGVCaWRNYXRjaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY3JlYXRlQmlkTWF0Y2g7CiAgICB9KCkgLy8g64KY7ZWc7YWMIO2MlOudvOqzoCDtlZjripQg7KCc7JWIIOyYpOuNlAoKICB9LCB7CiAgICBrZXk6ICJjcmVhdGVPZmZlck9yZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY3JlYXRlT2ZmZXJPcmRlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoX3JlZjYpIHsKICAgICAgICB2YXIgbWFrZXIsIG1hVHlwZU1WLCBtYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSwgdGFrZXIsIHRhVHlwZU1WLCB0YUNvbnRyYWN0QWRkcmVzcywgdGFWYWx1ZSwgX3JlZjYkcXVhbnRpdHksIHF1YW50aXR5LCBfcmVmNiRzYWx0LCBzYWx0LCBvcmlnaW5GZWVzLCBwYXlvdXRzLCBlbmNEYXRhLCBhc3NldERhdGEsIHRhQXNzZXREYXRhLCByZXQ7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBtYWtlciA9IF9yZWY2Lm1ha2VyLCBtYVR5cGVNViA9IF9yZWY2Lm1hVHlwZU1WLCBtYUNvbnRyYWN0QWRkcmVzcyA9IF9yZWY2Lm1hQ29udHJhY3RBZGRyZXNzLCBtYVZhbHVlID0gX3JlZjYubWFWYWx1ZSwgdGFrZXIgPSBfcmVmNi50YWtlciwgdGFUeXBlTVYgPSBfcmVmNi50YVR5cGVNViwgdGFDb250cmFjdEFkZHJlc3MgPSBfcmVmNi50YUNvbnRyYWN0QWRkcmVzcywgdGFWYWx1ZSA9IF9yZWY2LnRhVmFsdWUsIF9yZWY2JHF1YW50aXR5ID0gX3JlZjYucXVhbnRpdHksIHF1YW50aXR5ID0gX3JlZjYkcXVhbnRpdHkgPT09IHZvaWQgMCA/IDEgOiBfcmVmNiRxdWFudGl0eSwgX3JlZjYkc2FsdCA9IF9yZWY2LnNhbHQsIHNhbHQgPSBfcmVmNiRzYWx0ID09PSB2b2lkIDAgPyBEYXRlLm5vdygpIDogX3JlZjYkc2FsdDsKCiAgICAgICAgICAgICAgICBpZiAoIShtYVR5cGVNViA9PSBFVEgpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgZXJyOiAiQ2FuJ3QgdXNlIEVUSCBmb3Igb2ZmZXItb3JkZXIiCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1BZGRyZXNzKFttYWtlciwgbWFDb250cmFjdEFkZHJlc3MsIHRha2VyLCB0YUNvbnRyYWN0QWRkcmVzc10pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVHlwZU1WKFttYVR5cGVNViwgdGFUeXBlTVZdKTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbVVpbnROdW1iZXIoW21hVmFsdWUsIHRhVmFsdWUsIHF1YW50aXR5LCBzYWx0XSk7CgogICAgICAgICAgICAgICAgb3JpZ2luRmVlcyA9IFtdOwogICAgICAgICAgICAgICAgcGF5b3V0cyA9IFtbbWFrZXIsIDEwMDAwXV07IC8vIDEwMCUgb2YgdGFrZUFzc2V0IHRvIG9yZGVyTWFrZXIKCiAgICAgICAgICAgICAgICBlbmNEYXRhID0gZW5jRGF0YVYxKHRoaXMud2ViMywgW3BheW91dHMsIG9yaWdpbkZlZXNdKTsKICAgICAgICAgICAgICAgIGFzc2V0RGF0YSA9IHRoaXMuX2VuY0Fzc2V0RGF0YShtYVR5cGVNViwgbWFDb250cmFjdEFkZHJlc3MsIG1hVmFsdWUpOwogICAgICAgICAgICAgICAgdGFBc3NldERhdGEgPSB0aGlzLl9lbmNBc3NldERhdGEodGFUeXBlTVYsIHRhQ29udHJhY3RBZGRyZXNzLCB0YVZhbHVlKTsgLy8gb3JkZXIgc3RydWN0CgogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYWtlT3JkZXJBbmRBcHByb3ZlKG1ha2VyLCBBc3NldChtYVR5cGVNViwgYXNzZXREYXRhLCBtYVZhbHVlKSwgdGFrZXIsIEFzc2V0KHRhVHlwZU1WLCB0YUFzc2V0RGF0YSwgcXVhbnRpdHkpLCAvLyB0YXJnZXQgbXVzdCBiZSBORlQ/CiAgICAgICAgICAgICAgICBzYWx0LCAwLCAwLCBPUkRFUl9EQVRBX1YxLCBlbmNEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIHJldCA9IF9jb250ZXh0OC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsIHJldCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTgsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjcmVhdGVPZmZlck9yZGVyKF94OCkgewogICAgICAgIHJldHVybiBfY3JlYXRlT2ZmZXJPcmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY3JlYXRlT2ZmZXJPcmRlcjsKICAgIH0oKSAvLyAvLyBvZmZlcuulvCDsiJjrnb3tlZjripQg7Jik642UCgogIH0sIHsKICAgIGtleTogImNyZWF0ZUFjY2VwdE9yZGVyQW5kTWF0Y2giLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jcmVhdGVBY2NlcHRPcmRlckFuZE1hdGNoID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOShfcmVmNykgewogICAgICAgIHZhciBtYWtlciwgbWFUeXBlTVYsIG1hQ29udHJhY3RBZGRyZXNzLCBtYVZhbHVlLCBfcmVmNyRxdWFudGl0eSwgcXVhbnRpdHksIG9mZmVySWQsIG9yaWdpbkZlZXMsIHBheW91dHMsIGVuY0RhdGEsIG9mZmVyT3JkZXIsIGFzc2V0RGF0YSwgbWFrZUFzc2V0LCByZXRBY2NlcHRPcmRlciwgcmV0OwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbWFrZXIgPSBfcmVmNy5tYWtlciwgbWFUeXBlTVYgPSBfcmVmNy5tYVR5cGVNViwgbWFDb250cmFjdEFkZHJlc3MgPSBfcmVmNy5tYUNvbnRyYWN0QWRkcmVzcywgbWFWYWx1ZSA9IF9yZWY3Lm1hVmFsdWUsIF9yZWY3JHF1YW50aXR5ID0gX3JlZjcucXVhbnRpdHksIHF1YW50aXR5ID0gX3JlZjckcXVhbnRpdHkgPT09IHZvaWQgMCA/IDEgOiBfcmVmNyRxdWFudGl0eSwgb2ZmZXJJZCA9IF9yZWY3Lm9mZmVySWQ7CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1BZGRyZXNzKFttYWtlciwgbWFDb250cmFjdEFkZHJlc3NdKTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbVR5cGVNVihbbWFUeXBlTVZdKTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbVVpbnROdW1iZXIoW21hVmFsdWUsIG9mZmVySWQsIHF1YW50aXR5XSk7CgogICAgICAgICAgICAgICAgb3JpZ2luRmVlcyA9IFtdOwogICAgICAgICAgICAgICAgcGF5b3V0cyA9IFtbbWFrZXIsIDEwMDAwXV07CiAgICAgICAgICAgICAgICBlbmNEYXRhID0gZW5jRGF0YVYxKHRoaXMud2ViMywgW3BheW91dHMsIG9yaWdpbkZlZXNdKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwaS5nZXRPZmZlck9yZGVyKHsKICAgICAgICAgICAgICAgICAgaWQ6IG9mZmVySWQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBvZmZlck9yZGVyID0gX2NvbnRleHQ5LnNlbnQ7CiAgICAgICAgICAgICAgICBhc3NldERhdGEgPSB0aGlzLl9lbmNBc3NldERhdGEobWFUeXBlTVYsIG1hQ29udHJhY3RBZGRyZXNzLCBtYVZhbHVlKTsKICAgICAgICAgICAgICAgIG1ha2VBc3NldCA9IEFzc2V0KG1hVHlwZU1WLCBhc3NldERhdGEsIHF1YW50aXR5KTsKCiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0RpZmZBc3NldHMobWFrZUFzc2V0LCBvZmZlck9yZGVyLm9yZGVyLnRha2VBc3NldCk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYWtlT3JkZXJBbmRBcHByb3ZlKG1ha2VyLCBtYWtlQXNzZXQsIG9mZmVyT3JkZXIub3JkZXIubWFrZXIsIG9mZmVyT3JkZXIub3JkZXIubWFrZUFzc2V0LCAwLCAwLCAwLCBPUkRFUl9EQVRBX1YxLCBlbmNEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIHJldEFjY2VwdE9yZGVyID0gX2NvbnRleHQ5LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDE4OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hdGNoT3JkZXJzKHJldEFjY2VwdE9yZGVyLm9yZGVyLCByZXRBY2NlcHRPcmRlci5zaWduYXR1cmUsIG9mZmVyT3JkZXIub3JkZXIsIG9mZmVyT3JkZXIuc2lnbmF0dXJlLCBtYWtlcik7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgICByZXQgPSBfY29udGV4dDkuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuYWJydXB0KCJyZXR1cm4iLCByZXQpOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU5LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY3JlYXRlQWNjZXB0T3JkZXJBbmRNYXRjaChfeDkpIHsKICAgICAgICByZXR1cm4gX2NyZWF0ZUFjY2VwdE9yZGVyQW5kTWF0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNyZWF0ZUFjY2VwdE9yZGVyQW5kTWF0Y2g7CiAgICB9KCkgLy8gb3JkZXLrpbwg7Leo7IaMCgogIH0sIHsKICAgIGtleTogImNhbmNlbE9yZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY2FuY2VsT3JkZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMChvcmRlciwgb3JkZXJfbWFrZXIpIHsKICAgICAgICB2YXIgZXhjaGFuZ2UsIF9jYWxsb2JqLCByZXM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTAkKF9jb250ZXh0MTApIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JhcmlibGVjb20vcHJvdG9jb2wtZG9jdW1lbnRhdGlvbi9ibG9iL21hc3Rlci9leGNoYW5nZS91cGRhdGluZy1jYW5jZWxsaW5nLWFuLW9yZGVyLm1kCiAgICAgICAgICAgICAgICAvLyBvcmRlcgogICAgICAgICAgICAgICAgZXhjaGFuZ2UgPSB0aGlzLl9tYWtlQ29udHJhY3RJbnN0YW5jZShFeGNoYW5nZSwgdGhpcy5leGNoYW5nZUFkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NhbGxvYmogPSBleGNoYW5nZS5tZXRob2RzLmNhbmNlbChvcmRlcik7CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRyYW5zYWN0aW9uQW5kQ29uZmlybShvcmRlcl9tYWtlciwgdGhpcy5leGNoYW5nZUFkZHJlc3MsIF9jYWxsb2JqLCB7fSwgRXZlbnRUeXBlLkNhbmNlbE9yZGVyLCAnQ2FuY2VsT3JkZXInKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQxMC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iLCByZXMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNhbmNlbE9yZGVyKF94MTAsIF94MTEpIHsKICAgICAgICByZXR1cm4gX2NhbmNlbE9yZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjYW5jZWxPcmRlcjsKICAgIH0oKSAvLyBvcmRlciB1cGRhdGU/CiAgICAvLyBzd2FwIGV0aCB0byBlcmMyMCBob3cgdG8/CgogIH0sIHsKICAgIGtleTogImdldEJhbGFuY2VPZiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldEJhbGFuY2VPZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTExKGFjY291bnQpIHsKICAgICAgICB2YXIgY29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICB0b2tlbklkLAogICAgICAgICAgICBjb250cmFjdENsYXNzLAogICAgICAgICAgICBpbnN0YW5jZSwKICAgICAgICAgICAgX2luc3RhbmNlLAogICAgICAgICAgICBfYXJnczExID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTExJChfY29udGV4dDExKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTEucHJldiA9IF9jb250ZXh0MTEubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzcyA9IF9hcmdzMTEubGVuZ3RoID4gMSAmJiBfYXJnczExWzFdICE9PSB1bmRlZmluZWQgPyBfYXJnczExWzFdIDogMDsKICAgICAgICAgICAgICAgIHRva2VuSWQgPSBfYXJnczExLmxlbmd0aCA+IDIgJiYgX2FyZ3MxMVsyXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3MxMVsyXSA6IDA7CgogICAgICAgICAgICAgICAgLy8gaXMgNzIxIG9yIDExNTUKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtQWRkcmVzcyhbYWNjb3VudF0pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVWludE51bWJlcihbdG9rZW5JZF0pOwoKICAgICAgICAgICAgICAgIGlmICghKGNvbnRyYWN0QWRkcmVzcyA9PSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSA4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2ViMy5ldGguZ2V0QmFsYW5jZShhY2NvdW50KTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDExLnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzaWZ5KGNvbnRyYWN0QWRkcmVzcyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBjb250cmFjdENsYXNzID0gX2NvbnRleHQxMS5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKGNvbnRyYWN0Q2xhc3MgPT0gMTE1NSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghKHRva2VuSWQgPCAxKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAxNDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgJ3Rva2VuIGlkIG11c3QgYmlnZ2VyIHRoYW4gMCc7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuX21ha2VDb250cmFjdEluc3RhbmNlKElFUkMxMTU1LCBjb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2UubWV0aG9kcy5iYWxhbmNlT2YoYWNjb3VudCwgdG9rZW5JZCkuY2FsbCgpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDExLnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgICAgaWYgKCEoY29udHJhY3RDbGFzcyA9PSAyMCB8fCBjb250cmFjdENsYXNzID09IDcyMSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIEVSQzIwICYgRVJDNzIxIGhhcyBzYW1lIGludGVyZmFjZSAoICdiYWxhbmNlT2YoYWRkcmVzcyBhY2NvdW50KSByZXR1cm5zKHVpbnQyNTYgYW1vdW50KScgKQogICAgICAgICAgICAgICAgX2luc3RhbmNlID0gdGhpcy5fbWFrZUNvbnRyYWN0SW5zdGFuY2UoSUVSQzIwLCBjb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMjQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2luc3RhbmNlLm1ldGhvZHMuYmFsYW5jZU9mKGFjY291bnQpLmNhbGwoKTsKCiAgICAgICAgICAgICAgY2FzZSAyNDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQxMS5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSAyNzoKICAgICAgICAgICAgICAgIHRocm93ICIiLmNvbmNhdChjb250cmFjdEFkZHJlc3MsICIgaXMgbm90IHRva2VuKDIwLDcyMSwxMTU1KSBjb250cmFjdC4iKTsKCiAgICAgICAgICAgICAgY2FzZSAyODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTExLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0QmFsYW5jZU9mKF94MTIpIHsKICAgICAgICByZXR1cm4gX2dldEJhbGFuY2VPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0QmFsYW5jZU9mOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiZ2V0VG9rZW5Pd25lck9mIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0VG9rZW5Pd25lck9mID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTIoY29udHJhY3RBZGRyZXNzLCB0b2tlbklkKSB7CiAgICAgICAgdmFyIHRva2VuQ29udDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEyJChfY29udGV4dDEyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTIucHJldiA9IF9jb250ZXh0MTIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtQWRkcmVzcyhbY29udHJhY3RBZGRyZXNzXSk7CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1VaW50TnVtYmVyKFt0b2tlbklkXSk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIHRva2VuQ29udCA9IHRoaXMuX21ha2VDb250cmFjdEluc3RhbmNlKE5GVENvbnRyYWN0LCBjb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbkNvbnQubWV0aG9kcy5vd25lck9mKHRva2VuSWQpLmNhbGwoKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDEyLnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLnByZXYgPSA5OwogICAgICAgICAgICAgICAgX2NvbnRleHQxMi50MCA9IF9jb250ZXh0MTJbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICB0aHJvdyAiZXJyb3I6Ii5jb25jYXQoX2NvbnRleHQxMi50MCwgIjogY29udHJhY3Qub3duZXJPZigiKS5jb25jYXQoKGNvbnRyYWN0QWRkcmVzcywgdG9rZW5JZCksICIpICIpOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTIsIHRoaXMsIFtbMiwgOV1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0VG9rZW5Pd25lck9mKF94MTMsIF94MTQpIHsKICAgICAgICByZXR1cm4gX2dldFRva2VuT3duZXJPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0VG9rZW5Pd25lck9mOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY2xhc3NpZnkiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jbGFzc2lmeSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEzKGNvbnRyYWN0QWRkcmVzcykgewogICAgICAgIHZhciBlcmM3MjFJRCwgZXJjMTE1NUlELCBjb250cmFjdCwgaXM3MjEsIGNvbnRyYWN0MiwgciwgaXMxMTU1OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTMkKF9jb250ZXh0MTMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMy5wcmV2ID0gX2NvbnRleHQxMy5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1BZGRyZXNzKFtjb250cmFjdEFkZHJlc3NdKTsKCiAgICAgICAgICAgICAgICBlcmM3MjFJRCA9ICcweDgwYWM1OGNkJzsKICAgICAgICAgICAgICAgIGVyYzExNTVJRCA9ICcweGQ5YjY3YTI2JzsKICAgICAgICAgICAgICAgIGNvbnRyYWN0ID0gdGhpcy5fbWFrZUNvbnRyYWN0SW5zdGFuY2UoSUVSQzE2NSwgY29udHJhY3RBZGRyZXNzKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMucHJldiA9IDQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyYWN0Lm1ldGhvZHMuc3VwcG9ydHNJbnRlcmZhY2UoZXJjNzIxSUQpLmNhbGwoKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgaXM3MjEgPSBfY29udGV4dDEzLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFpczcyMSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTMuYWJydXB0KCJyZXR1cm4iLCA3MjEpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMjg7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMucHJldiA9IDEyOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMy50MCA9IF9jb250ZXh0MTNbImNhdGNoIl0oNCk7CiAgICAgICAgICAgICAgICAvLyAyMOyduOyngCDssrTtgawg7ZW07JW8IO2VqAogICAgICAgICAgICAgICAgY29udHJhY3QyID0gdGhpcy5fbWFrZUNvbnRyYWN0SW5zdGFuY2UoSUVSQzIwLCBjb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5wcmV2ID0gMTU7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAxODsKICAgICAgICAgICAgICAgIHJldHVybiBjb250cmFjdDIubWV0aG9kcy50b3RhbFN1cHBseSgpLmNhbGwoKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgIHIgPSBfY29udGV4dDEzLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAyMTsKICAgICAgICAgICAgICAgIHJldHVybiBjb250cmFjdDIubWV0aG9kcy5iYWxhbmNlT2YoWkVST19BRERSRVNTKS5jYWxsKCk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICByID0gX2NvbnRleHQxMy5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTMuYWJydXB0KCJyZXR1cm4iLCAyMCk7CgogICAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnByZXYgPSAyNTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMudDEgPSBfY29udGV4dDEzWyJjYXRjaCJdKDE1KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLmFicnVwdCgicmV0dXJuIiwgOTk5OSk7CgogICAgICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAzMDsKICAgICAgICAgICAgICAgIHJldHVybiBjb250cmFjdC5tZXRob2RzLnN1cHBvcnRzSW50ZXJmYWNlKGVyYzExNTVJRCkuY2FsbCgpOwoKICAgICAgICAgICAgICBjYXNlIDMwOgogICAgICAgICAgICAgICAgaXMxMTU1ID0gX2NvbnRleHQxMy5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghaXMxMTU1KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDMzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5hYnJ1cHQoInJldHVybiIsIDExNTUpOwoKICAgICAgICAgICAgICBjYXNlIDMzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTMuYWJydXB0KCJyZXR1cm4iLCA5OTk5KTsKCiAgICAgICAgICAgICAgY2FzZSAzNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEzLCB0aGlzLCBbWzQsIDEyXSwgWzE1LCAyNV1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY2xhc3NpZnkoX3gxNSkgewogICAgICAgIHJldHVybiBfY2xhc3NpZnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNsYXNzaWZ5OwogICAgfSgpIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFJveWFsdHkKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgfSwgewogICAga2V5OiAiZ2V0Um95YWx0aWVzT3duZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRSb3lhbHRpZXNPd25lciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE0KGNvbnRyYWN0QWRkcmVzcywgdG9rZW5JZCkgewogICAgICAgIHZhciBuZnRDb250cmFjdCwgck93bmVyLCByb3lhbHRpZXNSZWdpc3RyeTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE0JChfY29udGV4dDE0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTQucHJldiA9IF9jb250ZXh0MTQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtQWRkcmVzcyhbY29udHJhY3RBZGRyZXNzXSk7CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1VaW50TnVtYmVyKFt0b2tlbklkXSk7IC8vIFJveWFsdHlWMgoKCiAgICAgICAgICAgICAgICBuZnRDb250cmFjdCA9IHRoaXMuX21ha2VDb250cmFjdEluc3RhbmNlKE5GVENvbnRyYWN0LCBjb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBuZnRDb250cmFjdC5tZXRob2RzLmdldFJveWFsdHlPd25lcih0b2tlbklkKS5jYWxsKCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJPd25lciA9IF9jb250ZXh0MTQuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShyT3duZXIgJiYgck93bmVyICE9IFpFUk9fQUREUkVTUykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIm5mdENvbnRyYWN0LmdldFJveWFsdHlPd25lciB3b3JrcyBQQVJVIyIuY29uY2F0KHRva2VuSWQsICIncyByb3lhbHR5T3duZXIgLT4gIikuY29uY2F0KHJPd25lcikpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTQuYWJydXB0KCJyZXR1cm4iLCByT3duZXIpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAvLyBFbmRPZiAtIFJveWFsdHlWMgogICAgICAgICAgICAgICAgcm95YWx0aWVzUmVnaXN0cnkgPSB0aGlzLl9tYWtlQ29udHJhY3RJbnN0YW5jZShSb3lhbHRpZXNSZWdpc3RyeSwgdGhpcy5yb3lhbHRpZXNBZGRyZXNzKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgcmV0dXJuIHJveWFsdGllc1JlZ2lzdHJ5Lm1ldGhvZHMuZ2V0Um95YWx0aWVzT3duZXIoY29udHJhY3RBZGRyZXNzLCB0b2tlbklkKS5jYWxsKCk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0MTQuc2VudCk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldFJveWFsdGllc093bmVyKF94MTYsIF94MTcpIHsKICAgICAgICByZXR1cm4gX2dldFJveWFsdGllc093bmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRSb3lhbHRpZXNPd25lcjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImdldFJveWFsdGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldFJveWFsdGllcyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE1KGNvbnRyYWN0QWRkcmVzcywgdG9rZW5JZCkgewogICAgICAgIHZhciBuZnRDb250cmFjdCwgcm95YWx0aWVzLCByb3lhbHRpZXNSZWdpc3RyeTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE1JChfY29udGV4dDE1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTUucHJldiA9IF9jb250ZXh0MTUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtQWRkcmVzcyhbY29udHJhY3RBZGRyZXNzXSk7CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1VaW50TnVtYmVyKFt0b2tlbklkXSk7IC8vIFJveWFsdHlWMgoKCiAgICAgICAgICAgICAgICBuZnRDb250cmFjdCA9IHRoaXMuX21ha2VDb250cmFjdEluc3RhbmNlKE5GVENvbnRyYWN0LCBjb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBuZnRDb250cmFjdC5tZXRob2RzLmdldFJveWFsdGllcyh0b2tlbklkKS5jYWxsKCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJveWFsdGllcyA9IF9jb250ZXh0MTUuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShyb3lhbHRpZXMubGVuZ3RoID4gMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIm5mdENvbnRyYWN0LmdldFJveWFsdGllcyB3b3Jrcy4gUEFSVSMiLmNvbmNhdCh0b2tlbklkLCAiJ3Mgcm95YWx0aWVzOiAiKS5jb25jYXQocm95YWx0aWVzKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5hYnJ1cHQoInJldHVybiIsIHJveWFsdGllcyk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIC8vIEVPIC0gUm95YWx0eVYyCiAgICAgICAgICAgICAgICByb3lhbHRpZXNSZWdpc3RyeSA9IHRoaXMuX21ha2VDb250cmFjdEluc3RhbmNlKFJveWFsdGllc1JlZ2lzdHJ5LCB0aGlzLnJveWFsdGllc0FkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gcm95YWx0aWVzUmVnaXN0cnkubWV0aG9kcy5nZXRSb3lhbHRpZXMoY29udHJhY3RBZGRyZXNzLCB0b2tlbklkKS5jYWxsKCk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0MTUuc2VudCk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldFJveWFsdGllcyhfeDE4LCBfeDE5KSB7CiAgICAgICAgcmV0dXJuIF9nZXRSb3lhbHRpZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldFJveWFsdGllczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInRyYW5zZmVyUm95YWx0aWVzT3duZXJzaGlwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdHJhbnNmZXJSb3lhbHRpZXNPd25lcnNoaXAgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNihjb250cmFjdEFkZHJlc3MsIHRva2VuSWQsIG93bmVyTmV3LCBmcm9tKSB7CiAgICAgICAgdmFyIG93bmVyQmVmb3JlLCBuZnRDb250cmFjdCwgX2NhbGxvYmosIHJlcywgcm95YWx0aWVzUmVnaXN0cnk7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTYkKF9jb250ZXh0MTYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNi5wcmV2ID0gX2NvbnRleHQxNi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1BZGRyZXNzKFtjb250cmFjdEFkZHJlc3MsIG93bmVyTmV3LCBmcm9tXSk7CgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1VaW50TnVtYmVyKFt0b2tlbklkXSk7CgogICAgICAgICAgICAgICAgb3duZXJOZXcgPSBvd25lck5ldy50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJveWFsdGllc093bmVyKGNvbnRyYWN0QWRkcmVzcywgdG9rZW5JZCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIG93bmVyQmVmb3JlID0gX2NvbnRleHQxNi5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKG93bmVyQmVmb3JlLnRvTG93ZXJDYXNlKCkgPT0gb3duZXJOZXcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTYubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICBzdGF0dXM6IHRydWUsCiAgICAgICAgICAgICAgICAgIG93bmVyQmVmb3JlOiBvd25lckJlZm9yZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTYucHJldiA9IDg7CiAgICAgICAgICAgICAgICBuZnRDb250cmFjdCA9IHRoaXMuX21ha2VDb250cmFjdEluc3RhbmNlKE5GVENvbnRyYWN0LCBjb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgICAgICAgX2NhbGxvYmogPSBuZnRDb250cmFjdC5tZXRob2RzLnRyYW5zZmVyUm95YWx0eU93bmVyc2hpcCh0b2tlbklkLCBvd25lck5ldyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRUcmFuc2FjdGlvbkFuZENvbmZpcm0oZnJvbSwgY29udHJhY3RBZGRyZXNzLCBfY2FsbG9iaiwge30sIEV2ZW50VHlwZS5UcmFuc2ZlclJveWFsdGllc093bmVyc2hpcCwgJ1RyYW5zZmVyIHJveWFsdGllcyBvd25lcnNoaXAnKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0MTYuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzID09IHRydWUpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTYubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNi5hYnJ1cHQoInJldHVybiIsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcmVzKSwge30sIHsKICAgICAgICAgICAgICAgICAgb3duZXJCZWZvcmU6IG93bmVyQmVmb3JlCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgX2NvbnRleHQxNi5wcmV2ID0gMTg7CiAgICAgICAgICAgICAgICBfY29udGV4dDE2LnQwID0gX2NvbnRleHQxNlsiY2F0Y2giXSg4KTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoX2NvbnRleHQxNi50MCk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICAvLyBFTyAtIFJveWFsdHlWMgogICAgICAgICAgICAgICAgcm95YWx0aWVzUmVnaXN0cnkgPSB0aGlzLl9tYWtlQ29udHJhY3RJbnN0YW5jZShSb3lhbHRpZXNSZWdpc3RyeSwgdGhpcy5yb3lhbHRpZXNBZGRyZXNzKTsKICAgICAgICAgICAgICAgIF9jYWxsb2JqID0gcm95YWx0aWVzUmVnaXN0cnkubWV0aG9kcy50cmFuc2ZlclJveWFsdGllc093bmVyc2hpcChjb250cmFjdEFkZHJlc3MsIHRva2VuSWQsIG93bmVyTmV3KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTYubmV4dCA9IDI1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRyYW5zYWN0aW9uQW5kQ29uZmlybShmcm9tLCB0aGlzLnJveWFsdGllc0FkZHJlc3MsIF9jYWxsb2JqLCB7fSwgRXZlbnRUeXBlLlRyYW5zZmVyUm95YWx0aWVzT3duZXJzaGlwLCAnVHJhbnNmZXIgcm95YWx0aWVzIG93bmVyc2hpcCcpOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQxNi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTYuYWJydXB0KCJyZXR1cm4iLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJlcyksIHt9LCB7CiAgICAgICAgICAgICAgICAgIG93bmVyQmVmb3JlOiBvd25lckJlZm9yZQogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTYsIHRoaXMsIFtbOCwgMThdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyUm95YWx0aWVzT3duZXJzaGlwKF94MjAsIF94MjEsIF94MjIsIF94MjMpIHsKICAgICAgICByZXR1cm4gX3RyYW5zZmVyUm95YWx0aWVzT3duZXJzaGlwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cmFuc2ZlclJveWFsdGllc093bmVyc2hpcDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInVwZGF0ZVJveWFsdGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3VwZGF0ZVJveWFsdGllcyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE3KGNvbnRyYWN0QWRkcmVzcywgdG9rZW5JZCwgcm95YWx0aWVzTmV3LCBmcm9tKSB7CiAgICAgICAgdmFyIHRva2VuT3duZXIsIG93bmVyQmVmb3JlLCBfcm95YWx0aWVzQmVmb3JlLCBuZnRDb250LCBfY2FsbG9iaiwgcmVzLCByb3lhbHRpZXNSZWdpc3RyeTsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNyQoX2NvbnRleHQxNykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE3LnByZXYgPSBfY29udGV4dDE3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbUFkZHJlc3MoW2NvbnRyYWN0QWRkcmVzcywgZnJvbV0pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVWludE51bWJlcihbdG9rZW5JZF0pOwoKICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeVBhcmFtVHlwZVBhcnQoW3JveWFsdGllc05ld10pOyAvLyBUT0RPOiAxMDDqs7HtlbTshJwg7J6F66Cl7ZWY6rKMIO2VoOyngCDslYTri4jrqbQg7JWI7JeQ7IScIDEwMCDqs7HtlaDsp4Dsl5Ag65Sw65287IScIOqygOyCrCDri6zrnbzsp4Tri6QuIOq3uOumrOqzoCDqt7jsl5Ag66ee64qUIOy1nOuMgOqwkiDqsoDsgqzrj4Qg7LaU6rCAIO2VhOyalO2VqCjstJ3tlakgMTAwJeydtO2VmCkKCgogICAgICAgICAgICAgICAgX2NvbnRleHQxNy5wcmV2ID0gMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRUb2tlbk93bmVyT2YoY29udHJhY3RBZGRyZXNzLCB0b2tlbklkKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgdG9rZW5Pd25lciA9IF9jb250ZXh0MTcuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcucHJldiA9IDk7CiAgICAgICAgICAgICAgICBfY29udGV4dDE3LnQwID0gX2NvbnRleHQxN1siY2F0Y2giXSgzKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE3LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICBzdGF0dXM6IGZhbHNlLAogICAgICAgICAgICAgICAgICBlcnI6ICJjb250cmFjdCBvciB0b2tlbklkIHByb2JsZW06OiAiLmNvbmNhdChKU09OLnN0cmluZ2lmeShfY29udGV4dDE3LnQwKSkKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgLy8gdmFyIHJlcyA9IGF3YWl0IHBhcnVsYS51cGRhdGVSb3lhbHRpZXMocGFydWxhLm5mdEFkZHJlc3MsIHRva2VuSWQsIHJveWFsdGllc1RvLCBBTElDRV9BRERSRVNTKQogICAgICAgICAgICAgICAgZnJvbSA9IGZyb20udG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Um95YWx0aWVzT3duZXIoY29udHJhY3RBZGRyZXNzLCB0b2tlbklkKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIG93bmVyQmVmb3JlID0gX2NvbnRleHQxNy5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKG93bmVyQmVmb3JlID09IFpFUk9fQUREUkVTUyAmJiB0b2tlbk93bmVyLnRvTG93ZXJDYXNlKCkgPT0gZnJvbSB8fCAvLyBvd25lckJlZm9yZeqwgCB6ZXJv6rOgLCB0b2tlbk93bmVyKGVyYzcyMS5vd25lck9mKGFkZHJlc3Mp6rCAIOunnuqxsOuCmAogICAgICAgICAgICAgICAgb3duZXJCZWZvcmUudG9Mb3dlckNhc2UoKSA9PSBmcm9tKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSA0MzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSb3lhbHRpZXMoY29udHJhY3RBZGRyZXNzLCB0b2tlbklkKTsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIF9yb3lhbHRpZXNCZWZvcmUgPSBfY29udGV4dDE3LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDE3LnByZXYgPSAyMDsKICAgICAgICAgICAgICAgIG5mdENvbnQgPSB0aGlzLl9tYWtlQ29udHJhY3RJbnN0YW5jZShORlRDb250cmFjdCwgY29udHJhY3RBZGRyZXNzKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDI0OwogICAgICAgICAgICAgICAgcmV0dXJuIG5mdENvbnQubWV0aG9kcy51cGRhdGVSb3lhbHR5KHRva2VuSWQsIHJveWFsdGllc05ldyk7CgogICAgICAgICAgICAgIGNhc2UgMjQ6CiAgICAgICAgICAgICAgICBfY2FsbG9iaiA9IF9jb250ZXh0MTcuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDI3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRyYW5zYWN0aW9uQW5kQ29uZmlybShmcm9tLCBjb250cmFjdEFkZHJlc3MsIF9jYWxsb2JqLCB7fSwgRXZlbnRUeXBlLlVwZGF0ZVJveWFsdGllcywgJ1VwZGF0ZSByb3lhbHRpZXMnKTsKCiAgICAgICAgICAgICAgY2FzZSAyNzoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0MTcuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzID09IHRydWUpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDMwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNy5hYnJ1cHQoInJldHVybiIsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcmVzKSwge30sIHsKICAgICAgICAgICAgICAgICAgcm95YWx0aWVzQmVmb3JlOiBfcm95YWx0aWVzQmVmb3JlLAogICAgICAgICAgICAgICAgICByb3lhbHRpZXNOZXc6IHJveWFsdGllc05ldwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDMwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMzU7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAzMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcucHJldiA9IDMyOwogICAgICAgICAgICAgICAgX2NvbnRleHQxNy50MSA9IF9jb250ZXh0MTdbImNhdGNoIl0oMjApOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQxNy50MSk7CgogICAgICAgICAgICAgIGNhc2UgMzU6CiAgICAgICAgICAgICAgICAvLyBFTyAtIFJveWFsdHlWMgogICAgICAgICAgICAgICAgcm95YWx0aWVzUmVnaXN0cnkgPSB0aGlzLl9tYWtlQ29udHJhY3RJbnN0YW5jZShSb3lhbHRpZXNSZWdpc3RyeSwgdGhpcy5yb3lhbHRpZXNBZGRyZXNzKTsKICAgICAgICAgICAgICAgIF9jYWxsb2JqID0gcm95YWx0aWVzUmVnaXN0cnkubWV0aG9kcy5zZXRSb3lhbHRpZXNCeVRva2VuQW5kVG9rZW5JZChjb250cmFjdEFkZHJlc3MsIHRva2VuSWQsIHJveWFsdGllc05ldyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSAzOTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRUcmFuc2FjdGlvbkFuZENvbmZpcm0oZnJvbSwgdGhpcy5yb3lhbHRpZXNBZGRyZXNzLCBfY2FsbG9iaiwge30sIEV2ZW50VHlwZS5VcGRhdGVSb3lhbHRpZXMsICdVcGRhdGUgcm95YWx0aWVzJyk7CgogICAgICAgICAgICAgIGNhc2UgMzk6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDE3LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNy5hYnJ1cHQoInJldHVybiIsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcmVzKSwge30sIHsKICAgICAgICAgICAgICAgICAgcm95YWx0aWVzQmVmb3JlOiBfcm95YWx0aWVzQmVmb3JlLAogICAgICAgICAgICAgICAgICByb3lhbHRpZXNOZXc6IHJveWFsdGllc05ldwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDQzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgIHRva2VuT3duZXI6IHRva2VuT3duZXIsCiAgICAgICAgICAgICAgICAgIG93bmVyQmVmb3JlOiBvd25lckJlZm9yZSwKICAgICAgICAgICAgICAgICAgJ3VwZGF0ZVJlcXVlc3RlZEZyb20nOiBmcm9tLAogICAgICAgICAgICAgICAgICBlcnI6ICdvd25lcnNoaXAgcHJvYmxlbScKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNy5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTcsIHRoaXMsIFtbMywgOV0sIFsyMCwgMzJdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVJveWFsdGllcyhfeDI0LCBfeDI1LCBfeDI2LCBfeDI3KSB7CiAgICAgICAgcmV0dXJuIF91cGRhdGVSb3lhbHRpZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHVwZGF0ZVJveWFsdGllczsKICAgIH0oKSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBlbmQgb2YgUm95YWx0eQogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gVE9ETzogY29uc2lkZXIgdXBkYXRlIG1ldGFkYXRhCgogIH0sIHsKICAgIGtleTogIl9tYXRjaE9yZGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX21hdGNoT3JkZXJzMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE4KGxlZnRPcmRlciwgbGVmdFNpZ25hdHVyZSwgcmlnaHRPcmRlciwgcmlnaHRTaWduYXR1cmUsIGZyb20pIHsKICAgICAgICB2YXIgdmFsdWUsCiAgICAgICAgICAgIGV4Y2hhbmdlLAogICAgICAgICAgICB0bywKICAgICAgICAgICAgX2NhbGxvYmosCiAgICAgICAgICAgIF9wYXJhbSwKICAgICAgICAgICAgcmV0LAogICAgICAgICAgICBfYXJnczE4ID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE4JChfY29udGV4dDE4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTgucHJldiA9IF9jb250ZXh0MTgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2FyZ3MxOC5sZW5ndGggPiA1ICYmIF9hcmdzMThbNV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMThbNV0gOiAwOwogICAgICAgICAgICAgICAgZXhjaGFuZ2UgPSB0aGlzLl9tYWtlQ29udHJhY3RJbnN0YW5jZShFeGNoYW5nZSwgdGhpcy5leGNoYW5nZUFkZHJlc3MpOwogICAgICAgICAgICAgICAgdG8gPSB0aGlzLmV4Y2hhbmdlQWRkcmVzczsKICAgICAgICAgICAgICAgIF9jYWxsb2JqID0gZXhjaGFuZ2UubWV0aG9kcy5tYXRjaE9yZGVycyhsZWZ0T3JkZXIsIGxlZnRTaWduYXR1cmUsIHJpZ2h0T3JkZXIsIHJpZ2h0U2lnbmF0dXJlKTsKICAgICAgICAgICAgICAgIF9wYXJhbSA9IHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQxOC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRUcmFuc2FjdGlvbkFuZENvbmZpcm0oZnJvbSwgdG8sIF9jYWxsb2JqLCBfcGFyYW0sIEV2ZW50VHlwZS5NYXRjaE9yZGVycywgIk1hdGNoIG9yZGVycyIpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICByZXQgPSBfY29udGV4dDE4LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOC5hYnJ1cHQoInJldHVybiIsIHJldCk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTE4LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX21hdGNoT3JkZXJzKF94MjgsIF94MjksIF94MzAsIF94MzEsIF94MzIpIHsKICAgICAgICByZXR1cm4gX21hdGNoT3JkZXJzMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX21hdGNoT3JkZXJzOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX2FwcHJvdmVUcmFuc2ZlclByb3h5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYXBwcm92ZVRyYW5zZmVyUHJveHkyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTkoYXNzZXRfdHlwZSwgY29udHJhY3RfYWRkcmVzcywgYXBwcm92ZV9hbW91bnQsIGZyb20pIHsKICAgICAgICB2YXIgcmV0LCB0bywgX3BhcmFtLCB0cmFuc2Zlcl9wcm94eSwgaWVyYzIwLCBhbGxvd2FuY2UsIF9zeW1ib2wsIHN5bWJvbCwgX2NhbGxvYmosIF90cmFuc2Zlcl9wcm94eSwgaWVyYywgX2NhbGxvYmoyLCBpc0FwcHJvdmVkLCBlcnI7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTkkKF9jb250ZXh0MTkpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxOS5wcmV2ID0gX2NvbnRleHQxOS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gaXNBcHByb3ZlZEZvckFsbChhZGRyZXNzIG93bmVyLCBhZGRyZXNzIG9wZXJhdG9yKQogICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gc2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyBvcGVyYXRvciwgYm9vbCBhcHByb3ZlZCkgcHVibGljIHZpcnR1YWwgb3ZlcnJpZGUKICAgICAgICAgICAgICAgIHRvID0gY29udHJhY3RfYWRkcmVzczsKICAgICAgICAgICAgICAgIF9wYXJhbSA9IHt9OwoKICAgICAgICAgICAgICAgIGlmICghKGFzc2V0X3R5cGUgPT0gRVJDMjApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDI5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0cmFuc2Zlcl9wcm94eSA9IHRoaXMuZXJjMjBUcmFuc2ZlclByb3h5QWRkcmVzczsKICAgICAgICAgICAgICAgIGllcmMyMCA9IHRoaXMuX21ha2VDb250cmFjdEluc3RhbmNlKElFUkMyMCwgY29udHJhY3RfYWRkcmVzcyk7IC8vIGNoZWNrIGFsbG93YW5jZShvcGVyYXRvciwgc3BlbmRlcikgcmV0dXJucyh1aW50MjU2KQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gaWVyYzIwLm1ldGhvZHMuYWxsb3dhbmNlKGZyb20sIHRyYW5zZmVyX3Byb3h5KS5jYWxsKCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGFsbG93YW5jZSA9IF9jb250ZXh0MTkuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShhbGxvd2FuY2UgPj0gYXBwcm92ZV9hbW91bnQpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDIzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDE5LnByZXYgPSA5OwogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53ZWIzLmV0aC5jYWxsKHsKICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSwKICAgICAgICAgICAgICAgICAgdG86IGNvbnRyYWN0X2FkZHJlc3MsCiAgICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMud2ViMy5ldGguYWJpLmVuY29kZUZ1bmN0aW9uU2lnbmF0dXJlKCJzeW1ib2woKSIpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIF9zeW1ib2wgPSBfY29udGV4dDE5LnNlbnQ7CiAgICAgICAgICAgICAgICBzeW1ib2wgPSB0aGlzLndlYjMuZXRoLmFiaS5kZWNvZGVQYXJhbWV0ZXIoInN0cmluZyIsIF9zeW1ib2wpOwogICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoIiIuY29uY2F0KGZyb20sICIgYXBwcm92ZSAiKS5jb25jYXQoc3ltYm9sLCAiOiIpLmNvbmNhdChhbGxvd2FuY2UsICIgZm9yICIpLmNvbmNhdCh0cmFuc2Zlcl9wcm94eSkpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkucHJldiA9IDE3OwogICAgICAgICAgICAgICAgX2NvbnRleHQxOS50MCA9IF9jb250ZXh0MTlbImNhdGNoIl0oOSk7CiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcihfY29udGV4dDE5LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIHJldCA9IHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICAgIF9jYWxsb2JqID0gaWVyYzIwLm1ldGhvZHMuYXBwcm92ZSh0cmFuc2Zlcl9wcm94eSwgYXBwcm92ZV9hbW91bnQpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVHJhbnNhY3Rpb25BbmRDb25maXJtKGZyb20sIHRvLCBfY2FsbG9iaiwgX3BhcmFtLCBFdmVudFR5cGUuQXBwcm92ZUN1cnJlbmN5LCAiQXBwcm92ZSBjdXJyZW5jeSIpOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgICAgcmV0ID0gX2NvbnRleHQxOS5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gNTA7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyOToKICAgICAgICAgICAgICAgIGlmICghKGFzc2V0X3R5cGUgPT0gRVJDNzIxIHx8IGFzc2V0X3R5cGUgPT0gRVJDMTE1NSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gNDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIDcyMTogZnVuY3Rpb24gc2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyBvcGVyYXRvciwgYm9vbCBfYXBwcm92ZWQpIGV4dGVybmFsOwogICAgICAgICAgICAgICAgLy8gMTE1NTogZnVuY3Rpb24gc2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyBfb3BlcmF0b3IsIGJvb2wgX2FwcHJvdmVkKSBleHRlcm5hbDsKICAgICAgICAgICAgICAgIF90cmFuc2Zlcl9wcm94eSA9IHRoaXMudHJhbnNmZXJQcm94eUFkZHJlc3M7IC8vIHRyYW5zZmVyLXByb3h5ISBub3QgZXhjaGFuZ2UKCiAgICAgICAgICAgICAgICBpZiAoYXNzZXRfdHlwZSA9PSBFUkM3MjEpIHsKICAgICAgICAgICAgICAgICAgaWVyYyA9IHRoaXMuX21ha2VDb250cmFjdEluc3RhbmNlKE5GVENvbnRyYWN0LCBjb250cmFjdF9hZGRyZXNzKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGllcmMgPSB0aGlzLl9tYWtlQ29udHJhY3RJbnN0YW5jZShORlQxMTU1Q29udHJhY3QsIGNvbnRyYWN0X2FkZHJlc3MpOwogICAgICAgICAgICAgICAgfSAvLyBjaGVjayBpc0FwcHJvdmVkRm9yQWxsKG93bmVyLCBvcGVyYXRvcikgcmV0dXJucyhib29sKQoKCiAgICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSAzNDsKICAgICAgICAgICAgICAgIHJldHVybiBpZXJjLm1ldGhvZHMuaXNBcHByb3ZlZEZvckFsbChmcm9tLCBfdHJhbnNmZXJfcHJveHkpLmNhbGwoKTsKCiAgICAgICAgICAgICAgY2FzZSAzNDoKICAgICAgICAgICAgICAgIGlzQXBwcm92ZWQgPSBfY29udGV4dDE5LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFpc0FwcHJvdmVkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDQzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSAzODsKICAgICAgICAgICAgICAgIHJldHVybiBpZXJjLm1ldGhvZHMuc3ltYm9sKCkuY2FsbCgpOwoKICAgICAgICAgICAgICBjYXNlIDM4OgogICAgICAgICAgICAgICAgc3ltYm9sID0gX2NvbnRleHQxOS5zZW50OwogICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoIiIuY29uY2F0KGZyb20sICIgYXBwcm92ZSAiKS5jb25jYXQoc3ltYm9sLCAiIyBmb3IgIikuY29uY2F0KF90cmFuc2Zlcl9wcm94eSkpOwogICAgICAgICAgICAgICAgcmV0ID0gewogICAgICAgICAgICAgICAgICBzdGF0dXM6IHRydWUKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSA0NzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDQzOgogICAgICAgICAgICAgICAgX2NhbGxvYmoyID0gaWVyYy5tZXRob2RzLnNldEFwcHJvdmFsRm9yQWxsKF90cmFuc2Zlcl9wcm94eSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSA0NjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRUcmFuc2FjdGlvbkFuZENvbmZpcm0oZnJvbSwgdG8sIF9jYWxsb2JqMiwgX3BhcmFtLCBFdmVudFR5cGUuQXBwcm92ZU9yZGVyLCAiU2V0IGFwcHJvdmFsIGZvciBhbGwiKTsKCiAgICAgICAgICAgICAgY2FzZSA0NjoKICAgICAgICAgICAgICAgIHJldCA9IF9jb250ZXh0MTkuc2VudDsKCiAgICAgICAgICAgICAgY2FzZSA0NzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDUwOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgNDk6CiAgICAgICAgICAgICAgICAvLyBFVEgKICAgICAgICAgICAgICAgIHJldCA9IHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICBjYXNlIDUwOgogICAgICAgICAgICAgICAgZXJyID0gcmV0LnN0YXR1cyA/ICcnIDogImFwcHJvdmUgZmFpbCI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOS5hYnJ1cHQoInJldHVybiIsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcmV0KSwge30sIHsKICAgICAgICAgICAgICAgICAgZXJyOiBlcnIKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSA1MjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTE5LCB0aGlzLCBbWzksIDE3XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfYXBwcm92ZVRyYW5zZmVyUHJveHkoX3gzMywgX3gzNCwgX3gzNSwgX3gzNikgewogICAgICAgIHJldHVybiBfYXBwcm92ZVRyYW5zZmVyUHJveHkyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfYXBwcm92ZVRyYW5zZmVyUHJveHk7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfbWFrZU9yZGVyQW5kQXBwcm92ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX21ha2VPcmRlckFuZEFwcHJvdmUyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjAobWFrZXIsIG1ha2VyQXNzZXQsIHRha2VyLCB0YWtlckFzc2V0LCBzYWx0LCBzdGFydCwgZW5kLCBkYXRhVHlwZSwgZW5jRGF0YSkgewogICAgICAgIHZhciBvcmRlciwgZGF0YSwgc2lnbmF0dXJlLCBfc2lnbmVkX2RhdGFfYW5kX3NpZ24sIF9kZWNBc3NldCwgdHlwZU1WLCBjb250cmFjdEFkZHJlc3MsIHZhbHVlLCByZXQ7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjAkKF9jb250ZXh0MjApIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMC5wcmV2ID0gX2NvbnRleHQyMC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5UGFyYW1BZGRyZXNzKFttYWtlciwgdGFrZXJdKTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbVVpbnROdW1iZXIoW3NhbHQsIHN0YXJ0LCBlbmRdKTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlQYXJhbUFzc2V0KFttYWtlckFzc2V0LCB0YWtlckFzc2V0XSk7IC8vIG5lZWQgdG8gdmVyaWZ5IFtkYXRhVHlwZSwgZW5jRGF0YV0gCiAgICAgICAgICAgICAgICAvLyB2YWxpZGF0ZSBtYWtlciwgdGFrZXIgYWRkcmVzc2VzCiAgICAgICAgICAgICAgICAvLyB2YWxpZGF0ZSBhc3NldHMKCgogICAgICAgICAgICAgICAgb3JkZXIgPSBPcmRlcihtYWtlciwgbWFrZXJBc3NldCwgLy8gQXNzZXQoRVRILCAiMHgiLCAyMDApLCAKICAgICAgICAgICAgICAgIHRha2VyLCAvLyBjYW4gYmUgWkVSTwogICAgICAgICAgICAgICAgdGFrZXJBc3NldCwgLy8gQXNzZXQoRVJDNzIxLCBlbmMoZXJjNzIxLmFkZHJlc3MsIGVyYzcyMVRva2VuSWQxKSwgMSksIAogICAgICAgICAgICAgICAgc2FsdCwgLy8gCiAgICAgICAgICAgICAgICBzdGFydCwgLy8gCiAgICAgICAgICAgICAgICBlbmQsIC8vIAogICAgICAgICAgICAgICAgZGF0YVR5cGUsIC8vIE9SREVSX0RBVEFfVjEgKERUIG1hZ2ljIHZhbHVlKQogICAgICAgICAgICAgICAgZW5jRGF0YSAvLyBlbmNEYXRhUmlnaHQgKERUIGVuY3J5cHRlZCkKICAgICAgICAgICAgICAgICk7IC8vIHNpZ24KCiAgICAgICAgICAgICAgICBpZiAoIShzYWx0ICE9IDApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjAubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDIwLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVR5cGVkRGF0YUFuZFNpZ25hdHVyZSh0aGlzLndlYjMsIHRoaXMuZXhjaGFuZ2VBZGRyZXNzLCBvcmRlciwgbWFrZXIpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfc2lnbmVkX2RhdGFfYW5kX3NpZ24gPSBfY29udGV4dDIwLnNlbnQ7CiAgICAgICAgICAgICAgICBzaWduYXR1cmUgPSBfc2lnbmVkX2RhdGFfYW5kX3NpZ24uc2lnOwogICAgICAgICAgICAgICAgZGF0YSA9IF9zaWduZWRfZGF0YV9hbmRfc2lnbi5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHNpZ25hdHVyZSA9ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnOwogICAgICAgICAgICAgICAgZGF0YSA9ICcnOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgX2RlY0Fzc2V0ID0gZGVjQXNzZXQodGhpcy53ZWIzLCBtYWtlckFzc2V0KSwgdHlwZU1WID0gX2RlY0Fzc2V0LnR5cGVNViwgY29udHJhY3RBZGRyZXNzID0gX2RlY0Fzc2V0LmNvbnRyYWN0QWRkcmVzcywgdmFsdWUgPSBfZGVjQXNzZXQudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDIwLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hcHByb3ZlVHJhbnNmZXJQcm94eSh0eXBlTVYsIGNvbnRyYWN0QWRkcmVzcywgdmFsdWUsIG1ha2VyKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHJldCA9IF9jb250ZXh0MjAuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIwLmFicnVwdCgicmV0dXJuIiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCByZXQpLCB7fSwgewogICAgICAgICAgICAgICAgICBvcmRlcjogb3JkZXIsCiAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyMCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9tYWtlT3JkZXJBbmRBcHByb3ZlKF94MzcsIF94MzgsIF94MzksIF94NDAsIF94NDEsIF94NDIsIF94NDMsIF94NDQsIF94NDUpIHsKICAgICAgICByZXR1cm4gX21ha2VPcmRlckFuZEFwcHJvdmUyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfbWFrZU9yZGVyQW5kQXBwcm92ZTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9leHRyYWN0VHJhbnNmZXJJbmZvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZXh0cmFjdFRyYW5zZmVySW5mbzIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMSh0eEhhc2gpIHsKICAgICAgICB2YXIgcmVjZWlwdCwgbG9nLCBzaWdUcmFuc2ZlcjcyMSwgc2lnVHJhbnNmZXIxMTU1LCBzaWdFdnQsIGZyb20sIHRvLCB0b2tlbklkLCBxdWFudGl0eSwgciwgYmxvY2tOdW1iZXIsIGNvbnRyYWN0QWRkcmVzcywgaXNNaW50ZWQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyMSQoX2NvbnRleHQyMSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIxLnByZXYgPSBfY29udGV4dDIxLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2ViMy5ldGguZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHR4SGFzaCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJlY2VpcHQgPSBfY29udGV4dDIxLnNlbnQ7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZWNlaXB0LmxvZ3MpCiAgICAgICAgICAgICAgICAvLyByZWNlaXB0LnRyYW5zYWN0aW9uSGFzaCAvLyB0eEhhc2gKICAgICAgICAgICAgICAgIGxvZyA9IHJlY2VpcHQubG9nc1swXTsgLy8gVE9ETzogbG9n6rCAIOyXrOufrCDqsJzsnbwg65WM64qUIOyWtOuWu+qyjCDtlaDqsqgvLyBhcnIgPSBsb2dzLm1hcChsb2cgPT4geyAuLiBmcm9tID0gZGVjb2RlKCdhZGRyZXNzJywgbG9nLnRvcGljc1sxXSkgLi59KQogICAgICAgICAgICAgICAgLy8gbG9nLmRhdGEgLy8gbm9uLWluZGV4ZWQg7ZWE65OcIOuNsOydtO2EsOuTpOydtCDsl6zquLDsl5Ag7KCA7J6l65CoKGluZGV4ZWQg7ZWE65Oc64qUIHRvcGljc+yXkCkKICAgICAgICAgICAgICAgIC8vIGtlY2NhazI1NignVHJhbnNmZXIoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpJykKCiAgICAgICAgICAgICAgICBzaWdUcmFuc2ZlcjcyMSA9ICcweGRkZjI1MmFkMWJlMmM4OWI2OWMyYjA2OGZjMzc4ZGFhOTUyYmE3ZjE2M2M0YTExNjI4ZjU1YTRkZjUyM2IzZWYnOwogICAgICAgICAgICAgICAgc2lnVHJhbnNmZXIxMTU1ID0gJzB4YzNkNTgxNjhjNWFlNzM5NzczMWQwNjNkNWJiZjNkNjU3ODU0NDI3MzQzZjRjMDgzMjQwZjdhYWNhYTJkMGY2Mic7IC8vIGNvbnNvbGUubG9nKHJlY2VpcHQpICAvLyBnYW5hY2xpIOyXkOyEnCDthYzsiqTtirjtlZjroKTqs6Ag7ZaI64qU642wLCBldmVudCDrsJzsg53snbQg7JWI65CY64SkOwoKICAgICAgICAgICAgICAgIHNpZ0V2dCA9IGxvZy50b3BpY3NbMF07CiAgICAgICAgICAgICAgICBxdWFudGl0eSA9IDA7CgogICAgICAgICAgICAgICAgaWYgKCEoc2lnRXZ0ID09IHNpZ1RyYW5zZmVyNzIxKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSAxNDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnJvbSA9IHRoaXMud2ViMy5ldGguYWJpLmRlY29kZVBhcmFtZXRlcignYWRkcmVzcycsIGxvZy50b3BpY3NbMV0pOyAvLyBmcm9tCgogICAgICAgICAgICAgICAgdG8gPSB0aGlzLndlYjMuZXRoLmFiaS5kZWNvZGVQYXJhbWV0ZXIoJ2FkZHJlc3MnLCBsb2cudG9waWNzWzJdKTsgLy8gdG8KCiAgICAgICAgICAgICAgICB0b2tlbklkID0gdGhpcy53ZWIzLmV0aC5hYmkuZGVjb2RlUGFyYW1ldGVyKCd1aW50JywgbG9nLnRvcGljc1szXSk7IC8vIHRva2VuSWQgKGhleCkKCiAgICAgICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSAyNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgaWYgKCEoc2lnRXZ0ID09IHNpZ1RyYW5zZmVyMTE1NSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyMS5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIGluIElFUkMxMTU1CiAgICAgICAgICAgICAgICAvLyAgIGV2ZW50IFRyYW5zZmVyU2luZ2xlKGFkZHJlc3MgaW5kZXhlZCBvcGVyYXRvciwgYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBpZCwgdWludDI1NiB2YWx1ZSk7CiAgICAgICAgICAgICAgICBmcm9tID0gdGhpcy53ZWIzLmV0aC5hYmkuZGVjb2RlUGFyYW1ldGVyKCdhZGRyZXNzJywgbG9nLnRvcGljc1syXSk7IC8vIGZyb20KCiAgICAgICAgICAgICAgICB0byA9IHRoaXMud2ViMy5ldGguYWJpLmRlY29kZVBhcmFtZXRlcignYWRkcmVzcycsIGxvZy50b3BpY3NbM10pOyAvLyB0bwoKICAgICAgICAgICAgICAgIHIgPSB0aGlzLndlYjMuZXRoLmFiaS5kZWNvZGVQYXJhbWV0ZXIoJyh1aW50MjU2LHVpbnQyNTYpJywgbG9nLmRhdGEpOwogICAgICAgICAgICAgICAgdG9rZW5JZCA9IHJbMF07CiAgICAgICAgICAgICAgICBxdWFudGl0eSA9IHJbMV07CiAgICAgICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSAyNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2V2ZW50IHR5cGUgaXMgbm90IGhhbmRsZWQuJyk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsb2cpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjEuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgICBibG9ja051bWJlciA9IGxvZy5ibG9ja051bWJlcjsKICAgICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzcyA9IGxvZy5hZGRyZXNzOyAvLyBjb250cmFjdAoKICAgICAgICAgICAgICAgIGlzTWludGVkID0gZnJvbSA9PSBaRVJPX0FERFJFU1MgPyB0cnVlIDogZmFsc2U7IC8vIHBhcnNlIHVuaW5kZXhlZCBwYXJhbWV0ZXIgIGh0dHBzOi8vbWVkaXVtLmNvbS9saW51bS1sYWJzL2V2ZXJ5dGhpbmcteW91LWV2ZXItd2FudGVkLXRvLWtub3ctYWJvdXQtZXZlbnRzLWFuZC1sb2dzLW9uLWV0aGVyZXVtLWZlYzg0ZWE3ZDBhNQogICAgICAgICAgICAgICAgLy8gY29uc3QgZGVjb2RlciA9IG5ldyBldGhlcnMudXRpbHMuQWJpQ29kZXIoKTsKICAgICAgICAgICAgICAgIC8vIGNvbnN0IHVuaW5kZXhlZEV2ZW50cyA9IGV2ZW50cy5pbnB1dHMuZmlsdGVyKGV2ZW50ID0+IGV2ZW50LmluZGV4ZWQgPT09IGZhbHNlKTsKICAgICAgICAgICAgICAgIC8vIGNvbnN0IGRlY29kZWRMb2dzID0gbG9ncy5tYXAobG9nID0+IGRlY29kZXIuZGVjb2RlKHVuaW5kZXhlZEV2ZW50cywgbG9nLmRhdGEpCgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjEuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyOiBibG9ja051bWJlciwKICAgICAgICAgICAgICAgICAgdHhIYXNoOiB0eEhhc2gsCiAgICAgICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogY29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICAgICAgICB0b2tlbklkOiBOdW1iZXIodG9rZW5JZCksCiAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiBOdW1iZXIocXVhbnRpdHkpLAogICAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLAogICAgICAgICAgICAgICAgICB0bzogdG8sCiAgICAgICAgICAgICAgICAgIGlzTWludGVkOiBpc01pbnRlZAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIxLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyMSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9leHRyYWN0VHJhbnNmZXJJbmZvKF94NDYpIHsKICAgICAgICByZXR1cm4gX2V4dHJhY3RUcmFuc2ZlckluZm8yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfZXh0cmFjdFRyYW5zZmVySW5mbzsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInNlbmRUcmFuc2FjdGlvbkFuZENvbmZpcm0iLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zZW5kVHJhbnNhY3Rpb25BbmRDb25maXJtID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjIoZnJvbSwgdG8sIF9jYWxsb2JqLCBfcGFyYW0sIGV2dFR5cGUsIGxvZykgewogICAgICAgIHZhciB0eCwgaXNDb25maXJtZWQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyMiQoX2NvbnRleHQyMikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIyLnByZXYgPSBfY29udGV4dDIyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvd0xldmVsU2VuZChmcm9tLCB0bywgX2NhbGxvYmosIF9wYXJhbSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHR4ID0gX2NvbnRleHQyMi5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghdHguc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjIubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDIyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbih0eC50cmFuc2FjdGlvbkhhc2gsIGV2dFR5cGUsIGxvZyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIGlzQ29uZmlybWVkID0gX2NvbnRleHQyMi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjIuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXR1czogaXNDb25maXJtZWQsCiAgICAgICAgICAgICAgICAgIHR4OiB0eAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMi5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgdHg6IHR4CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gc2VuZFRyYW5zYWN0aW9uQW5kQ29uZmlybShfeDQ3LCBfeDQ4LCBfeDQ5LCBfeDUwLCBfeDUxLCBfeDUyKSB7CiAgICAgICAgcmV0dXJuIF9zZW5kVHJhbnNhY3Rpb25BbmRDb25maXJtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzZW5kVHJhbnNhY3Rpb25BbmRDb25maXJtOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX2xvd0xldmVsU2VuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2xvd0xldmVsU2VuZDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMyhmcm9tLCB0bywgX2NhbGxvYmosIF9wYXJhbSkgewogICAgICAgIHZhciBkYXRhLCBnYXNQcmljZSwgZ2FzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjMkKF9jb250ZXh0MjMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMy5wcmV2ID0gX2NvbnRleHQyMy5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgZGF0YSA9IF9jYWxsb2JqLmVuY29kZUFCSSgpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyMy5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb21wdXRlR2FzUHJpY2UoKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgZ2FzUHJpY2UgPSBfY29udGV4dDIzLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDIzLnByZXYgPSA0OwogICAgICAgICAgICAgICAgX2NvbnRleHQyMy5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBfY2FsbG9iai5lc3RpbWF0ZUdhcyhfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSwKICAgICAgICAgICAgICAgICAgdG86IHRvCiAgICAgICAgICAgICAgICB9LCBfcGFyYW0pKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgZ2FzID0gX2NvbnRleHQyMy5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQyMy5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53ZWIzLmV0aC5zZW5kVHJhbnNhY3Rpb24oX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAgICAgICAgIGZyb206IGZyb20sCiAgICAgICAgICAgICAgICAgIHRvOiB0bywKICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgICAgICAgZ2FzOiBnYXMsCiAgICAgICAgICAgICAgICAgIGdhc1ByaWNlOiBnYXNQcmljZQogICAgICAgICAgICAgICAgfSwgX3BhcmFtKSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMy5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0MjMuc2VudCk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDIzLnByZXYgPSAxMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjMudDAgPSBfY29udGV4dDIzWyJjYXRjaCJdKDQpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGVycjogX2NvbnRleHQyMy50MAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyMywgdGhpcywgW1s0LCAxM11dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX2xvd0xldmVsU2VuZChfeDUzLCBfeDU0LCBfeDU1LCBfeDU2KSB7CiAgICAgICAgcmV0dXJuIF9sb3dMZXZlbFNlbmQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfbG93TGV2ZWxTZW5kOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX2xvd0xldmVsQ2FsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2xvd0xldmVsQ2FsbDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNChmcm9tLCB0bywgX2NhbGwpIHsKICAgICAgICB2YXIgZGF0YSwgcmV0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjQkKF9jb250ZXh0MjQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyNC5wcmV2ID0gX2NvbnRleHQyNC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgZGF0YSA9IF9jYWxsLmVuY29kZUFCSSgpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyNC5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gd2ViMy5ldGguY2FsbCh7CiAgICAgICAgICAgICAgICAgIGZyb206IGZyb20sCiAgICAgICAgICAgICAgICAgIHRvOiB0bywKICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHJldCA9IF9jb250ZXh0MjQuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI0LmFicnVwdCgicmV0dXJuIiwgdGhpcy53ZWIzLmV0aC5hYmkuZGVjb2RlUGFyYW1ldGVycyhfY2FsbC5fbWV0aG9kLm91dHB1dHMsIHJldClbMF0pOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDI0LnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQyNC50MCA9IF9jb250ZXh0MjRbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNC5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTI0LCB0aGlzLCBbWzEsIDhdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9sb3dMZXZlbENhbGwoX3g1NywgX3g1OCwgX3g1OSkgewogICAgICAgIHJldHVybiBfbG93TGV2ZWxDYWxsMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX2xvd0xldmVsQ2FsbDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9jb21wdXRlR2FzUHJpY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jb21wdXRlR2FzUHJpY2UyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjUoKSB7CiAgICAgICAgdmFyIG1lYW5HYXMsIHdlaVRvQWRkOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjUkKF9jb250ZXh0MjUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyNS5wcmV2ID0gX2NvbnRleHQyNS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyNS5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndlYjMuZXRoLmdldEdhc1ByaWNlKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIG1lYW5HYXMgPSBfY29udGV4dDI1LnNlbnQ7CiAgICAgICAgICAgICAgICB3ZWlUb0FkZCA9IFdlYjMudXRpbHMudG9CTih0aGlzLndlYjMudXRpbHMudG9XZWkodGhpcy5nYXNQcmljZUFkZGl0aW9uLCAnZ3dlaScpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI1LmFicnVwdCgicmV0dXJuIiwgV2ViMy51dGlscy50b0JOKG1lYW5HYXMpLmFkZCh3ZWlUb0FkZCkudG9TdHJpbmcoKSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTI1LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX2NvbXB1dGVHYXNQcmljZSgpIHsKICAgICAgICByZXR1cm4gX2NvbXB1dGVHYXNQcmljZTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9jb21wdXRlR2FzUHJpY2U7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfY29uZmlybVRyYW5zYWN0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY29uZmlybVRyYW5zYWN0aW9uMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI2KHRyYW5zYWN0aW9uSGFzaCwgZXZlbnQsIGRlc2NyaXB0aW9uLCB0ZXN0Rm9yU3VjY2VzcykgewogICAgICAgIHZhciB0cmFuc2FjdGlvbkV2ZW50RGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTI2JChfY29udGV4dDI2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjYucHJldiA9IF9jb250ZXh0MjYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uRXZlbnREYXRhID0gewogICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IHRyYW5zYWN0aW9uSGFzaCwKICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoInRyYW5zYWN0aW9uIHN0YXJ0ZWQgLSAiLmNvbmNhdChkZXNjcmlwdGlvbikpOwoKICAgICAgICAgICAgICAgIGlmICghKHRyYW5zYWN0aW9uSGFzaCA9PSBOVUxMX0JMT0NLX0hBU0gpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjYubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBUaGlzIHdhcyBhIHNtYXJ0IGNvbnRyYWN0IHdhbGxldCB0aGF0IGRvZXNuJ3Qga25vdyB0aGUgdHJhbnNhY3Rpb24KICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoKEV2ZW50VHlwZS5UcmFuc2FjdGlvbkNyZWF0ZWQsIHsKICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAodGVzdEZvclN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gV2FpdCBpZiB0ZXN0IG5vdCBpbXBsZW1lbnRlZAogICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoIlVua25vd24gYWN0aW9uLCB3YWl0aW5nIDEgbWludXRlOiAiLmNvbmNhdChkZXNjcmlwdGlvbikpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBkZWxheSg2MCAqIDEwMDApOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfY29udGV4dDI2Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wb2xsQ2FsbGJhY2tGb3JDb25maXJtYXRpb24oZXZlbnQsIGRlc2NyaXB0aW9uLCB0ZXN0Rm9yU3VjY2Vzcyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0MjYuc2VudCk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfY29udGV4dDI2LnByZXYgPSAxMjsKCiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwYXRjaChFdmVudFR5cGUuVHJhbnNhY3Rpb25DcmVhdGVkLCB0cmFuc2FjdGlvbkV2ZW50RGF0YSk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlybVRyYW5zYWN0aW9uKHRoaXMud2ViMywgdHJhbnNhY3Rpb25IYXNoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCJ0cmFuc2FjdGlvbiBzdWNjZWVkIC0gIi5jb25jYXQoZGVzY3JpcHRpb24pKTsKCiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwYXRjaChFdmVudFR5cGUuVHJhbnNhY3Rpb25Db25maXJtZWQsIHRyYW5zYWN0aW9uRXZlbnREYXRhKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNi5hYnJ1cHQoInJldHVybiIsIHRydWUpOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAgX2NvbnRleHQyNi5wcmV2ID0gMjE7CiAgICAgICAgICAgICAgICBfY29udGV4dDI2LnQwID0gX2NvbnRleHQyNlsiY2F0Y2giXSgxMik7CiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcigidHJhbnNhY3Rpb24gZmFpbGVkOiAtICIuY29uY2F0KGRlc2NyaXB0aW9uKSk7CgogICAgICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2goRXZlbnRUeXBlLlRyYW5zYWN0aW9uRmFpbGVkLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRyYW5zYWN0aW9uRXZlbnREYXRhKSwge30sIHsKICAgICAgICAgICAgICAgICAgZXJyb3I6IF9jb250ZXh0MjYudDAKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICB0aHJvdyBfY29udGV4dDI2LnQwOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjYsIHRoaXMsIFtbMTIsIDIxXV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfY29uZmlybVRyYW5zYWN0aW9uKF94NjAsIF94NjEsIF94NjIsIF94NjMpIHsKICAgICAgICByZXR1cm4gX2NvbmZpcm1UcmFuc2FjdGlvbjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9jb25maXJtVHJhbnNhY3Rpb247CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfcG9sbENhbGxiYWNrRm9yQ29uZmlybWF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcG9sbENhbGxiYWNrRm9yQ29uZmlybWF0aW9uMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI5KGV2ZW50LCBkZXNjcmlwdGlvbiwgdGVzdEZvclN1Y2Nlc3MpIHsKICAgICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyOSQoX2NvbnRleHQyOSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDI5LnByZXYgPSBfY29udGV4dDI5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyOS5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgX3JlZjggPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyOChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbFJldHJpZXMsIHRlc3RSZXNvbHZlOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjgkKF9jb250ZXh0MjgpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyOC5wcmV2ID0gX2NvbnRleHQyOC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFJldHJpZXMgPSA2MDsgLy8gY29uc3QgdGVzdFJlc29sdmU6IChyOiBudW1iZXIpID0+IFByb21pc2U8dm9pZD4gPSBhc3luYyByZXRyaWVzID0+IHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCB0ZXN0UmVzb2x2ZTogKHI6IG51bWJlcikgPT4gUHJvbWlzZTx2b2lkPiA9IGFzeW5jIHJldHJpZXMgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFJlc29sdmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNyhyZXRyaWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdhc1N1Y2Nlc3NmdWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyNyQoX2NvbnRleHQyNykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDI3LnByZXYgPSBfY29udGV4dDI3Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDI3Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RGb3JTdWNjZXNzKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhc1N1Y2Nlc3NmdWwgPSBfY29udGV4dDI3LnNlbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXNTdWNjZXNzZnVsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjcubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5sb2dnZXIoIlRyYW5zYWN0aW9uIHN1Y2NlZWRlZDogIi5jb25jYXQoZGVzY3JpcHRpb24pKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuX2Rpc3BhdGNoKEV2ZW50VHlwZS5UcmFuc2FjdGlvbkNvbmZpcm1lZCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI3LmFicnVwdCgicmV0dXJuIiwgcmVzb2x2ZSh0cnVlKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJldHJpZXMgPD0gMCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyNy5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI3LmFicnVwdCgicmV0dXJuIiwgcmVqZWN0KGZhbHNlKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0cmllcyAlIDEwID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmxvZ2dlcigiVGVzdGVkIHRyYW5zYWN0aW9uICIuY29uY2F0KGluaXRpYWxSZXRyaWVzIC0gcmV0cmllcyArIDEsICIgdGltZXM6ICIpLmNvbmNhdChkZXNjcmlwdGlvbikpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjcubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlbGF5KDUwMDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjcuYWJydXB0KCJyZXR1cm4iLCB0ZXN0UmVzb2x2ZShyZXRyaWVzIC0gMSkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNy5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMjcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGVzdFJlc29sdmUoX3g2OSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmOS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI4LmFicnVwdCgicmV0dXJuIiwgdGVzdFJlc29sdmUoaW5pdGlhbFJldHJpZXMpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyOC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMjgpOwogICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94NjcsIF94NjgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZjguYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSkpOwoKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyOSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9wb2xsQ2FsbGJhY2tGb3JDb25maXJtYXRpb24oX3g2NCwgX3g2NSwgX3g2NikgewogICAgICAgIHJldHVybiBfcG9sbENhbGxiYWNrRm9yQ29uZmlybWF0aW9uMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX3BvbGxDYWxsYmFja0ZvckNvbmZpcm1hdGlvbjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9kaXNwYXRjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rpc3BhdGNoKGV2ZW50LCBkYXRhKSB7CiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChldmVudCwgZGF0YSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX21ha2VDb250cmFjdEluc3RhbmNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFrZUNvbnRyYWN0SW5zdGFuY2UoY29udHJhY3RBYmkpIHsKICAgICAgdmFyIGNvbnRyYWN0QWRkcmVzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDsKICAgICAgcmV0dXJuIG1ha2VDb250cmFjdEluc3RhbmNlKHRoaXMud2ViMywgdGhpcy5uZXRJZCwgY29udHJhY3RBYmksIGNvbnRyYWN0QWRkcmVzcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2VuY0Fzc2V0RGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2VuY0Fzc2V0RGF0YSh0eXBlTVYsIGNvbnRyYWN0QWRkcmVzcywgdmFsdWUpIHsKICAgICAgdmFyIGFzc2V0RGF0YTsKCiAgICAgIGlmICh0eXBlTVYgPT0gRVRIKSB7CiAgICAgICAgLy8gYXNzZXREYXRhID0gIjB4IiAvL1pFUk9fQUREUkVTUwogICAgICAgIGFzc2V0RGF0YSA9IGVuYyh0aGlzLndlYjMsIFpFUk9fQUREUkVTUyk7CiAgICAgIH0gZWxzZSBpZiAodHlwZU1WID09IEVSQzIwKSB7CiAgICAgICAgYXNzZXREYXRhID0gZW5jKHRoaXMud2ViMywgY29udHJhY3RBZGRyZXNzKTsKICAgICAgfSBlbHNlIGlmICh0eXBlTVYgPT0gRVJDNzIxIHx8IHR5cGVNViA9PSBFUkMxMTU1KSB7CiAgICAgICAgYXNzZXREYXRhID0gZW5jKHRoaXMud2ViMywgY29udHJhY3RBZGRyZXNzLCB2YWx1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS50cmFjZSgpOwogICAgICAgIHRocm93ICJ1bmtub3duIHR5cGUgbWFnaWMtdmFsdWUgKCIuY29uY2F0KHR5cGVNViwgIikiKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFzc2V0RGF0YTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfdmVyaWZ5UGFyYW1BZGRyZXNzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfdmVyaWZ5UGFyYW1BZGRyZXNzKGFkZHJlc3Nlc1RvVmVyaWZ5KSB7CiAgICAgIGFkZHJlc3Nlc1RvVmVyaWZ5LmZvckVhY2goZnVuY3Rpb24gKG9uZSkgewogICAgICAgIGlmIChvbmUgPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7CiAgICAgICAgICB0aHJvdyAiQWRkcmVzcyAndW5kZWZpbmVkJyBwYXNzZWQiOwogICAgICAgIH0KCiAgICAgICAgaWYgKG9uZS5sZW5ndGggIT0gNDIpIHsKICAgICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgICAgIHRocm93ICJBZGRyZXNzIGxlbmd0aCBpbmNvcnJlY3QgOiIuY29uY2F0KG9uZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfdmVyaWZ5UGFyYW1UeXBlTVYiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF92ZXJpZnlQYXJhbVR5cGVNVih0eXBlc1RvVnJpZnkpIHsKICAgICAgdHlwZXNUb1ZyaWZ5LmZvckVhY2goZnVuY3Rpb24gKG9uZSkgewogICAgICAgIGlmIChvbmUgPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7CiAgICAgICAgICB0aHJvdyAidHlwZU1WICd1bmRlZmluZWQnIHBhc3NlZCI7CiAgICAgICAgfQoKICAgICAgICBpZiAob25lLmxlbmd0aCAhPSAxMCkgewogICAgICAgICAgY29uc29sZS50cmFjZSgpOwogICAgICAgICAgdGhyb3cgInR5cGVNViBsZW5ndGggaW5jb3JyZWN0IDogIi5jb25jYXQob25lKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIl92ZXJpZnlQYXJhbVVpbnROdW1iZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF92ZXJpZnlQYXJhbVVpbnROdW1iZXIodmFsdWVzVG9WZXJpZnkpIHsKICAgICAgdmFsdWVzVG9WZXJpZnkuZm9yRWFjaChmdW5jdGlvbiAob25lKSB7CiAgICAgICAgaWYgKG9uZSA9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgICAgIHRocm93ICJ2YWx1ZSAndW5kZWZpbmVkJyBwYXNzZWQiOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVvZiBvbmUgIT0gJ251bWJlcicpIHsKICAgICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgICAgIHRocm93ICJ2YWx1ZSBpcyBub3QgJ251bWJlcicgdHlwZSAiLmNvbmNhdChfdHlwZW9mKG9uZSkpOwogICAgICAgIH0KCiAgICAgICAgaWYgKE51bWJlcihvbmUudG9GaXhlZCgpKSAhPSBvbmUpIHsKICAgICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgICAgIHRocm93ICJ2YWx1ZSBpcyBub3QgaW50ZWdlciI7CiAgICAgICAgfQoKICAgICAgICBpZiAob25lIDwgMCkgewogICAgICAgICAgY29uc29sZS50cmFjZSgpOwogICAgICAgICAgdGhyb3cgInZhbHVlIGluY29ycmVjdCAiLmNvbmNhdChvbmUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3ZlcmlmeVBhcmFtVHlwZVBhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF92ZXJpZnlQYXJhbVR5cGVQYXJ0KHBhcnRzVG9WZXJpZnkpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICAvLyB0eXBlUGFydCBpcyBzdHJ1Y3QgZGVmaW5lZCBpbiBMaWJwYXJ0LnNvbCwgJ0xpYnBhcnQuUGFydFtdJwogICAgICBwYXJ0c1RvVmVyaWZ5LmZvckVhY2goZnVuY3Rpb24gKHBhcnRUb1ZlcmlmeSkgewogICAgICAgIHBhcnRUb1ZlcmlmeS5mb3JFYWNoKGZ1bmN0aW9uIChvbmUpIHsKICAgICAgICAgIGlmIChvbmUgPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgICAgICAgdGhyb3cgInZhbHVlICd1bmRlZmluZWQnIHBhc3NlZCI7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG9uZS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHZhciBhY2NvdW50ID0gb25lWzBdOwogICAgICAgICAgICB2YXIgdmFsdWUgPSBvbmVbMV07CgogICAgICAgICAgICBfdGhpczMuX3ZlcmlmeVBhcmFtQWRkcmVzcyhbYWNjb3VudF0pOwoKICAgICAgICAgICAgX3RoaXMzLl92ZXJpZnlQYXJhbVVpbnROdW1iZXIoW3ZhbHVlXSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIl92ZXJpZnlQYXJhbUFzc2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfdmVyaWZ5UGFyYW1Bc3NldChhc3NldHNUb1ZlcmlmeSkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIGFzc2V0c1RvVmVyaWZ5LmZvckVhY2goZnVuY3Rpb24gKG9uZSkgewogICAgICAgIGlmIChvbmUgPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7CiAgICAgICAgICB0aHJvdyAiYXNzZXQgJ3VuZGVmaW5lZCcgcGFzc2VkIjsKICAgICAgICB9CgogICAgICAgIHZhciBhc3NldFR5cGUgPSBvbmUuYXNzZXRUeXBlLAogICAgICAgICAgICB2YWx1ZSA9IG9uZS52YWx1ZTsKCiAgICAgICAgaWYgKGFzc2V0VHlwZSA9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgICAgIHRocm93ICJhc3NldFR5cGUgJ3VuZGVmaW5lZCcgcGFzc2VkIjsKICAgICAgICB9CgogICAgICAgIF90aGlzNC5fdmVyaWZ5UGFyYW1VaW50TnVtYmVyKFt2YWx1ZV0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfY2hlY2tEaWZmQXNzZXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY2hlY2tEaWZmQXNzZXRzKGFzc2V0MSwgYXNzZXQyKSB7CiAgICAgIGlmIChhc3NldDEudmFsdWUgIT0gYXNzZXQyLnZhbHVlIHx8IGFzc2V0MS5hc3NldFR5cGUuYXNzZXRDbGFzcyAhPSBhc3NldDIuYXNzZXRUeXBlLmFzc2V0Q2xhc3MgfHwgYXNzZXQxLmFzc2V0VHlwZS5kYXRhICE9IGFzc2V0Mi5hc3NldFR5cGUuZGF0YSkgewogICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgICB0aHJvdyAiYXNzZXQgbm90IG1hdGNoZWQiOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidG9CTiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9CTihudW1iZXIpIHsKICAgICAgcmV0dXJuIG5ldyB0aGlzLndlYjMudXRpbHMuQk4obnVtYmVyKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQYXJ1bGE7Cn0oKTsgLy8gZXhwb3J0IGRlZmF1bHQgUGFydWxhOwoKCm1vZHVsZS5leHBvcnRzID0gewogIFBhcnVsYTogUGFydWxhCn07"},{"version":3,"sources":["/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/src/parula-js/src/parula.js"],"names":["require","EventEmitter","Web3","makeContractInstance","confirmTransaction","createTypedDataAndSignature","recoverTypedSignature","enc","decAsset","encDataV1","ParulaAPI","NULL_BLOCK_HASH","ZERO_ADDRESS","ORDER_DATA_V1","ERC20","ERC721","ERC1155","ETH","Network","EventType","Order","Asset","NFTContract","NFT1155Contract","Exchange","RoyaltiesRegistry","IERC20","IERC165","IERC1155","config","Parula","provider","apiConfig","logger","Object","keys","Number","chainId","networkName","netId","nftAddress","nft1155Address","exchangeAddress","royaltiesAddress","royaltiesRegistryAddress","transferProxyAddress","erc20TransferProxyAddress","neededProperties","forEach","propName","undefined","web3","web3ReadOnly","readonlyProviderUrl","gasPriceAddition","utils","BN","api","arg","_emitter","signer","owner","erc721metadataURL","royalties","_verifyParamAddress","to","nft_contract","_makeContractInstance","royalty","is_valid_address","isAddress","_val","isNaN","length","_verifyParamTypePart","_callobj","methods","mintItemWithRoyalty","mintItem","from","_param","sendTransactionAndConfirm","TransactionCreated","ret","status","_extractTransferInfo","tx","transactionHash","id","quantity","_verifyParamUintNumber","maker","maTypeMV","maContractAddress","maValue","taker","taTypeMV","taContractAddress","taValue","salt","Date","now","startDatetime","endDatetime","_verifyParamTypeMV","getTokenOwnerOf","realOwner","toUpperCase","err","getBalanceOf","balanceOf","originFees","payouts","encData","maEncData","_encAssetData","taEncData","_makeOrderAndApprove","sellOrderId","start","end","getSellOrder","sellOrder","assetData","makeAsset","_checkDiffAssets","order","takeAsset","retBuyOrder","value","_matchOrders","signature","retMatch","taPriceBegin","taPriceEnd","isTimeLimited","priceMinHidden","retOrderData","createSellOrder","console","error","auctionId","getAuctionOrder","auctionOrder","immediate_buyable","order_maker_asset","order_maker","bidId","getBidOrder","bidOrder","retBidMatchOrder","taAssetData","offerId","getOfferOrder","offerOrder","retAcceptOrder","exchange","cancel","CancelOrder","res","account","contractAddress","tokenId","eth","getBalance","classify","contractClass","instance","call","tokenCont","ownerOf","erc721ID","erc1155ID","contract","supportsInterface","is721","contract2","totalSupply","r","is1155","nftContract","getRoyaltyOwner","rOwner","log","royaltiesRegistry","getRoyaltiesOwner","getRoyalties","ownerNew","toLowerCase","ownerBefore","transferRoyaltyOwnership","TransferRoyaltiesOwnership","transferRoyaltiesOwnership","royaltiesNew","tokenOwner","JSON","stringify","_royaltiesBefore","nftCont","updateRoyalty","UpdateRoyalties","royaltiesBefore","setRoyaltiesByTokenAndTokenId","leftOrder","leftSignature","rightOrder","rightSignature","matchOrders","MatchOrders","asset_type","contract_address","approve_amount","transfer_proxy","ierc20","allowance","data","abi","encodeFunctionSignature","_symbol","symbol","decodeParameter","approve","ApproveCurrency","ierc","isApprovedForAll","isApproved","setApprovalForAll","ApproveOrder","makerAsset","takerAsset","dataType","_verifyParamAsset","_signed_data_and_sign","sig","typeMV","_approveTransferProxy","txHash","getTransactionReceipt","receipt","logs","sigTransfer721","sigTransfer1155","sigEvt","topics","blockNumber","address","isMinted","evtType","_lowLevelSend","_confirmTransaction","isConfirmed","encodeABI","_computeGasPrice","gasPrice","estimateGas","gas","sendTransaction","_call","decodeParameters","_method","outputs","getGasPrice","meanGas","weiToAdd","toBN","toWei","add","toString","event","description","testForSuccess","transactionEventData","_dispatch","delay","_pollCallbackForConfirmation","TransactionConfirmed","TransactionFailed","Promise","resolve","reject","initialRetries","testResolve","retries","wasSuccessful","emit","contractAbi","trace","addressesToVerify","one","typesToVrify","valuesToVerify","toFixed","partsToVerify","partToVerify","assetsToVerify","assetType","asset1","asset2","assetClass","number","module","exports"],"mappings":"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","sourcesContent":["const { EventEmitter } = require(\"fbemitter\")\r\nconst Web3 = require(\"web3\")\r\n\r\nconst { \r\n    makeContractInstance,\r\n    confirmTransaction,\r\n    createTypedDataAndSignature, recoverTypedSignature,\r\n    enc, decAsset, encDataV1,\r\n} = require(\"./utils/utils.js\")\r\n\r\nconst { ParulaAPI } = require('./api')\r\nconst {\r\n    NULL_BLOCK_HASH, ZERO_ADDRESS,\r\n    ORDER_DATA_V1, ERC20, ERC721, ERC1155, ETH\r\n} = require(\"./constants\")\r\nconst {\r\n    Network, EventType, Order, Asset\r\n} = require(\"./types\")\r\n\r\nconst { \r\n    NFTContract, NFT1155Contract, Exchange, RoyaltiesRegistry, IERC20, IERC165, IERC1155\r\n} = require(\"./contracts\")\r\n\r\n\r\nconst { config } = require(\"../configs/rinkeby\")  // defaultConfig\r\n\r\n\r\nclass Parula {\r\n    constructor(provider, apiConfig={}, logger){\r\n        // apiConfig.gasPrice = apiConfig.gasPrice || makeBigNumber(300000)\r\n\r\n        if (Object.keys(apiConfig)==0){\r\n            apiConfig = config\r\n        }\r\n        if(Number(provider.chainId) != apiConfig.chainId){\r\n            throw \"parula-js.constructor:: provider.chain_id != config.chain_id\"\r\n        }\r\n        this.networkName = apiConfig.networkName\r\n\r\n        this.netId = apiConfig.netId\r\n\r\n        this.nftAddress = apiConfig.nftAddress\r\n        this.nft1155Address = apiConfig.nft1155Address\r\n        this.exchangeAddress = apiConfig.exchangeAddress\r\n        this.royaltiesAddress = apiConfig.royaltiesRegistryAddress\r\n        this.transferProxyAddress = apiConfig.transferProxyAddress\r\n        this.erc20TransferProxyAddress = apiConfig.erc20TransferProxyAddress\r\n\r\n        var neededProperties = [\r\n            'nftAddress', 'nft1155Address', 'netId', 'networkName', 'readonlyProviderUrl',\r\n            'exchangeAddress', 'royaltiesRegistryAddress', 'transferProxyAddress', 'erc20TransferProxyAddress',\r\n        ]\r\n        neededProperties.forEach(propName=>{\r\n            if (apiConfig[propName]==undefined){\r\n                throw `Configuration needed '${propName}' is not defined`\r\n            }\r\n        })\r\n\r\n        // Web3 Config\r\n        this.web3 = new Web3(provider)\r\n        this.web3ReadOnly = new Web3(apiConfig.readonlyProviderUrl)\r\n        this.gasPriceAddition = new Web3.utils.BN(1)\r\n\r\n        apiConfig.web3 = this.web3ReadOnly\r\n        this.api = new ParulaAPI(apiConfig, logger)\r\n\r\n        this.logger = logger || (function (arg) { return arg; })\r\n        this._emitter = new EventEmitter()\r\n    }\r\n\r\n    async createArtwork(signer, owner='', erc721metadataURL='', royalties=[]){\r\n        this._verifyParamAddress([signer])\r\n        if(owner){\r\n            this._verifyParamAddress([owner])\r\n        }else{\r\n            owner = signer   \r\n        }\r\n\r\n        var to = this.nftAddress\r\n        var nft_contract = this._makeContractInstance(NFTContract, this.nftAddress)\r\n        let _callobj\r\n\r\n        // check royalties valid\r\n        royalties.forEach( (royalty) => {\r\n            // check royalty account\r\n            var is_valid_address = this.web3.utils.isAddress(royalty[0])\r\n            if(!is_valid_address){\r\n                throw `fail to mint with royalty, invalid address: ${royalty[0]}`\r\n            }\r\n            // check royalty value\r\n            var _val = Number(royalty[1])\r\n            if(isNaN(_val) || _val < 1 || _val > 500){ // 1~500\r\n                throw `fail to mint with royalty, invalid value: ${royalty[1]}`\r\n            }\r\n        })\r\n\r\n        if(royalties.length > 0){\r\n            this._verifyParamTypePart([royalties])\r\n            _callobj = nft_contract.methods.mintItemWithRoyalty(owner, erc721metadataURL, owner, royalties) // royaltyOwner, royalties\r\n        }else{\r\n            _callobj = nft_contract.methods.mintItem(owner, erc721metadataURL)\r\n        }\r\n\r\n        const from = signer        \r\n        const _param = {}\r\n\r\n        const ret = await this.sendTransactionAndConfirm(\r\n            from, to, _callobj, _param, EventType.TransactionCreated, \"Create NFT\")\r\n\r\n        if (ret.status){\r\n            return await this._extractTransferInfo(ret.tx.transactionHash)\r\n        }\r\n    }\r\n\r\n    async createArtwork1155(signer, owner='', erc721metadataURL='', id=0, quantity=1, royalties=[]){\r\n        this._verifyParamAddress([signer])\r\n        if(owner){\r\n            this._verifyParamAddress([owner])\r\n        }else{\r\n            owner = signer\r\n        }\r\n        this._verifyParamUintNumber([id, quantity])\r\n\r\n        var to = this.nft1155Address\r\n        var nft_contract = this._makeContractInstance(NFT1155Contract, this.nft1155Address)\r\n        let _callobj\r\n        if(royalties.length>0){\r\n            this._verifyParamTypePart([royalties])\r\n            _callobj = nft_contract.methods.mintItemWithRoyalty(owner, id, quantity, [], owner, royalties) //, royaltyOwner, royalties\r\n        }else{\r\n            _callobj = nft_contract.methods.mintItem(owner, id, quantity, [])\r\n        }\r\n\r\n        const from = signer        \r\n        const _param = {}\r\n\r\n        const ret = await this.sendTransactionAndConfirm(\r\n            from, to, _callobj, _param, EventType.TransactionCreated, \"Create NFT\")\r\n\r\n        if (ret.status){\r\n            return await this._extractTransferInfo(ret.tx.transactionHash)\r\n        }\r\n    }\r\n\r\n    async createSellOrder({\r\n        maker,              // order maker address               web3.eth.abi.encodeParameters([\"address\", \"uint256\"], [token, tokenId]);\r\n        maTypeMV,           // makerAsset,  // ma, Asset(ERC721, enc(erc721.address, erc721TokenId1), 1),\r\n        maContractAddress,  // contract\r\n        maValue,            // tokenId when erc721, 1155\r\n        quantity=1,\r\n\r\n        taker=ZERO_ADDRESS, // order taker address, can be ZERO\r\n        taTypeMV,           // takerAsset,  // ta, Asset(ETH, \"0x\", 200), ERC20\r\n        taContractAddress,\r\n        taValue,            // or Value?\r\n\r\n        salt=Date.now(),    // when regist order to orderbook salt is some-uint-value, else salt is 0\r\n                            //   in ExchangeV2Core, same hashed order occur error\r\n        startDatetime=0,      // Date()\r\n        endDatetime=0,        // Date()\r\n    }){\r\n        if(taTypeMV == ETH){\r\n            this._verifyParamAddress([maker, maContractAddress, taker]) // eth는 contractAddress 없음\r\n        }else{\r\n            this._verifyParamAddress([maker, maContractAddress, taker, taContractAddress])\r\n        }\r\n        this._verifyParamTypeMV([maTypeMV, taTypeMV])\r\n        this._verifyParamUintNumber([maValue, taValue])\r\n\r\n        if(maTypeMV == ERC721){\r\n            var realOwner = await this.getTokenOwnerOf(maContractAddress, maValue)\r\n            if(realOwner.toUpperCase() != maker.toUpperCase()){\r\n                return {status: false, err: `Orderer(${maker}) is not the token owner(${realOwner})`}\r\n            }\r\n        }else if(maTypeMV == ERC1155){\r\n            var balanceOf = await this.getBalanceOf(maker, maContractAddress, maValue) // maValue is tokenId\r\n            if(balanceOf<quantity){\r\n                return {status: false, err: `Orderer(${maker})'s balance is not enough. `}\r\n            }\r\n        }else{\r\n            return {status: false, err: `Unsupported asset type: ${maTypeMV}`}\r\n        }\r\n        \r\n\r\n        const originFees = []            // originFees 가 원천징수 느낌인가보다\r\n        const payouts = [[maker, 10000]] // 100% of takeAsset to orderMaker\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n        // TODO: check start and end date \r\n        //   var date = new Date()\r\n        //   date.valueOf() // 1622683295328\r\n        //   new Date(1622683295328) // 2021-06-03T01:21:35.328Z\r\n\r\n        var maEncData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var taEncData = this._encAssetData(taTypeMV, taContractAddress, taValue)\r\n        // order struct\r\n        const ret = await this._makeOrderAndApprove(\r\n            maker, \r\n            Asset(maTypeMV, maEncData, quantity), // 721이면 value 1, 1155면 1 이상\r\n            taker, \r\n            Asset(taTypeMV, taEncData, taValue),    // takerAsset,\r\n            salt, \r\n            startDatetime, \r\n            endDatetime, \r\n            ORDER_DATA_V1, \r\n            encData\r\n        );\r\n\r\n        // TODO: api.putSellOrder\r\n        return ret // ,orderId,\r\n    }\r\n\r\n    // 누가 판다고 내놓은 거 산다는 오더&매치\r\n    async createBuyOrderAndMatch({\r\n        maker,              // order maker address   \r\n        maTypeMV,           // takerAsset,  // ta, Asset(ETH, \"0x\", 200), ERC20\r\n        maContractAddress,  // contract\r\n        maValue,\r\n\r\n        sellOrderId,    // off-chain registered, 아니면 order_id만 받고, getOrder로 가져와? 그게 성능상 좋겠구만\r\n\r\n        salt=0,       // when regist order to orderbook salt is 1, else salt is 0\r\n        start=0,      // Date()\r\n        end=0,        // Date()\r\n    }){\r\n        if(maTypeMV==ETH){\r\n            this._verifyParamAddress([maker])\r\n        }else{\r\n            this._verifyParamAddress([maker, maContractAddress])\r\n        }\r\n        this._verifyParamTypeMV([maTypeMV])\r\n        this._verifyParamUintNumber([maValue, sellOrderId])\r\n\r\n        let err = ''\r\n        const originFees = []\r\n        const payouts = [[maker, 10000]] // 100% of takeAsset to orderMaker\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n\r\n        // api.get sell order\r\n        const sellOrder = await this.api.getSellOrder({id:sellOrderId}) // 구현 필요, 디테일한 사용법도 필요\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var makeAsset = Asset(maTypeMV, assetData, maValue)\r\n        this._checkDiffAssets(makeAsset, sellOrder.order.takeAsset)\r\n\r\n        // order struct\r\n        var retBuyOrder = await this._makeOrderAndApprove(\r\n            maker, \r\n            makeAsset,\r\n            sellOrder.order.maker, \r\n            sellOrder.order.makeAsset, // 보자보자 \r\n            salt, \r\n            start, \r\n            end, \r\n            ORDER_DATA_V1, \r\n            encData\r\n        );\r\n\r\n        let value = maTypeMV==ETH? maValue:0 // if eth value need, in wei\r\n\r\n        // need put buy-order?\r\n        var retMatch = await this._matchOrders(\r\n            sellOrder.order, sellOrder.signature, retBuyOrder.order, retBuyOrder.signature,\r\n            maker, value\r\n            )\r\n\r\n        return {status:retMatch.status, err:''}\r\n    }\r\n\r\n    ////////////////////////\r\n    //// bid에 매칭은 어떻게?\r\n    ////////////////////////\r\n    // auction 등록 -> 입찰(buyOrder) -> 낙찰(sellOrder -> matchOrders)\r\n    //\r\n    // 1. auction 등록하기\r\n    //   - 상품\r\n    //   - asset\r\n    //     - 시작가\r\n    //   - 시작일시\r\n    //   - 종료일시\r\n    //   - \r\n    // 2. listing auction\r\n    //   auction item은 [bid] 버튼 표시\r\n    //   실시간 종료까지 남은 시간 표시\r\n    //   정렬 (ebay참고: https://www.ebay.com/b/Toys-Hobbies/220/bn_1865497?LH_Auction=1&rt=nc&_sop=5)\r\n    //     best match\r\n    //     time: endding soonest\r\n    //     time: newly listed\r\n    //     price + shipping: lowest first\r\n    //     price + shipping: highest first\r\n    //     number of bids: fewest first\r\n    //     number of bids: most first\r\n    // 3. bidding\r\n    // 4. 낙찰(matchingOrder)\r\n\r\n    // 경매 내 놓는 오더\r\n    async createAuction({\r\n        startDatetime,\r\n        endDatetime,\r\n        maker,\r\n        maTypeMV, maContractAddress, maValue,\r\n        quantity=1,\r\n\r\n        taker=ZERO_ADDRESS,\r\n        taTypeMV, taContractAddress, taPriceBegin,\r\n\r\n        taPriceEnd=0, // 즉시구매가\r\n        isTimeLimited=true,\r\n        priceMinHidden=-1,\r\n    }){\r\n        this._verifyParamAddress([maker, maContractAddress, taker])\r\n        this._verifyParamTypeMV([maTypeMV, taTypeMV])\r\n        this._verifyParamUintNumber([maValue, quantity, startDatetime, endDatetime, taPriceBegin, taPriceBegin])\r\n\r\n        if(maTypeMV == ERC721){\r\n            var realOwner = await this.getTokenOwnerOf(maContractAddress, maValue)\r\n            if(realOwner.toUpperCase() != maker.toUpperCase()){\r\n                return {status: false, err: `Orderer(${maker}) is not the token owner(${realOwner})`}\r\n            }\r\n        }else if(maTypeMV == ERC1155){\r\n            var balanceOf = await this.getBalanceOf(maker, maContractAddress, maValue) // maValue is tokenId\r\n            if(balanceOf<quantity){\r\n                return {status: false, err: `Orderer(${maker})'s balance is not enough. `}\r\n            }\r\n        }else{\r\n            return {status: false, err: `Unsupported asset type: ${maTypeMV}`}\r\n        }\r\n\r\n        let retOrderData = null\r\n        let err = ''\r\n\r\n        if (taPriceEnd != 0){ // 즉시구매 시 사용될 sellOrder\r\n            retOrderData = await this.createSellOrder({\r\n                maker, maTypeMV, maContractAddress, maValue,\r\n                taker, taTypeMV, taContractAddress, taValue:taPriceEnd, quantity,\r\n                start:startDatetime, end:endDatetime\r\n            })\r\n    \r\n            if (!retOrderData.status){\r\n                console.error(retOrderData.err)\r\n                err = `err: ${retOrderData.err}`\r\n            }\r\n            // console.log(retOrderData.data, retOrderData.signature)\r\n        }\r\n        // 즉구 order, signature 만들었고,\r\n        //   즉구 order DB 테이블: market_order\r\n\r\n        // 테이블 따로 필요 없지?\r\n\r\n        // 경매 취소 가능한가? || 입찰 없으면 가능, 입찰 있으면 불가능\r\n        return {...retOrderData, err}\r\n    }\r\n\r\n    async createBidOrder({\r\n        maker, // bidder\r\n        maTypeMV, maContractAddress, maValue,\r\n\r\n        // taker, // auction owner\r\n        // taTypeMV, taContractAddress, taValue,\r\n\r\n        auctionId\r\n    }){\r\n        if(maTypeMV==ETH){\r\n            return {status:false, err: \"Can't use ETH for bid-order\"}\r\n        }\r\n        this._verifyParamAddress([maker, maContractAddress])\r\n        this._verifyParamTypeMV([maTypeMV])\r\n        this._verifyParamUintNumber([maValue, auctionId])\r\n\r\n        const originFees = []\r\n        const payouts = [[maker, 10000]] // 100% of takeAsset to orderMaker\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n\r\n        var auctionOrder = await this.api.getAuctionOrder({id:auctionId})\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var makeAsset = Asset(maTypeMV, assetData, maValue)\r\n\r\n        let order_maker;\r\n        let order_maker_asset;\r\n        if(!auctionOrder.immediate_buyable){\r\n            order_maker_asset = auctionOrder.order.makeAsset\r\n            order_maker = auctionOrder.order.maker\r\n        }else{\r\n            order_maker = auctionOrder.order.maker\r\n            order_maker_asset = auctionOrder.order.makeAsset\r\n        }\r\n\r\n        // this._checkDiffAssets(makeAsset, auctionOrder.order.takeAsset)\r\n        // order struct\r\n        const ret = await this._makeOrderAndApprove(\r\n            maker, \r\n            makeAsset,\r\n            order_maker, \r\n            order_maker_asset,\r\n            1, 0, 0, \r\n            ORDER_DATA_V1, \r\n            encData\r\n        );\r\n\r\n        return ret\r\n    }\r\n\r\n    async createBidMatch({\r\n        maker, \r\n        maTypeMV, maContractAddress, maValue, quantity=1,\r\n\r\n        bidId,    // off-chain registered id in DB\r\n    }){\r\n        this._verifyParamAddress([maker, maContractAddress])\r\n        this._verifyParamTypeMV([maTypeMV])\r\n        this._verifyParamUintNumber([maValue, bidId, quantity])\r\n\r\n        const originFees = []\r\n        const payouts = [[maker, 10000]]\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n\r\n        var bidOrder = await this.api.getBidOrder({id:bidId})\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var makeAsset = Asset(maTypeMV, assetData, quantity)\r\n        this._checkDiffAssets(makeAsset, bidOrder.order.takeAsset)\r\n\r\n        const retBidMatchOrder = await this._makeOrderAndApprove(\r\n            maker,\r\n            makeAsset,\r\n            bidOrder.order.maker,\r\n            bidOrder.order.makeAsset,\r\n            0, 0, 0, \r\n            ORDER_DATA_V1, encData\r\n        )\r\n        // TODO: match\r\n        var ret = await this._matchOrders(\r\n            retBidMatchOrder.order, retBidMatchOrder.signature, bidOrder.order, bidOrder.signature,\r\n            maker\r\n        )\r\n        return ret\r\n    }\r\n\r\n    // 나한테 팔라고 하는 제안 오더\r\n    async createOfferOrder({\r\n        maker, // offerer\r\n        maTypeMV, maContractAddress, maValue,\r\n\r\n        taker, // offeree\r\n        taTypeMV, taContractAddress, taValue, quantity=1,\r\n        salt = Date.now()  //   in ExchangeV2Core, same hashed order occur error\r\n    }){\r\n        if(maTypeMV==ETH){\r\n            return {status:false, err: \"Can't use ETH for offer-order\"}\r\n        }\r\n        this._verifyParamAddress([maker, maContractAddress, taker, taContractAddress])\r\n        this._verifyParamTypeMV([maTypeMV, taTypeMV])\r\n        this._verifyParamUintNumber([maValue, taValue, quantity, salt])\r\n\r\n        const originFees = []\r\n        const payouts = [[maker, 10000]] // 100% of takeAsset to orderMaker\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var taAssetData = this._encAssetData(taTypeMV, taContractAddress, taValue)\r\n        // order struct\r\n        const ret = await this._makeOrderAndApprove(\r\n            maker, \r\n            Asset(maTypeMV, assetData, maValue),\r\n            taker, \r\n            Asset(taTypeMV, taAssetData, quantity), // target must be NFT?\r\n            salt, \r\n            0, \r\n            0, \r\n            ORDER_DATA_V1, \r\n            encData\r\n        );\r\n\r\n        return ret\r\n    }\r\n\r\n    // // offer를 수락하는 오더\r\n    async createAcceptOrderAndMatch({\r\n        maker, \r\n        maTypeMV, maContractAddress, maValue, quantity=1,\r\n\r\n        offerId,    // off-chain registered, 아니면 order_id만 받고, getOrder로 가져와? 그게 성능상 좋겠구만\r\n    }){\r\n        this._verifyParamAddress([maker, maContractAddress])\r\n        this._verifyParamTypeMV([maTypeMV])\r\n        this._verifyParamUintNumber([maValue, offerId, quantity])\r\n\r\n        const originFees = []\r\n        const payouts = [[maker, 10000]]\r\n\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n        var offerOrder = await this.api.getOfferOrder({id:offerId})\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var makeAsset = Asset(maTypeMV, assetData, quantity)\r\n        this._checkDiffAssets(makeAsset, offerOrder.order.takeAsset)\r\n\r\n        const retAcceptOrder = await this._makeOrderAndApprove(\r\n            maker,\r\n            makeAsset,\r\n            offerOrder.order.maker,\r\n            offerOrder.order.makeAsset,\r\n            0, 0, 0, \r\n            ORDER_DATA_V1, encData\r\n        )\r\n\r\n        // TODO: match\r\n        // console.log(retAcceptOrder.order, retAcceptOrder.signature, offerOrder.order, offerOrder.signature)\r\n        var ret = await this._matchOrders(\r\n            retAcceptOrder.order, retAcceptOrder.signature, offerOrder.order, offerOrder.signature,\r\n            maker\r\n        )\r\n        return ret\r\n    }\r\n\r\n    // order를 취소\r\n    async cancelOrder(order, order_maker){\r\n        // https://github.com/rariblecom/protocol-documentation/blob/master/exchange/updating-cancelling-an-order.md\r\n        // order\r\n        const exchange = this._makeContractInstance(Exchange, this.exchangeAddress)\r\n        var _callobj = exchange.methods.cancel(order)\r\n        var res = await this.sendTransactionAndConfirm(\r\n            order_maker, this.exchangeAddress, _callobj, {},\r\n            EventType.CancelOrder, 'CancelOrder'\r\n        )\r\n        return res\r\n    }\r\n\r\n    // order update?\r\n\r\n    // swap eth to erc20 how to?\r\n\r\n    async getBalanceOf(account, contractAddress=0, tokenId=0){ // is 721 or 1155\r\n        this._verifyParamAddress([account])\r\n        this._verifyParamUintNumber([tokenId])\r\n\r\n        if (contractAddress==0){ // ETH\r\n            return await this.web3.eth.getBalance(account)\r\n        }\r\n\r\n        // else\r\n\r\n        const contractClass = await this.classify(contractAddress)\r\n        if(contractClass == 1155){\r\n            if (tokenId < 1){\r\n                throw 'token id must bigger than 0'\r\n            }\r\n            const instance = this._makeContractInstance(IERC1155, contractAddress)\r\n            return await instance.methods.balanceOf(account, tokenId).call()\r\n        }else if(contractClass == 20 || contractClass == 721){ // ERC20 & ERC721 has same interface ( 'balanceOf(address account) returns(uint256 amount)' )\r\n            const instance = this._makeContractInstance(IERC20, contractAddress)\r\n            return await instance.methods.balanceOf(account).call()\r\n        }else{\r\n            throw `${contractAddress} is not token(20,721,1155) contract.`\r\n        }\r\n    }\r\n\r\n    async getTokenOwnerOf(contractAddress, tokenId){\r\n        this._verifyParamAddress([contractAddress])\r\n        this._verifyParamUintNumber([tokenId])\r\n        try{\r\n            var tokenCont = this._makeContractInstance(NFTContract, contractAddress)\r\n            return await tokenCont.methods.ownerOf(tokenId).call()\r\n        }catch(err){\r\n            throw `error:${err}: contract.ownerOf(${contractAddress, tokenId}) `\r\n        }\r\n    }\r\n\r\n    async classify(contractAddress){\r\n        this._verifyParamAddress([contractAddress])\r\n\r\n        const erc721ID = '0x80ac58cd'\r\n        const erc1155ID = '0xd9b67a26'\r\n        const contract = this._makeContractInstance(IERC165, contractAddress)\r\n\r\n        try{\r\n            var is721 = await contract.methods.supportsInterface(erc721ID).call()\r\n            if (is721){\r\n                return 721\r\n            }\r\n        }catch(e){\r\n            // 20인지 체크 해야 함\r\n            const contract2 = this._makeContractInstance(IERC20, contractAddress)\r\n            try{\r\n                var r = await contract2.methods.totalSupply().call()\r\n                var r = await contract2.methods.balanceOf(ZERO_ADDRESS).call()\r\n                // TODO: 이거 호출될 때 metamask 에러 나는 것 같은데, 확인 필요 { .. -32000, ...}\r\n                return 20\r\n            }catch(e){\r\n                return 9999 // it's not supports 'supportsInterface' and 'totalSupply'\r\n            }\r\n        }\r\n\r\n        var is1155 = await contract.methods.supportsInterface(erc1155ID).call()\r\n        if (is1155){\r\n            return 1155\r\n        }\r\n\r\n        return 9999\r\n    }\r\n\r\n    ////////////////////////////\r\n    // Royalty\r\n    ////////////////////////////\r\n    async getRoyaltiesOwner(contractAddress, tokenId){\r\n        this._verifyParamAddress([contractAddress])\r\n        this._verifyParamUintNumber([tokenId])\r\n\r\n        // RoyaltyV2\r\n        const nftContract = this._makeContractInstance(NFTContract, contractAddress)\r\n        var rOwner = await nftContract.methods.getRoyaltyOwner(tokenId).call()\r\n        if(rOwner && rOwner != ZERO_ADDRESS){\r\n            console.log(`nftContract.getRoyaltyOwner works PARU#${tokenId}'s royaltyOwner -> ${rOwner}`)\r\n            return rOwner\r\n        } // EndOf - RoyaltyV2\r\n\r\n        const royaltiesRegistry = this._makeContractInstance(RoyaltiesRegistry, this.royaltiesAddress)\r\n        return await royaltiesRegistry.methods.getRoyaltiesOwner(contractAddress, tokenId).call()\r\n    }\r\n\r\n    async getRoyalties(contractAddress, tokenId){\r\n        this._verifyParamAddress([contractAddress])\r\n        this._verifyParamUintNumber([tokenId])\r\n\r\n        // RoyaltyV2\r\n        const nftContract = this._makeContractInstance(NFTContract, contractAddress)\r\n        var royalties = await nftContract.methods.getRoyalties(tokenId).call()\r\n        if(royalties.length > 0){\r\n            console.log(`nftContract.getRoyalties works. PARU#${tokenId}'s royalties: ${royalties}`)\r\n            return royalties\r\n        } // EO - RoyaltyV2\r\n\r\n        const royaltiesRegistry = this._makeContractInstance(RoyaltiesRegistry, this.royaltiesAddress)\r\n        return await royaltiesRegistry.methods.getRoyalties(contractAddress, tokenId).call()\r\n    }\r\n\r\n    async transferRoyaltiesOwnership(contractAddress, tokenId, ownerNew, from){\r\n        this._verifyParamAddress([contractAddress, ownerNew, from])\r\n        this._verifyParamUintNumber([tokenId])\r\n\r\n        var ownerNew = ownerNew.toLowerCase()\r\n        var ownerBefore = await this.getRoyaltiesOwner(contractAddress, tokenId)\r\n        if (ownerBefore.toLowerCase() == ownerNew){\r\n            return {status:true, ownerBefore}\r\n        }\r\n\r\n        // RoyaltyV2\r\n        try{\r\n            const nftContract = this._makeContractInstance(NFTContract, contractAddress)\r\n            var _callobj = nftContract.methods.transferRoyaltyOwnership(tokenId, ownerNew)\r\n            var res = await this.sendTransactionAndConfirm(\r\n                from, contractAddress, _callobj, {},\r\n                EventType.TransferRoyaltiesOwnership, 'Transfer royalties ownership'\r\n            )\r\n            if(res.status==true){\r\n                return {...res, ownerBefore}\r\n            }\r\n        }catch(e){\r\n            console.error(e)\r\n        }\r\n        // EO - RoyaltyV2\r\n\r\n        const royaltiesRegistry = this._makeContractInstance(RoyaltiesRegistry, this.royaltiesAddress)\r\n        var _callobj = royaltiesRegistry.methods.transferRoyaltiesOwnership(contractAddress, tokenId, ownerNew)\r\n        var res = await this.sendTransactionAndConfirm(\r\n            from, this.royaltiesAddress, _callobj, {},\r\n            EventType.TransferRoyaltiesOwnership, 'Transfer royalties ownership'\r\n        )\r\n        return {...res, ownerBefore}\r\n    }\r\n    \r\n    async updateRoyalties(contractAddress, tokenId, royaltiesNew, from){\r\n        this._verifyParamAddress([contractAddress, from])\r\n        this._verifyParamUintNumber([tokenId])\r\n        this._verifyParamTypePart([royaltiesNew]) // TODO: 100곱해서 입력하게 할지 아니면 안에서 100 곱할지에 따라서 검사 달라진다. 그리고 그에 맞는 최대값 검사도 추가 필요함(총합 100%이하)\r\n\r\n        let tokenOwner;\r\n        try{\r\n            tokenOwner = await this.getTokenOwnerOf(contractAddress, tokenId)\r\n        }catch(err){\r\n            return {status:false, err: `contract or tokenId problem:: ${JSON.stringify(err)}`}\r\n        }\r\n        // var res = await parula.updateRoyalties(parula.nftAddress, tokenId, royaltiesTo, ALICE_ADDRESS)\r\n\r\n        var from = from.toLowerCase()\r\n        var ownerBefore = await this.getRoyaltiesOwner(contractAddress, tokenId)\r\n        if ( (ownerBefore==ZERO_ADDRESS && tokenOwner.toLowerCase() == from) // ownerBefore가 zero고, tokenOwner(erc721.ownerOf(address)가 맞거나\r\n            || (ownerBefore.toLowerCase() == from)){ // royaltiesOwnership이 from면 성공한다\r\n            // update 한다\r\n            var _royaltiesBefore = await this.getRoyalties(contractAddress, tokenId)\r\n            //RoyaltyV2\r\n            try{\r\n                var nftCont = this._makeContractInstance(NFTContract, contractAddress)\r\n                var _callobj = await nftCont.methods.updateRoyalty(tokenId, royaltiesNew)\r\n                var res = await this.sendTransactionAndConfirm(\r\n                    from, contractAddress, _callobj, {},\r\n                    EventType.UpdateRoyalties, 'Update royalties'\r\n                )\r\n                if(res.status==true){\r\n                    return {...res, royaltiesBefore: _royaltiesBefore, royaltiesNew}\r\n                }\r\n            }catch(e){\r\n                console.log(e)\r\n            }\r\n            // EO - RoyaltyV2\r\n\r\n            const royaltiesRegistry = this._makeContractInstance(RoyaltiesRegistry, this.royaltiesAddress)\r\n            var _callobj = royaltiesRegistry.methods.setRoyaltiesByTokenAndTokenId(contractAddress, tokenId, royaltiesNew)\r\n            var res = await this.sendTransactionAndConfirm(\r\n                from, this.royaltiesAddress, _callobj, {},\r\n                EventType.UpdateRoyalties, 'Update royalties'\r\n                )\r\n            return {...res, royaltiesBefore: _royaltiesBefore, royaltiesNew}\r\n        }else{\r\n            // 실패시킨다\r\n            return {status:false, tokenOwner, ownerBefore, 'updateRequestedFrom': from, err: 'ownership problem'}\r\n        }\r\n    }\r\n    ////////////////////////////\r\n    // end of Royalty\r\n    ////////////////////////////\r\n\r\n    // TODO: consider update metadata\r\n    \r\n    async _matchOrders(leftOrder, leftSignature, rightOrder, rightSignature, from, value=0){\r\n        const exchange = this._makeContractInstance(Exchange, this.exchangeAddress)\r\n\r\n        var to = this.exchangeAddress\r\n        var _callobj = exchange.methods.matchOrders(leftOrder, leftSignature, rightOrder, rightSignature)\r\n\r\n        var _param = {value}\r\n        var ret = await this.sendTransactionAndConfirm(from, to, _callobj, _param, EventType.MatchOrders, \"Match orders\")\r\n        return ret\r\n    }\r\n\r\n    async _approveTransferProxy(asset_type, contract_address, approve_amount, from){\r\n        // function isApprovedForAll(address owner, address operator)\r\n        // function setApprovalForAll(address operator, bool approved) public virtual override\r\n        let ret\r\n        var to = contract_address\r\n        var _param = {}\r\n        if (asset_type == ERC20){\r\n            const transfer_proxy = this.erc20TransferProxyAddress\r\n            const ierc20 = this._makeContractInstance(IERC20, contract_address)\r\n\r\n            // check allowance(operator, spender) returns(uint256)\r\n            var allowance = await ierc20.methods.allowance(from, transfer_proxy).call()\r\n            if(allowance >= approve_amount){\r\n                // skip approve if allowance is enough\r\n                try{\r\n                    var _symbol = await this.web3.eth.call({\r\n                        from, to:contract_address,\r\n                        data: this.web3.eth.abi.encodeFunctionSignature(\"symbol()\")\r\n                    })\r\n                    var symbol = this.web3.eth.abi.decodeParameter(\"string\", _symbol)\r\n                    this.logger(`${from} approve ${symbol}:${allowance} for ${transfer_proxy}`)\r\n                }catch(e){\r\n                    this.logger(e)\r\n                }\r\n                ret = {status:true}\r\n            }else{\r\n                var _callobj = ierc20.methods.approve(transfer_proxy, approve_amount)\r\n                ret = await this.sendTransactionAndConfirm(from, to, _callobj, _param, EventType.ApproveCurrency, \"Approve currency\")\r\n            }\r\n        }else if (asset_type == ERC721 || asset_type == ERC1155){\r\n            // 721: function setApprovalForAll(address operator, bool _approved) external;\r\n            // 1155: function setApprovalForAll(address _operator, bool _approved) external;\r\n            const transfer_proxy = this.transferProxyAddress // transfer-proxy! not exchange\r\n            let ierc, _callobj\r\n            if (asset_type == ERC721){\r\n                ierc = this._makeContractInstance(NFTContract, contract_address)\r\n            }else{\r\n                ierc = this._makeContractInstance(NFT1155Contract, contract_address)\r\n            }\r\n            // check isApprovedForAll(owner, operator) returns(bool)\r\n            var isApproved = await ierc.methods.isApprovedForAll(from, transfer_proxy).call()\r\n            if(isApproved){\r\n                // skip setApprovalForAll if already approved\r\n                var symbol = await ierc.methods.symbol().call()\r\n                this.logger(`${from} approve ${symbol}# for ${transfer_proxy}`)\r\n                ret = {status:true}\r\n            }else{\r\n                _callobj = ierc.methods.setApprovalForAll(transfer_proxy, true)\r\n                ret = await this.sendTransactionAndConfirm(from, to, _callobj, _param, EventType.ApproveOrder, \"Set approval for all\")\r\n            }\r\n        }else { // ETH\r\n            ret = {status:true}\r\n        }\r\n        var err = ret.status? '':\"approve fail\"\r\n        return {...ret, err}\r\n    }\r\n\r\n    async _makeOrderAndApprove(maker, makerAsset, taker, takerAsset, salt, start, end, dataType, encData) {\r\n        this._verifyParamAddress([maker, taker])\r\n        this._verifyParamUintNumber([salt, start, end])\r\n        this._verifyParamAsset([makerAsset, takerAsset])\r\n\r\n        // need to verify [dataType, encData] \r\n\r\n        // validate maker, taker addresses\r\n        // validate assets\r\n        var order = Order(\r\n            maker, \r\n            makerAsset,  // Asset(ETH, \"0x\", 200), \r\n            taker,      // can be ZERO\r\n            takerAsset,  // Asset(ERC721, enc(erc721.address, erc721TokenId1), 1), \r\n            salt,       // \r\n            start,      // \r\n            end,        // \r\n            dataType,   // ORDER_DATA_V1 (DT magic value)\r\n            encData        // encDataRight (DT encrypted)\r\n        );\r\n\r\n        // sign\r\n        let data, signature\r\n        if(salt != 0){\r\n            const _signed_data_and_sign = await createTypedDataAndSignature(this.web3, this.exchangeAddress, order, maker)\r\n            signature = _signed_data_and_sign.sig\r\n            data = _signed_data_and_sign.data\r\n        }else{\r\n            signature = '0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\r\n            data = ''\r\n        }\r\n        const {typeMV, contractAddress, value} = decAsset(this.web3, makerAsset)\r\n\r\n        var ret = await this._approveTransferProxy(typeMV, contractAddress, value, maker)\r\n        return {...ret, order, data, signature}\r\n    }\r\n\r\n    async _extractTransferInfo(txHash) {\r\n        // parse ERC721-Transfer event\r\n        const receipt = await this.web3.eth.getTransactionReceipt(txHash)\r\n        // console.log(receipt.logs)\r\n        // receipt.transactionHash // txHash\r\n        let log = receipt.logs[0] // TODO: log가 여러 개일 때는 어떻게 할겨// arr = logs.map(log => { .. from = decode('address', log.topics[1]) ..})\r\n\r\n        // log.data // non-indexed 필드 데이터들이 여기에 저장됨(indexed 필드는 topics에)\r\n        // keccak256('Transfer(address,address,uint256)')\r\n        const sigTransfer721 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\r\n        const sigTransfer1155 = '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62'\r\n        // console.log(receipt)  // ganacli 에서 테스트하려고 했는데, event 발생이 안되네;\r\n        var sigEvt = log.topics[0]\r\n    \r\n        let from, to, tokenId, quantity=0;\r\n        if (sigEvt == sigTransfer721){\r\n            from = this.web3.eth.abi.decodeParameter('address', log.topics[1]) // from\r\n            to = this.web3.eth.abi.decodeParameter('address', log.topics[2]) // to\r\n            tokenId = this.web3.eth.abi.decodeParameter('uint', log.topics[3]) // tokenId (hex)\r\n        }else if(sigEvt == sigTransfer1155){\r\n            // in IERC1155\r\n            //   event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n            from = this.web3.eth.abi.decodeParameter('address', log.topics[2]) // from\r\n            to = this.web3.eth.abi.decodeParameter('address', log.topics[3]) // to\r\n\r\n            var r = this.web3.eth.abi.decodeParameter('(uint256,uint256)', log.data)\r\n            tokenId  = r[0]\r\n            quantity = r[1]\r\n        }else{\r\n            this.logger('event type is not handled.')\r\n            console.log(log)\r\n            return {}\r\n        }\r\n\r\n        var blockNumber = log.blockNumber;\r\n        var contractAddress = log.address // contract\r\n        var isMinted = (from==ZERO_ADDRESS)? true : false\r\n\r\n        // parse unindexed parameter  https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5\r\n        // const decoder = new ethers.utils.AbiCoder();\r\n        // const unindexedEvents = events.inputs.filter(event => event.indexed === false);\r\n        // const decodedLogs = logs.map(log => decoder.decode(unindexedEvents, log.data)\r\n\r\n        return {\r\n            blockNumber, txHash,\r\n            contractAddress, tokenId:Number(tokenId), quantity:Number(quantity),\r\n            from, to, isMinted\r\n        }\r\n\r\n        // https://gist.github.com/wschwab/528153cb6f2ea17ef9eee0c180425961\r\n        // https://gist.github.com/wschwab/6e89eeb29a8e24203ee954c042e47a6f\r\n\r\n    }\r\n\r\n    async sendTransactionAndConfirm(from, to, _callobj, _param, evtType, log){\r\n        const tx = await this._lowLevelSend(from, to, _callobj, _param)\r\n        if(tx.status){\r\n            const isConfirmed = await this._confirmTransaction(tx.transactionHash, evtType, log)\r\n            return {status:isConfirmed, tx}\r\n        }else{\r\n            return {status:false, tx}\r\n        }\r\n    }\r\n\r\n    async _lowLevelSend(from, to, _callobj, _param){\r\n        var data = _callobj.encodeABI()\r\n        var gasPrice = await this._computeGasPrice()\r\n        try{\r\n            var gas = await _callobj.estimateGas({from, to, ..._param})\r\n            return await this.web3.eth.sendTransaction({from, to, data, gas, gasPrice, ..._param})\r\n        }catch (err){\r\n            return {status:false, err}\r\n        }\r\n    }\r\n    \r\n    async _lowLevelCall(from, to, _call){\r\n        var data = _call.encodeABI()\r\n        try{\r\n            var ret = await web3.eth.call({from, to, data})\r\n            return this.web3.eth.abi.decodeParameters(_call._method.outputs, ret)[0]\r\n        }catch (err){\r\n            return {}\r\n        }\r\n    }\r\n\r\n    async _computeGasPrice(){\r\n        const meanGas = await this.web3.eth.getGasPrice()\r\n        const weiToAdd = Web3.utils.toBN(this.web3.utils.toWei(this.gasPriceAddition, 'gwei'))\r\n        return Web3.utils.toBN(meanGas).add(weiToAdd).toString()\r\n    }\r\n\r\n    async _confirmTransaction(transactionHash, event, description, testForSuccess) {\r\n        const transactionEventData = { transactionHash, event }\r\n        this.logger(`transaction started - ${description}`)\r\n\r\n        if (transactionHash == NULL_BLOCK_HASH) {\r\n            // This was a smart contract wallet that doesn't know the transaction\r\n            this._dispatch(EventType.TransactionCreated, { event })\r\n\r\n            if (!testForSuccess) {\r\n                // Wait if test not implemented\r\n                this.logger(`Unknown action, waiting 1 minute: ${description}`)\r\n                await delay(60 * 1000)\r\n                return\r\n            }\r\n            return await this._pollCallbackForConfirmation(event, description, testForSuccess)\r\n        }\r\n\r\n        // Normal wallet\r\n        try {\r\n            this._dispatch(EventType.TransactionCreated, transactionEventData)\r\n            await confirmTransaction(this.web3, transactionHash)\r\n            this.logger(`transaction succeed - ${description}`)\r\n            this._dispatch(EventType.TransactionConfirmed, transactionEventData)\r\n            return true\r\n        } catch (error) {\r\n            this.logger(`transaction failed: - ${description}`)\r\n            this._dispatch(EventType.TransactionFailed, {\r\n                ...transactionEventData, error\r\n            })\r\n            throw error\r\n        }\r\n    }\r\n\r\n    async _pollCallbackForConfirmation(event, description, testForSuccess) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const initialRetries = 60\r\n            // const testResolve: (r: number) => Promise<void> = async retries => {\r\n            const testResolve = async retries => {\r\n                const wasSuccessful = await testForSuccess()\r\n                if (wasSuccessful) {\r\n                    this.logger(`Transaction succeeded: ${description}`)\r\n                    this._dispatch(EventType.TransactionConfirmed, { event })\r\n                    return resolve(true)\r\n                } else if (retries <= 0) {\r\n                    return reject(false)\r\n                }\r\n\r\n                if (retries % 10 == 0) {\r\n                    this.logger(`Tested transaction ${initialRetries - retries + 1} times: ${description}`)\r\n                }\r\n\r\n                await delay(5000)\r\n                return testResolve(retries - 1)\r\n            }\r\n\r\n            return testResolve(initialRetries)\r\n        })\r\n    }\r\n\r\n    _dispatch(event, data) {\r\n        this._emitter.emit(event, data)\r\n    }\r\n    \r\n    _makeContractInstance(contractAbi, contractAddress=null){\r\n        return makeContractInstance(this.web3, this.netId, contractAbi, contractAddress)\r\n    }\r\n\r\n    _encAssetData(typeMV, contractAddress, value){\r\n        let assetData\r\n        if (typeMV==ETH){\r\n            // assetData = \"0x\" //ZERO_ADDRESS\r\n            assetData = enc(this.web3, ZERO_ADDRESS)\r\n        }else if (typeMV==ERC20){\r\n            assetData = enc(this.web3, contractAddress)\r\n        }else if (typeMV==ERC721 || typeMV==ERC1155){\r\n            assetData = enc(this.web3, contractAddress, value)\r\n        }else {\r\n            console.trace()\r\n            throw `unknown type magic-value (${typeMV})`\r\n        }\r\n        return assetData\r\n    }\r\n\r\n    _verifyParamAddress(addressesToVerify){\r\n        addressesToVerify.forEach(one=>{\r\n            if(one == undefined){\r\n                console.trace()\r\n                throw `Address 'undefined' passed`\r\n            }\r\n            if(one.length != 42){\r\n                console.trace()\r\n                throw `Address length incorrect :${one}`\r\n            }\r\n        })\r\n    }\r\n    _verifyParamTypeMV(typesToVrify){\r\n        typesToVrify.forEach(one=>{\r\n            if(one == undefined){\r\n                console.trace()\r\n                throw `typeMV 'undefined' passed`\r\n            }\r\n            if(one.length != 10){\r\n                console.trace()\r\n                throw `typeMV length incorrect : ${one}`\r\n            }\r\n        })\r\n    }\r\n    _verifyParamUintNumber(valuesToVerify){\r\n        valuesToVerify.forEach(one=>{\r\n            if(one == undefined){\r\n                console.trace()\r\n                throw `value 'undefined' passed`\r\n            }\r\n            if(typeof one != 'number'){\r\n                console.trace()\r\n                throw `value is not 'number' type ${typeof one}`\r\n            }\r\n            if(Number(one.toFixed()) != one){\r\n                console.trace()\r\n                throw `value is not integer`\r\n            }\r\n            if(one < 0){\r\n                console.trace()\r\n                throw `value incorrect ${one}`\r\n            }\r\n        })\r\n    }\r\n\r\n    _verifyParamTypePart(partsToVerify){\r\n        // typePart is struct defined in Libpart.sol, 'Libpart.Part[]'\r\n        partsToVerify.forEach(partToVerify=>{\r\n            partToVerify.forEach(one=>{\r\n                if(one == undefined){\r\n                    console.trace()\r\n                    throw `value 'undefined' passed`\r\n                }\r\n                if(one.length > 0){\r\n                    var account = one[0]\r\n                    var value = one[1]\r\n                    this._verifyParamAddress([account])\r\n                    this._verifyParamUintNumber([value])\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    _verifyParamAsset(assetsToVerify){\r\n        assetsToVerify.forEach(one=>{\r\n            if(one == undefined){\r\n                console.trace()\r\n                throw `asset 'undefined' passed`\r\n            }\r\n            const { assetType, value } = one\r\n            if(assetType == undefined){\r\n                console.trace()\r\n                throw `assetType 'undefined' passed`\r\n            }\r\n            this._verifyParamUintNumber([value])\r\n        })\r\n    }\r\n\r\n    _checkDiffAssets(asset1, asset2){\r\n        if(asset1.value != asset2.value || \r\n            asset1.assetType.assetClass != asset2.assetType.assetClass ||\r\n            asset1.assetType.data != asset2.assetType.data\r\n        ){\r\n            console.trace()\r\n            throw `asset not matched`\r\n        }\r\n    }\r\n\r\n    toBN(number){\r\n        return new this.web3.utils.BN(number)\r\n    }\r\n}\r\n\r\n// export default Parula;\r\nmodule.exports = { Parula }\r\n"]}]}