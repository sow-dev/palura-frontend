{"remainingRequest":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/babel-loader/lib/index.js!/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/services/upload.service.js","dependencies":[{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/services/upload.service.js","mtime":1634528040000},{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwpleHBvcnQgZGVmYXVsdCB7CiAgbWVkaWE6IGZ1bmN0aW9uIG1lZGlhKGZpbGUsIGFjY291bnQsIGluZm8sIHJlYWRlcikgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgc2VsZi5hcGkoKS5wb3N0KCcvdXBsb2FkL21lZGlhJywgSlNPTi5zdHJpbmdpZnkoewogICAgICAgICJuYW1lIjogZmlsZS5uYW1lLAogICAgICAgICJ0eXBlIjogZmlsZS50eXBlLAogICAgICAgICJhY2NvdW50IjogYWNjb3VudCwKICAgICAgICAibWVkaWFpbmZvIjogaW5mbywKICAgICAgICAicGF0aCI6IGZpbGUucGF0aAogICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2cocmVzKTsKICAgICAgICAvLyBjb25zb2xlLmxvZygndXJsID09PT4nLCByZXMuZGF0YS51cGxvYWRVUkwpCiAgICAgICAgLy8gY29uc29sZS5sb2coImZpbGUubmFtZSAxOjo6IixmaWxlLm5hbWUpCiAgICAgICAgLy8gZmlsZS5uYW1lID0gcmVzLmRhdGEubmFtZTsKICAgICAgICAvLyBjb25zb2xlLmxvZygiZmlsZS5uYW1lIDI6OjoiLGZpbGUubmFtZSkKICAgICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJywKICAgICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnOiAnSEVBRCxHRVQsUFVULFBPU1QsREVMRVRFJywKICAgICAgICAgICAgJ3gtYW16LWFjbCc6ICdwdWJsaWMtcmVhZCcKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbnNvbGUubG9nKCdyZXM6JywgcmVzKTsKICAgICAgICBjb25zb2xlLmxvZygndXJsOicsIHJlcy5kYXRhLnVwbG9hZFVybCk7CiAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEucGF0aCk7IC8vdmFyIG15RmlsZSA9IHJlYWRlci5yZXN1bHQ7CiAgICAgICAgLy9jb25zdCBteU5ld0ZpbGUgPSBuZXcgRmlsZShbbXlGaWxlXSwgLnY0KCksIHsgdHlwZTogbXlGaWxlLnR5cGUgfSk7CgogICAgICAgIHNlbGYuYXBpKCkucHV0KHJlcy5kYXRhLnVwbG9hZFVybCwgcmVhZGVyLnJlc3VsdCwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAodXBsb2FkZWQpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKHVwbG9hZGVkKTsKCiAgICAgICAgICBpZiAodXBsb2FkZWQuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZXhlYyBtZWRpYSB1cGxvYWQgIHN0ZXAgMDAzJyk7IC8vIGFsZXJ0KCd1cGxvYWQgY29tcGxldGUgISEnKQogICAgICAgICAgICAvLyAkKCcjbG9hZGluZ19jaXJjbGUnKS5oaWRlKCkKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCLquIAg6riA6riAIiArIEpTT04uc3RyaW5naWZ5KHJlcy5kYXRhKSk7CiAgICAgICAgICAgIHJlc29sdmUocmVzLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciA+Pj4+Pj4+Pj4+Pj4+Jyk7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgIHJlamVjdChlcnIpOwogICAgICB9KTsKICAgIH0pOwogIH0sCiAgLy9hcGkoKQogIGFwaTogZnVuY3Rpb24gYXBpKCkgewogICAgcmV0dXJuIGF4aW9zLmNyZWF0ZSh7CiAgICAgIGJhc2VVUkw6IHByb2Nlc3MuZW52LlZVRV9BUFBfVVBMT0FEX1VSTCwKICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZSwKICAgICAgaGVhZGVyczogewogICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgfQogICAgfSk7CiAgfQp9Ow=="},{"version":3,"sources":["/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/services/upload.service.js"],"names":["axios","media","file","account","info","reader","self","Promise","resolve","reject","api","post","JSON","stringify","name","type","path","then","res","options","headers","console","log","data","uploadUrl","put","result","uploaded","status","catch","err","create","baseURL","process","env","VUE_APP_UPLOAD_URL","withCredentials","Accept"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe;AAEXC,EAAAA,KAFW,iBAELC,IAFK,EAECC,OAFD,EAEUC,IAFV,EAEgBC,MAFhB,EAEuB;AAC9B,QAAMC,IAAI,GAAG,IAAb;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClCH,MAAAA,IAAI,CAACI,GAAL,GAAWC,IAAX,CAAgB,eAAhB,EAAiCC,IAAI,CAACC,SAAL,CAAe;AAChD,gBAAQX,IAAI,CAACY,IADmC;AAEhD,gBAAQZ,IAAI,CAACa,IAFmC;AAGhD,mBAAWZ,OAHqC;AAIhD,qBAAaC,IAJmC;AAKhD,gBAAQF,IAAI,CAACc;AALmC,OAAf,CAAjC,EAOHC,IAPG,CAOE,UAAUC,GAAV,EAAe;AACjB;AACA;AAEA;AACA;AACA;AACA,YAAIC,OAAO,GAAG;AACVC,UAAAA,OAAO,EAAE;AACL,2CAA+B,GAD1B;AAEL,4CAAgC,0BAF3B;AAGL,yBAAa;AAHR;AADC,SAAd;AAOAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,GAApB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,GAAG,CAACK,IAAJ,CAASC,SAA7B;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAJ,CAASP,IAArB,EAhBiB,CAiBjB;AACA;;AACAV,QAAAA,IAAI,CAACI,GAAL,GAAWe,GAAX,CAAeP,GAAG,CAACK,IAAJ,CAASC,SAAxB,EAAmCnB,MAAM,CAACqB,MAA1C,EAAkDP,OAAlD,EACKF,IADL,CACU,UAAUU,QAAV,EAAoB;AACtBN,UAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;;AAEA,cAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AACxBP,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EADwB,CAExB;AACA;;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAOV,IAAI,CAACC,SAAL,CAAeK,GAAG,CAACK,IAAnB,CAAnB;AACAf,YAAAA,OAAO,CAACU,GAAG,CAACK,IAAL,CAAP;AACH;AACJ,SAXL,EAYKM,KAZL,CAYW,UAAUC,GAAV,EAAe;AAClBT,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACArB,UAAAA,MAAM,CAACqB,GAAD,CAAN;AACH,SAhBL;AAiBH,OA3CG,EA4CHD,KA5CG,CA4CG,UAAUC,GAAV,EAAe;AAClBT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACArB,QAAAA,MAAM,CAACqB,GAAD,CAAN;AACH,OA/CG;AAiDH,KAlDM,CAAP;AAoDL,GAxDY;AA0Df;AACEpB,EAAAA,GA3Da,iBA2DP;AACJ,WAAOV,KAAK,CAAC+B,MAAN,CAAa;AAClBC,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBADH;AAElBC,MAAAA,eAAe,EAAE,KAFC;AAGlBhB,MAAAA,OAAO,EAAE;AACPiB,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT;AAHS,KAAb,CAAP;AAQD;AApEY,CAAf","sourcesContent":["import axios from 'axios'\r\n\r\nexport default {\r\n\r\n    media(file, account, info, reader){\r\n        const self = this;\r\n        return new Promise((resolve, reject)=>{\r\n            self.api().post('/upload/media', JSON.stringify({\r\n            \"name\": file.name,\r\n            \"type\": file.type,\r\n            \"account\": account,\r\n            \"mediainfo\": info,\r\n            \"path\": file.path,\r\n        }))\r\n        .then(function (res) {\r\n            // console.log(res);\r\n            // console.log('url ===>', res.data.uploadURL)\r\n\r\n            // console.log(\"file.name 1:::\",file.name)\r\n            // file.name = res.data.name;\r\n            // console.log(\"file.name 2:::\",file.name)\r\n            var options = {\r\n                headers: {\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Methods': 'HEAD,GET,PUT,POST,DELETE',\r\n                    'x-amz-acl': 'public-read',\r\n                }\r\n            };\r\n            console.log('res:', res)\r\n            console.log('url:', res.data.uploadUrl)\r\n            console.log(res.data.path)\r\n            //var myFile = reader.result;\r\n            //const myNewFile = new File([myFile], .v4(), { type: myFile.type });\r\n            self.api().put(res.data.uploadUrl, reader.result, options)\r\n                .then(function (uploaded) {\r\n                    console.log(uploaded);\r\n\r\n                    if (uploaded.status == 200) {\r\n                        console.log('exec media upload  step 003')\r\n                        // alert('upload complete !!')\r\n                        // $('#loading_circle').hide()\r\n                        console.log(\"글 글글\"+JSON.stringify(res.data))\r\n                        resolve(res.data);\r\n                    }\r\n                })\r\n                .catch(function (err) {\r\n                    console.log('error >>>>>>>>>>>>>')\r\n                    console.log(err);\r\n                    reject(err)\r\n                });\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err);\r\n            reject(err)\r\n        });\r\n\r\n        });\r\n        \r\n  },\r\n\r\n//api()\r\n  api() {\r\n    return axios.create({\r\n      baseURL: process.env.VUE_APP_UPLOAD_URL,\r\n      withCredentials: false,\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n"]}]}