{"remainingRequest":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/babel-loader/lib/index.js!/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/utils/EIP712.js","dependencies":[{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/utils/EIP712.js","mtime":1632723580000},{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL1VzZXJzL2h5dW5qb25na2ltL0RvY3VtZW50cy9HaXRIdWIvcGFsdXJhLWZyb250ZW5kL2NsaWVudC12MS4wL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIpOwoKdmFyIERPTUFJTl9UWVBFID0gW3sKICB0eXBlOiAic3RyaW5nIiwKICBuYW1lOiAibmFtZSIKfSwgewogIHR5cGU6ICJzdHJpbmciLAogIG5hbWU6ICJ2ZXJzaW9uIgp9LCB7CiAgdHlwZTogInVpbnQyNTYiLAogIG5hbWU6ICJjaGFpbklkIgp9LCB7CiAgdHlwZTogImFkZHJlc3MiLAogIG5hbWU6ICJ2ZXJpZnlpbmdDb250cmFjdCIKfV07IC8vIHZhciBXZWIzID0gcmVxdWlyZSgid2ViMyIpCi8vIHZhciB3ZWIzQWx0ZXIgPSBuZXcgV2ViMyhuZXcgV2ViMy5wcm92aWRlcnMuV2Vic29ja2V0UHJvdmlkZXIoJ3dzOi8vMTI3LjAuMC4xOjg1NDUnKSkKCnZhciBzaWdVdGlsID0gcmVxdWlyZSgnZXRoLXNpZy11dGlsJyk7Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBjcmVhdGVUeXBlRGF0YTogZnVuY3Rpb24gY3JlYXRlVHlwZURhdGEoZG9tYWluRGF0YSwgcHJpbWFyeVR5cGUsIG1lc3NhZ2UsIHR5cGVzKSB7CiAgICByZXR1cm4gewogICAgICB0eXBlczogT2JqZWN0LmFzc2lnbih7CiAgICAgICAgRUlQNzEyRG9tYWluOiBET01BSU5fVFlQRQogICAgICB9LCB0eXBlcyksCiAgICAgIGRvbWFpbjogZG9tYWluRGF0YSwKICAgICAgcHJpbWFyeVR5cGU6IHByaW1hcnlUeXBlLAogICAgICBtZXNzYWdlOiBtZXNzYWdlCiAgICB9OwogIH0sCiAgc2lnblR5cGVkRGF0YTogZnVuY3Rpb24gc2lnblR5cGVkRGF0YSh3ZWIzLCBmcm9tLCBkYXRhKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBjYiwgcmV0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNiID0gZnVuY3Rpb24gX2NiKGVyciwgcmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KHJlc3VsdC5lcnJvcik7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHZhciBzaWcgPSByZXN1bHQucmVzdWx0ID8gcmVzdWx0LnJlc3VsdCA6IHJlc3VsdDsKICAgICAgICAgICAgICAgICAgdmFyIHNpZzAgPSBzaWcuc3Vic3RyaW5nKDIpOwogICAgICAgICAgICAgICAgICB2YXIgciA9ICIweCIgKyBzaWcwLnN1YnN0cmluZygwLCA2NCk7CiAgICAgICAgICAgICAgICAgIHZhciBzID0gIjB4IiArIHNpZzAuc3Vic3RyaW5nKDY0LCAxMjgpOwogICAgICAgICAgICAgICAgICB2YXIgdiA9IHBhcnNlSW50KHNpZzAuc3Vic3RyaW5nKDEyOCwgMTMwKSwgMTYpOwogICAgICAgICAgICAgICAgICByZXNvbHZlKHsKICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICAgICAgICAgIHNpZzogc2lnLAogICAgICAgICAgICAgICAgICAgIHY6IHYsCiAgICAgICAgICAgICAgICAgICAgcjogciwKICAgICAgICAgICAgICAgICAgICBzOiBzCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBpZiAod2ViMy5jdXJyZW50UHJvdmlkZXIuaXNNZXRhTWFzaykgewogICAgICAgICAgICAgICAgICB3ZWIzLmN1cnJlbnRQcm92aWRlci5zZW5kQXN5bmMoewogICAgICAgICAgICAgICAgICAgIGpzb25ycGM6ICIyLjAiLAogICAgICAgICAgICAgICAgICAgIG1ldGhvZDogImV0aF9zaWduVHlwZWREYXRhX3YzIiwKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFtmcm9tLCBKU09OLnN0cmluZ2lmeShkYXRhKV0sCiAgICAgICAgICAgICAgICAgICAgaWQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpCiAgICAgICAgICAgICAgICAgIH0sIGNiKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHJldCA9IHNpZ1V0aWwuc2lnblR5cGVkRGF0YSh3ZWIzLl9wcm92aWRlci53YWxsZXRzW2Zyb20udG9Mb3dlckNhc2UoKV0ucHJpdmF0ZUtleSwgewogICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgICAgICAgfSk7IC8vIHZhciByZWNvdmVyZWQgPSBzaWdVdGlsLnJlY292ZXJUeXBlZFNpZ25hdHVyZSh7ZGF0YTogZGF0YSwgc2lnOiByZXR9KQogICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZWNvdmVyZWQsIGZyb20pCgogICAgICAgICAgICAgICAgICBjYignJywgcmV0KTsgLy8gLy8gZG9lc24ndCB3b3JrIHdpdGggaGR3YWxsZXQtcHJvdmlkZXIKICAgICAgICAgICAgICAgICAgLy8gLy8gICB3aXRoICBgVHlwZUVycm9yOiBzZWxmLnNpZ25UeXBlZE1lc3NhZ2UgaXMgbm90IGEgZnVuY3Rpb25gCiAgICAgICAgICAgICAgICAgIC8vIGxldCBzZW5kID0gd2ViMy5jdXJyZW50UHJvdmlkZXIuc2VuZEFzeW5jOwogICAgICAgICAgICAgICAgICAvLyBpZiAoIXNlbmQpIHNlbmQgPSB3ZWIzLmN1cnJlbnRQcm92aWRlci5zZW5kOwogICAgICAgICAgICAgICAgICAvLyBzZW5kLmJpbmQod2ViMy5jdXJyZW50UHJvdmlkZXIpKHsKICAgICAgICAgICAgICAgICAgLy8gICBqc29ucnBjOiAiMi4wIiwKICAgICAgICAgICAgICAgICAgLy8gICBtZXRob2Q6ICJldGhfc2lnblR5cGVkRGF0YSIsCiAgICAgICAgICAgICAgICAgIC8vICAgcGFyYW1zOiBbZnJvbSwgZGF0YV0sCiAgICAgICAgICAgICAgICAgIC8vICAgaWQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpCiAgICAgICAgICAgICAgICAgIC8vIH0sIGNiKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gsIF94MikgewogICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KCkpOwogIH0sCiAgcmVjb3ZlclR5cGVkU2lnbmF0dXJlOiBmdW5jdGlvbiByZWNvdmVyVHlwZWRTaWduYXR1cmUoZGF0YSwgc2lnbmF0dXJlKSB7CiAgICAvLyBjb25zdCByZWNvdmVyZWQgPSBzaWdVdGlsLnJlY292ZXJUeXBlZFNpZ25hdHVyZSh7IGRhdGE6IGRhdGEsIHNpZzogYWxpY2Vfc2lnbmF0dXJlIH0pCiAgICByZXR1cm4gc2lnVXRpbC5yZWNvdmVyVHlwZWRTaWduYXR1cmUoewogICAgICBkYXRhOiBkYXRhLAogICAgICBzaWc6IHNpZ25hdHVyZQogICAgfSk7CiAgfQp9Ow=="},{"version":3,"sources":["/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/utils/EIP712.js"],"names":["DOMAIN_TYPE","type","name","sigUtil","require","module","exports","createTypeData","domainData","primaryType","message","types","Object","assign","EIP712Domain","domain","signTypedData","web3","from","data","Promise","resolve","reject","cb","err","result","error","sig","sig0","substring","r","s","v","parseInt","currentProvider","isMetaMask","sendAsync","jsonrpc","method","params","JSON","stringify","id","Date","getTime","ret","_provider","wallets","toLowerCase","privateKey","recoverTypedSignature","signature"],"mappings":"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","sourcesContent":["const DOMAIN_TYPE = [\r\n  {\r\n    type: \"string\",\r\n    name: \"name\"\r\n  },\r\n\t{\r\n\t\ttype: \"string\",\r\n\t\tname: \"version\"\r\n\t},\r\n  {\r\n    type: \"uint256\",\r\n    name: \"chainId\"\r\n  },\r\n  {\r\n    type: \"address\",\r\n    name: \"verifyingContract\"\r\n  }\r\n];\r\n\r\n// var Web3 = require(\"web3\")\r\n// var web3Alter = new Web3(new Web3.providers.WebsocketProvider('ws://127.0.0.1:8545'))\r\nconst sigUtil = require('eth-sig-util')\r\n\r\nmodule.exports = {\r\n  createTypeData: function (domainData, primaryType, message, types) {\r\n    return {\r\n      types: Object.assign({\r\n        EIP712Domain: DOMAIN_TYPE,\r\n      }, types),\r\n      domain: domainData,\r\n      primaryType: primaryType,\r\n      message: message\r\n    };\r\n  },\r\n\r\n  signTypedData: function (web3, from, data) {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      function cb(err, result) {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        if (result.error) {\r\n          return reject(result.error);\r\n        }\r\n        const sig = result.result ? result.result : result;\r\n        const sig0 = sig.substring(2);\r\n        const r = \"0x\" + sig0.substring(0, 64);\r\n        const s = \"0x\" + sig0.substring(64, 128);\r\n        const v = parseInt(sig0.substring(128, 130), 16);\r\n\r\n        resolve({\r\n          data,\r\n          sig,\r\n          v, r, s\r\n        });\r\n      }\r\n      if (web3.currentProvider.isMetaMask) {\r\n        web3.currentProvider.sendAsync({\r\n          jsonrpc: \"2.0\",\r\n          method: \"eth_signTypedData_v3\",\r\n          params: [from, JSON.stringify(data)],\r\n          id: new Date().getTime()\r\n        }, cb);\r\n      } else {\r\n        var ret = sigUtil.signTypedData(\r\n          web3._provider.wallets[from.toLowerCase()].privateKey, \r\n          {data: data}\r\n          )\r\n        // var recovered = sigUtil.recoverTypedSignature({data: data, sig: ret})\r\n        // console.log(recovered, from)\r\n        cb('', ret)\r\n\r\n        // // doesn't work with hdwallet-provider\r\n        // //   with  `TypeError: self.signTypedMessage is not a function`\r\n        // let send = web3.currentProvider.sendAsync;\r\n        // if (!send) send = web3.currentProvider.send;\r\n        // send.bind(web3.currentProvider)({\r\n        //   jsonrpc: \"2.0\",\r\n        //   method: \"eth_signTypedData\",\r\n        //   params: [from, data],\r\n        //   id: new Date().getTime()\r\n        // }, cb);\r\n      }\r\n    });\r\n  },\r\n  recoverTypedSignature: function(data, signature){\r\n    // const recovered = sigUtil.recoverTypedSignature({ data: data, sig: alice_signature })\r\n    return sigUtil.recoverTypedSignature({data, sig:signature})\r\n  }\r\n};"]}]}