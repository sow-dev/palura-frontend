{"remainingRequest":"/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/node_modules/babel-loader/lib/index.js!/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/src/parula-js/src/utils/utils.js","dependencies":[{"path":"/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/src/parula-js/src/utils/utils.js","mtime":1632723580000},{"path":"/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/hyunjongkim/Downloads/parula자료들/parula-frontend/client-v1.0/src/parula-js/src/utils/utils.js"],"names":["ethUtil","require","EIP712","NULL_BLOCK_HASH","ETH","txCallbacks","promisify","inner","Promise","resolve","reject","err","res","console","log","exports","makeBigNumber","arg","Web3","utils","BN","toString","confirmTransaction","web3","txHash","track","didSucceed","Error","onFinalized","push","poll","eth","getTransaction","tx","blockHash","getTransactionReceipt","receipt","warn","status","map","f","setTimeout","catch","error","Types","AssetType","name","type","Asset","Order","sign","order","account","verifyingContract","Number","getChainId","chainId","data","createTypeData","version","signTypedData","ret","DataTypeV1","encDataV1","tuple","abi","encodeParameter","id","str","keccak256","Buffer","from","substring","enc","token","tokenId","encodeParameters","dec","encoded","length","_ret","decodeParameters","decodeParameter","decAsset","asset","value","typeMV","assetType","assetClass","contractAddress","decoded","decOrder","encOrder","maker","makeAsset","maTypeMV","maContractAddress","maValue","createTypedDataAndSignature","exchange","signer","net","getId","netId","recoverTypedSignature","signature","makeContractInstance","contractAbi","cAddress","networks","address","Contract"],"mappings":"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","sourcesContent":["const ethUtil = require('ethereumjs-util');\r\n\r\nconst EIP712 = require(\"./EIP712\");\r\nconst { NULL_BLOCK_HASH, ETH } = require(\"../constants\")\r\n\r\nconst txCallbacks = {}\r\n\r\n/**\r\n * Promisify a callback-syntax web3 function\r\n * @param inner callback function that accepts a Web3 callback function and passes\r\n * it to the Web3 function\r\n */\r\nasync function promisify(inner) {\r\n  return new Promise((resolve, reject) =>\r\n    inner((err, res) => {\r\n      if (err) { reject(err) }\r\n      console.log('promisi::', res)\r\n      resolve(res)\r\n    })\r\n  )\r\n}\r\n\r\nexports.makeBigNumber = function(arg) {\r\n    // Zero sometimes returned as 0x from contracts\r\n    if (arg === '0x') {\r\n      arg = 0\r\n    }\r\n    // fix \"new BigNumber() number type has more than 15 significant digits\"\r\n    // arg = arg.toString()\r\n    return new Web3.utils.BN(arg).toString()\r\n}\r\n\r\nexports.confirmTransaction = async (web3, txHash) => {\r\n  return new Promise((resolve, reject) => {\r\n    track(web3, txHash, (didSucceed) => {\r\n      if (didSucceed) {\r\n        resolve(\"Transaction complete!\")\r\n      } else {\r\n        reject(new Error(`Transaction failed :( You might have already completed this action. See more on the mainnet at etherscan.io/tx/${txHash}`))\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nconst track = (web3, txHash, onFinalized) => {\r\n  if (txCallbacks[txHash]) {\r\n    txCallbacks[txHash].push(onFinalized)\r\n  } else {\r\n    txCallbacks[txHash] = [onFinalized]\r\n    const poll = async () => {\r\n      const tx = await web3.eth.getTransaction(txHash)\r\n\r\n      if (tx && tx.blockHash && tx.blockHash !== NULL_BLOCK_HASH) {\r\n        const receipt = await web3.eth.getTransactionReceipt(txHash)\r\n        if (!receipt) {\r\n          // Hack: assume success if no receipt\r\n          console.warn('No receipt found for ', txHash)\r\n        }\r\n\r\n        const status = receipt.status\r\n          // ? parseInt((receipt.status || \"0\").toString()) == 1\r\n          // : true\r\n        txCallbacks[txHash].map(f => f(status))\r\n        delete txCallbacks[txHash]\r\n      } else {\r\n        console.warn('poll else')\r\n        setTimeout(poll, 1000)\r\n      }\r\n    }\r\n    poll().catch(err => {\r\n      console.error('pollerr', err) // del\r\n    })\r\n  }\r\n}\r\n\r\nconst Types = {\r\n\tAssetType: [\r\n\t\t{name: 'assetClass', type: 'bytes4'},\r\n\t\t{name: 'data', type: 'bytes'}\r\n\t],\r\n\tAsset: [\r\n\t\t{name: 'assetType', type: 'AssetType'},\r\n\t\t{name: 'value', type: 'uint256'}\r\n\t],\r\n\tOrder: [\r\n\t\t{name: 'maker', type: 'address'},\r\n\t\t{name: 'makeAsset', type: 'Asset'},\r\n\t\t{name: 'taker', type: 'address'},\r\n\t\t{name: 'takeAsset', type: 'Asset'},\r\n\t\t{name: 'salt', type: 'uint256'},\r\n\t\t{name: 'start', type: 'uint256'},\r\n\t\t{name: 'end', type: 'uint256'},\r\n\t\t{name: 'dataType', type: 'bytes4'},\r\n\t\t{name: 'data', type: 'bytes'},\r\n\t]\r\n};\r\n\r\nconst sign = async (web3, order, account, verifyingContract) => {\r\n\tconst chainId = Number(await web3.eth.getChainId());\r\n\tconst data = EIP712.createTypeData({\r\n\t\tname: \"Exchange\",\r\n\t\tversion: \"2\",\r\n\t\tchainId,\r\n\t\tverifyingContract\r\n\t}, 'Order', order, Types);\r\n  const ret = await EIP712.signTypedData(web3, account, data)\r\n\treturn ret;\r\n}\r\n\r\nconst DataTypeV1 = \"tuple(tuple(address,uint96)[],tuple(address,uint96)[])\"\r\n\r\nexports.encDataV1 = (web3, tuple) => {\r\n    return web3.eth.abi.encodeParameter(\r\n        DataTypeV1, \r\n        tuple\r\n    );\r\n}\r\n\r\nexports.id = (str) => {\r\n\treturn `0x${ethUtil.keccak256(Buffer.from(str, \"utf-8\")).toString(\"hex\").substring(0, 8)}`;\r\n}\r\n\r\nexports.enc = (web3, token, tokenId) => {\r\n\tif (tokenId) {\r\n\t\treturn web3.eth.abi.encodeParameters([\"address\", \"uint256\"], [token, tokenId]);\r\n\t} else {\r\n\t\treturn web3.eth.abi.encodeParameter(\"address\", token);\r\n\t}\r\n}\r\n\r\nconst dec = (web3, encoded)=>{\r\n\tif (encoded.length >= 67) {\r\n    var _ret = web3.eth.abi.decodeParameters([\"address\", \"uint256\"], encoded);\r\n\t\treturn {'contractAddress':_ret[0], 'tokenId':_ret[1]}\r\n\t} else {\r\n\t\treturn {'contractAddress': web3.eth.abi.decodeParameter(\"address\", encoded)};\r\n\t}\r\n}\r\n\r\nconst decAsset = (web3, asset) => {\r\n  const value = asset.value\r\n  const typeMV = asset.assetType.assetClass\r\n  let contractAddress, tokenId\r\n  if (typeMV!=ETH){\r\n    var decoded = dec(web3, asset.assetType.data)\r\n    contractAddress = decoded.contractAddress\r\n    tokenId = decoded.contractAddress\r\n  }else{\r\n    contractAddress = \"0x\"\r\n    tokenId = 0\r\n  }\r\n  \r\n  return {typeMV, contractAddress, tokenId, value}\r\n}\r\n\r\nexports.decAsset = decAsset\r\n\r\nexports.decOrder = (web3, encOrder) => {\r\n  const order = encOrder\r\n  const maker = order.maker\r\n  const { typeMV, contractAddress, value } = decAsset(web3, order.makeAsset)\r\n\r\n  return {order, maker, maTypeMV:typeMV, maContractAddress:contractAddress, maValue:value}\r\n}\r\n\r\nconst createTypedDataAndSignature = async (web3, exchange, order, signer) => {\r\n  var netId = await web3.eth.net.getId()\r\n  return await sign(web3, order, signer, exchange);\r\n}\r\n\r\nexports.createTypedDataAndSignature = createTypedDataAndSignature;\r\n\r\nexports.recoverTypedSignature = async (data, signature) => {\r\n  return EIP712.recoverTypedSignature(data, signature)\r\n};\r\n\r\nexports.makeContractInstance = (web3, netId, contractAbi, contractAddress=null)=> {\r\n  const cAddress = contractAddress? contractAddress : contractAbi.networks[netId].address;\r\n  return new web3.eth.Contract(contractAbi.abi, cAddress)\r\n}"]}]}