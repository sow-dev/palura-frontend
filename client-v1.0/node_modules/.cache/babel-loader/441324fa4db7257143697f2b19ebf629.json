{"remainingRequest":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/babel-loader/lib/index.js!/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/parula.js","dependencies":[{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/parula.js","mtime":1637808730642},{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/parula.js"],"names":["require","EventEmitter","Web3","makeContractInstance","confirmTransaction","createTypedDataAndSignature","recoverTypedSignature","enc","decAsset","encDataV1","ParulaAPI","NULL_BLOCK_HASH","ZERO_ADDRESS","ORDER_DATA_V1","ERC20","ERC721","ERC1155","ETH","Network","EventType","Order","Asset","NFTContract","NFT1155Contract","Exchange","RoyaltiesRegistry","IERC20","IERC165","IERC1155","config","Parula","provider","apiConfig","logger","Object","keys","Number","chainId","networkName","netId","nftAddress","nft1155Address","exchangeAddress","royaltiesAddress","royaltiesRegistryAddress","transferProxyAddress","erc20TransferProxyAddress","neededProperties","forEach","propName","undefined","web3","web3ReadOnly","readonlyProviderUrl","gasPriceAddition","utils","BN","api","arg","_emitter","signer","owner","erc721metadataURL","royalties","_verifyParamAddress","to","nft_contract","_makeContractInstance","royalty","is_valid_address","isAddress","_val","isNaN","console","log","length","_verifyParamTypePart","_callobj","methods","mintItemWithRoyalty","mintItem","from","_param","sendTransactionAndConfirm","TransactionCreated","ret","status","_extractTransferInfo","tx","transactionHash","id","quantity","_verifyParamUintNumber","maker","maTypeMV","maContractAddress","maValue","taker","taTypeMV","taContractAddress","taValue","salt","Date","now","startDatetime","endDatetime","_verifyParamTypeMV","getTokenOwnerOf","realOwner","toUpperCase","err","getBalanceOf","balanceOf","originFees","payouts","encData","maEncData","_encAssetData","taEncData","_makeOrderAndApprove","sellOrderId","start","end","getSellOrder","sellOrder","assetData","makeAsset","_checkDiffAssets","order","takeAsset","retBuyOrder","value","JSON","stringify","signature","_matchOrders","retMatch","taPriceBegin","taPriceEnd","isTimeLimited","priceMinHidden","retOrderData","createSellOrder","error","auctionId","getAuctionOrder","auctionOrder","immediate_buyable","order_maker_asset","order_maker","bidId","getBidOrder","bidOrder","retBidMatchOrder","taAssetData","offerId","getOfferOrder","offerOrder","retAcceptOrder","exchange","cancel","CancelOrder","res","account","contractAddress","tokenId","eth","getBalance","classify","contractClass","instance","call","tokenCont","ownerOf","erc721ID","erc1155ID","contract","supportsInterface","is721","contract2","totalSupply","r","is1155","nftContract","getRoyaltyOwner","rOwner","royaltiesRegistry","getRoyaltiesOwner","getRoyalties","ownerNew","toLowerCase","ownerBefore","transferRoyaltyOwnership","TransferRoyaltiesOwnership","transferRoyaltiesOwnership","royaltiesNew","tokenOwner","_royaltiesBefore","nftCont","updateRoyalty","UpdateRoyalties","royaltiesBefore","setRoyaltiesByTokenAndTokenId","leftOrder","leftSignature","rightOrder","rightSignature","matchOrders","MatchOrders","asset_type","contract_address","approve_amount","transfer_proxy","ierc20","allowance","data","abi","encodeFunctionSignature","_symbol","symbol","decodeParameter","approve","ApproveCurrency","ierc","isApprovedForAll","isApproved","setApprovalForAll","ApproveOrder","makerAsset","takerAsset","dataType","_verifyParamAsset","_signed_data_and_sign","sig","typeMV","_approveTransferProxy","txHash","getTransactionReceipt","receipt","logs","sigTransfer721","sigTransfer1155","sigEvt","topics","blockNumber","address","isMinted","evtType","_lowLevelSend","_confirmTransaction","isConfirmed","encodeABI","_computeGasPrice","gasPrice","estimateGas","gas","sendTransaction","_call","decodeParameters","_method","outputs","getGasPrice","meanGas","weiToAdd","toBN","toWei","add","toString","event","description","testForSuccess","transactionEventData","_dispatch","delay","_pollCallbackForConfirmation","TransactionConfirmed","TransactionFailed","Promise","resolve","reject","initialRetries","testResolve","retries","wasSuccessful","emit","contractAbi","trace","addressesToVerify","one","typesToVrify","valuesToVerify","toFixed","partsToVerify","partToVerify","assetsToVerify","assetType","asset1","asset2","assetClass","number","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,eAEIA,OAAO,CAAC,WAAD,CAFX;AAAA,IACIC,YADJ,YACIA,YADJ;;AAGA,IAAMC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,gBAQIA,OAAO,CAAC,kBAAD,CARX;AAAA,IACIG,oBADJ,aACIA,oBADJ;AAAA,IAEIC,kBAFJ,aAEIA,kBAFJ;AAAA,IAGIC,2BAHJ,aAGIA,2BAHJ;AAAA,IAIIC,qBAJJ,aAIIA,qBAJJ;AAAA,IAKIC,GALJ,aAKIA,GALJ;AAAA,IAMIC,QANJ,aAMIA,QANJ;AAAA,IAOIC,SAPJ,aAOIA,SAPJ;;AAUA,gBAEIT,OAAO,CAAC,OAAD,CAFX;AAAA,IACIU,SADJ,aACIA,SADJ;;AAGA,gBAQIV,OAAO,CAAC,aAAD,CARX;AAAA,IACIW,eADJ,aACIA,eADJ;AAAA,IAEIC,YAFJ,aAEIA,YAFJ;AAAA,IAGIC,aAHJ,aAGIA,aAHJ;AAAA,IAIIC,KAJJ,aAIIA,KAJJ;AAAA,IAKIC,MALJ,aAKIA,MALJ;AAAA,IAMIC,OANJ,aAMIA,OANJ;AAAA,IAOIC,GAPJ,aAOIA,GAPJ;;AASA,gBAKIjB,OAAO,CAAC,SAAD,CALX;AAAA,IACIkB,OADJ,aACIA,OADJ;AAAA,IAEIC,SAFJ,aAEIA,SAFJ;AAAA,IAGIC,KAHJ,aAGIA,KAHJ;AAAA,IAIIC,KAJJ,aAIIA,KAJJ;;AAOA,gBAQIrB,OAAO,CAAC,aAAD,CARX;AAAA,IACIsB,WADJ,aACIA,WADJ;AAAA,IAEIC,eAFJ,aAEIA,eAFJ;AAAA,IAGIC,QAHJ,aAGIA,QAHJ;AAAA,IAIIC,iBAJJ,aAIIA,iBAJJ;AAAA,IAKIC,MALJ,aAKIA,MALJ;AAAA,IAMIC,OANJ,aAMIA,OANJ;AAAA,IAOIC,QAPJ,aAOIA,QAPJ;;AAWA,gBAEI5B,OAAO,CAAC,oBAAD,CAFX;AAAA,IACI6B,MADJ,aACIA,MADJ,C,CAEkC;;;IAG5BC,M;;;AACF,kBAAYC,QAAZ,EAA8C;AAAA,QAAxBC,SAAwB,uEAAZ,EAAY;AAAA,QAARC,MAAQ;;AAAA;;AAC1C;AAEA,QAAIC,MAAM,CAACC,IAAP,CAAYH,SAAZ,KAA0B,CAA9B,EAAiC;AAC7BA,MAAAA,SAAS,GAAGH,MAAZ;AACH;;AACD,QAAIO,MAAM,CAACL,QAAQ,CAACM,OAAV,CAAN,IAA4BL,SAAS,CAACK,OAA1C,EAAmD;AAC/C,YAAM,8DAAN;AACH;;AACD,SAAKC,WAAL,GAAmBN,SAAS,CAACM,WAA7B;AAEA,SAAKC,KAAL,GAAaP,SAAS,CAACO,KAAvB;AAEA,SAAKC,UAAL,GAAkBR,SAAS,CAACQ,UAA5B;AACA,SAAKC,cAAL,GAAsBT,SAAS,CAACS,cAAhC;AACA,SAAKC,eAAL,GAAuBV,SAAS,CAACU,eAAjC;AACA,SAAKC,gBAAL,GAAwBX,SAAS,CAACY,wBAAlC;AACA,SAAKC,oBAAL,GAA4Bb,SAAS,CAACa,oBAAtC;AACA,SAAKC,yBAAL,GAAiCd,SAAS,CAACc,yBAA3C;AAEA,QAAIC,gBAAgB,GAAG,CACnB,YADmB,EACL,gBADK,EACa,OADb,EACsB,aADtB,EACqC,qBADrC,EAEnB,iBAFmB,EAEA,0BAFA,EAE4B,sBAF5B,EAEoD,2BAFpD,CAAvB;AAIAA,IAAAA,gBAAgB,CAACC,OAAjB,CAAyB,UAAAC,QAAQ,EAAI;AACjC,UAAIjB,SAAS,CAACiB,QAAD,CAAT,IAAuBC,SAA3B,EAAsC;AAClC,8CAA+BD,QAA/B;AACH;AACJ,KAJD,EAxB0C,CA8B1C;;AACA,SAAKE,IAAL,GAAY,IAAIjD,IAAJ,CAAS6B,QAAT,CAAZ;AACA,SAAKqB,YAAL,GAAoB,IAAIlD,IAAJ,CAAS8B,SAAS,CAACqB,mBAAnB,CAApB;AACA,SAAKC,gBAAL,GAAwB,IAAIpD,IAAI,CAACqD,KAAL,CAAWC,EAAf,CAAkB,CAAlB,CAAxB;AAEAxB,IAAAA,SAAS,CAACmB,IAAV,GAAiB,KAAKC,YAAtB;AACA,SAAKK,GAAL,GAAW,IAAI/C,SAAJ,CAAcsB,SAAd,EAAyBC,MAAzB,CAAX;;AAEA,SAAKA,MAAL,GAAcA,MAAM,IAAK,UAAUyB,GAAV,EAAe;AACpC,aAAOA,GAAP;AACH,KAFD;;AAGA,SAAKC,QAAL,GAAgB,IAAI1D,YAAJ,EAAhB;AACH;;;;;mFAED,iBAAoB2D,MAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA4BC,gBAAAA,KAA5B,2DAAoC,EAApC;AAAwCC,gBAAAA,iBAAxC,2DAA4D,EAA5D;AAAgEC,gBAAAA,SAAhE,2DAA4E,EAA5E;;AACI,qBAAKC,mBAAL,CAAyB,CAACJ,MAAD,CAAzB;;AACA,oBAAIC,KAAJ,EAAW;AACP,uBAAKG,mBAAL,CAAyB,CAACH,KAAD,CAAzB;AACH,iBAFD,MAEO;AACHA,kBAAAA,KAAK,GAAGD,MAAR;AACH;;AAEGK,gBAAAA,EARR,GAQa,KAAKzB,UARlB;AASQ0B,gBAAAA,YATR,GASuB,KAAKC,qBAAL,CAA2B7C,WAA3B,EAAwC,KAAKkB,UAA7C,CATvB;AAYI;AACAuB,gBAAAA,SAAS,CAACf,OAAV,CAAkB,UAACoB,OAAD,EAAa;AAC3B;AACA,sBAAIC,gBAAgB,GAAG,KAAI,CAAClB,IAAL,CAAUI,KAAV,CAAgBe,SAAhB,CAA0BF,OAAO,CAAC,CAAD,CAAjC,CAAvB;;AACA,sBAAI,CAACC,gBAAL,EAAuB;AACnB,gFAAqDD,OAAO,CAAC,CAAD,CAA5D;AACH,mBAL0B,CAM3B;;;AACA,sBAAIG,IAAI,GAAGnC,MAAM,CAACgC,OAAO,CAAC,CAAD,CAAR,CAAjB;;AACA,sBAAII,KAAK,CAACD,IAAD,CAAL,IAAeA,IAAI,GAAG,CAAtB,IAA2BA,IAAI,GAAG,GAAtC,EAA2C;AAAE;AACzC,8EAAmDH,OAAO,CAAC,CAAD,CAA1D;AACH;AACJ,iBAXD;AAYAK,gBAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;;AACA,oBAAIA,SAAS,CAACY,MAAV,GAAmB,CAAvB,EAA0B;AACtB,uBAAKC,oBAAL,CAA0B,CAACb,SAAD,CAA1B;;AACAc,kBAAAA,QAAQ,GAAGX,YAAY,CAACY,OAAb,CAAqBC,mBAArB,CAAyClB,KAAzC,EAAgDC,iBAAhD,EAAmED,KAAnE,EAA0EE,SAA1E,CAAX,CAFsB,CAE0E;AACnG,iBAHD,MAGO;AACHc,kBAAAA,QAAQ,GAAGX,YAAY,CAACY,OAAb,CAAqBE,QAArB,CAA8BnB,KAA9B,EAAqCC,iBAArC,CAAX;AACH;;AAEKmB,gBAAAA,IAjCV,GAiCiBrB,MAjCjB;AAkCUsB,gBAAAA,MAlCV,GAkCmB,EAlCnB;AAAA;AAAA,uBAoCsB,KAAKC,yBAAL,CACdF,IADc,EACRhB,EADQ,EACJY,QADI,EACMK,MADN,EACc/D,SAAS,CAACiE,kBADxB,EAC4C,YAD5C,CApCtB;;AAAA;AAoCUC,gBAAAA,GApCV;;AAAA,qBAuCQA,GAAG,CAACC,MAvCZ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAwCqB,KAAKC,oBAAL,CAA0BF,GAAG,CAACG,EAAJ,CAAOC,eAAjC,CAxCrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;oFA4CA,kBAAwB7B,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAgCC,gBAAAA,KAAhC,8DAAwC,EAAxC;AAA4CC,gBAAAA,iBAA5C,8DAAgE,EAAhE;AAAoE4B,gBAAAA,EAApE,8DAAyE,CAAzE;AAA4EC,gBAAAA,QAA5E,8DAAuF,CAAvF;AAA0F5B,gBAAAA,SAA1F,8DAAsG,EAAtG;;AACI,qBAAKC,mBAAL,CAAyB,CAACJ,MAAD,CAAzB;;AACA,oBAAIC,KAAJ,EAAW;AACP,uBAAKG,mBAAL,CAAyB,CAACH,KAAD,CAAzB;AACH,iBAFD,MAEO;AACHA,kBAAAA,KAAK,GAAGD,MAAR;AACH;;AACD,qBAAKgC,sBAAL,CAA4B,CAACF,EAAD,EAAKC,QAAL,CAA5B;;AAEI1B,gBAAAA,EATR,GASa,KAAKxB,cATlB;AAUQyB,gBAAAA,YAVR,GAUuB,KAAKC,qBAAL,CAA2B5C,eAA3B,EAA4C,KAAKkB,cAAjD,CAVvB;;AAYI,oBAAIsB,SAAS,CAACY,MAAV,GAAmB,CAAvB,EAA0B;AACtB,uBAAKC,oBAAL,CAA0B,CAACb,SAAD,CAA1B;;AACAc,kBAAAA,QAAQ,GAAGX,YAAY,CAACY,OAAb,CAAqBC,mBAArB,CAAyClB,KAAzC,EAAgD6B,EAAhD,EAAoDC,QAApD,EAA8D,EAA9D,EAAkE9B,KAAlE,EAAyEE,SAAzE,CAAX,CAFsB,CAEyE;AAClG,iBAHD,MAGO;AACHc,kBAAAA,QAAQ,GAAGX,YAAY,CAACY,OAAb,CAAqBE,QAArB,CAA8BnB,KAA9B,EAAqC6B,EAArC,EAAyCC,QAAzC,EAAmD,EAAnD,CAAX;AACH;;AAEKV,gBAAAA,IAnBV,GAmBiBrB,MAnBjB;AAoBUsB,gBAAAA,MApBV,GAoBmB,EApBnB;AAAA;AAAA,uBAsBsB,KAAKC,yBAAL,CACdF,IADc,EACRhB,EADQ,EACJY,QADI,EACMK,MADN,EACc/D,SAAS,CAACiE,kBADxB,EAC4C,YAD5C,CAtBtB;;AAAA;AAsBUC,gBAAAA,GAtBV;;AAAA,qBAyBQA,GAAG,CAACC,MAzBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA0BqB,KAAKC,oBAAL,CAA0BF,GAAG,CAACG,EAAJ,CAAOC,eAAjC,CA1BrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qFA8BA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACII,gBAAAA,KADJ,QACIA,KADJ,EAEIC,QAFJ,QAEIA,QAFJ,EAGIC,iBAHJ,QAGIA,iBAHJ,EAIIC,OAJJ,QAIIA,OAJJ,uBAKIL,QALJ,EAKIA,QALJ,8BAKe,CALf,oCAOIM,KAPJ,EAOIA,KAPJ,2BAOYrF,YAPZ,eAQIsF,QARJ,QAQIA,QARJ,EASIC,iBATJ,QASIA,iBATJ,EAUIC,OAVJ,QAUIA,OAVJ,mBAYIC,IAZJ,EAYIA,IAZJ,0BAYWC,IAAI,CAACC,GAAL,EAZX,wCAcIC,aAdJ,EAcIA,aAdJ,mCAcoB,CAdpB,+CAeIC,WAfJ,EAeIA,WAfJ,iCAekB,CAflB;;AAiBI,oBAAIP,QAAQ,IAAIjF,GAAhB,EAAqB;AACjB,uBAAK+C,mBAAL,CAAyB,CAAC6B,KAAD,EAAQE,iBAAR,EAA2BE,KAA3B,CAAzB,EADiB,CAC2C;;AAC/D,iBAFD,MAEO;AACH,uBAAKjC,mBAAL,CAAyB,CAAC6B,KAAD,EAAQE,iBAAR,EAA2BE,KAA3B,EAAkCE,iBAAlC,CAAzB;AACH;;AACD,qBAAKO,kBAAL,CAAwB,CAACZ,QAAD,EAAWI,QAAX,CAAxB;;AACA,qBAAKN,sBAAL,CAA4B,CAACI,OAAD,EAAUI,OAAV,CAA5B;;AAvBJ,sBAyBQN,QAAQ,IAAI/E,MAzBpB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA0B8B,KAAK4F,eAAL,CAAqBZ,iBAArB,EAAwCC,OAAxC,CA1B9B;;AAAA;AA0BYY,gBAAAA,SA1BZ;;AAAA,sBA2BYA,SAAS,CAACC,WAAV,MAA2BhB,KAAK,CAACgB,WAAN,EA3BvC;AAAA;AAAA;AAAA;;AAAA,kDA4BmB;AACHvB,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,oBAAajB,KAAb,sCAA8Ce,SAA9C;AAFA,iBA5BnB;;AAAA;AAAA;AAAA;;AAAA;AAAA,sBAiCed,QAAQ,IAAI9E,OAjC3B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAkC8B,KAAK+F,YAAL,CAAkBlB,KAAlB,EAAyBE,iBAAzB,EAA4CC,OAA5C,CAlC9B;;AAAA;AAkCYgB,gBAAAA,SAlCZ;;AAAA,sBAmCYA,SAAS,GAAGrB,QAnCxB;AAAA;AAAA;AAAA;;AAAA,kDAoCmB;AACHL,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,oBAAajB,KAAb;AAFA,iBApCnB;;AAAA;AAAA;AAAA;;AAAA;AAAA,kDA0Ce;AACHP,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,oCAA6BhB,QAA7B;AAFA,iBA1Cf;;AAAA;AAiDUmB,gBAAAA,UAjDV,GAiDuB,EAjDvB,EAiD0B;;AAChBC,gBAAAA,OAlDV,GAkDoB,CACZ,CAACrB,KAAD,EAAQ,KAAR,CADY,CAlDpB,EAoDM;;AACIsB,gBAAAA,OArDV,GAqDoB1G,SAAS,CAAC,KAAK0C,IAAN,EAAY,CAAC+D,OAAD,EAAUD,UAAV,CAAZ,CArD7B,EAsDI;AACA;AACA;AACA;;AAEIG,gBAAAA,SA3DR,GA2DoB,KAAKC,aAAL,CAAmBvB,QAAnB,EAA6BC,iBAA7B,EAAgDC,OAAhD,CA3DpB;AA4DQsB,gBAAAA,SA5DR,GA4DoB,KAAKD,aAAL,CAAmBnB,QAAnB,EAA6BC,iBAA7B,EAAgDC,OAAhD,CA5DpB,EA6DI;;AA7DJ;AAAA,uBA8DsB,KAAKmB,oBAAL,CACd1B,KADc,EAEdxE,KAAK,CAACyE,QAAD,EAAWsB,SAAX,EAAsBzB,QAAtB,CAFS,EAEwB;AACtCM,gBAAAA,KAHc,EAId5E,KAAK,CAAC6E,QAAD,EAAWoB,SAAX,EAAsBlB,OAAtB,CAJS,EAIuB;AACrCC,gBAAAA,IALc,EAMdG,aANc,EAOdC,WAPc,EAQd5F,aARc,EASdsG,OATc,CA9DtB;;AAAA;AA8DU9B,gBAAAA,GA9DV;AAAA,kDA2EWA,GA3EX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QA8EA;;;;;4FACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIQ,gBAAAA,KADJ,SACIA,KADJ,EAEIC,QAFJ,SAEIA,QAFJ,EAGIC,iBAHJ,SAGIA,iBAHJ,EAIIC,OAJJ,SAIIA,OAJJ,EAMIwB,WANJ,SAMIA,WANJ,qBAQInB,IARJ,EAQIA,IARJ,2BAQW,CARX,mCASIoB,KATJ,EASIA,KATJ,4BASY,CATZ,kCAUIC,GAVJ,EAUIA,GAVJ,0BAUU,CAVV;AAYIjD,gBAAAA,OAAO,CAACC,GAAR,qEAEQmB,KAFR,gCAGWC,QAHX,yCAIoBC,iBAJpB,+BAKUC,OALV,mCAMcwB,WANd;;AAQA,oBAAI1B,QAAQ,IAAI7E,GAAhB,EAAqB;AACjB,uBAAK+C,mBAAL,CAAyB,CAAC6B,KAAD,CAAzB;AACH,iBAFD,MAEO;AACH,uBAAK7B,mBAAL,CAAyB,CAAC6B,KAAD,EAAQE,iBAAR,CAAzB;AACH;;AACD,qBAAKW,kBAAL,CAAwB,CAACZ,QAAD,CAAxB;;AACA,qBAAKF,sBAAL,CAA4B,CAACI,OAAD,EAAUwB,WAAV,CAA5B;;AAEIV,gBAAAA,GA5BR,GA4Bc,EA5Bd;AA6BUG,gBAAAA,UA7BV,GA6BuB,EA7BvB;AA8BUC,gBAAAA,OA9BV,GA8BoB,CACZ,CAACrB,KAAD,EAAQ,KAAR,CADY,CA9BpB,EAgCM;;AACIsB,gBAAAA,OAjCV,GAiCoB1G,SAAS,CAAC,KAAK0C,IAAN,EAAY,CAAC+D,OAAD,EAAUD,UAAV,CAAZ,CAjC7B,EAmCI;;AAnCJ;AAAA,uBAoC4B,KAAKxD,GAAL,CAASkE,YAAT,CAAsB;AAC1CjC,kBAAAA,EAAE,EAAE8B;AADsC,iBAAtB,CApC5B;;AAAA;AAoCUI,gBAAAA,SApCV;AAsCO;AAECC,gBAAAA,SAxCR,GAwCoB,KAAKR,aAAL,CAAmBvB,QAAnB,EAA6BC,iBAA7B,EAAgDC,OAAhD,CAxCpB;AAyCQ8B,gBAAAA,SAzCR,GAyCoBzG,KAAK,CAACyE,QAAD,EAAW+B,SAAX,EAAsB7B,OAAtB,CAzCzB;;AA0CI,qBAAK+B,gBAAL,CAAsBD,SAAtB,EAAiCF,SAAS,CAACI,KAAV,CAAgBC,SAAjD;;AACAxD,gBAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB2B,IAApB,EA3CJ,CA4CI;;AA5CJ;AAAA,uBA6C4B,KAAKkB,oBAAL,CACpB1B,KADoB,EAEpBiC,SAFoB,EAGpBF,SAAS,CAACI,KAAV,CAAgBnC,KAHI,EAIpB+B,SAAS,CAACI,KAAV,CAAgBF,SAJI,EAIO;AAC3BzB,gBAAAA,IALoB,EAMpBoB,KANoB,EAOpBC,GAPoB,EAQpB7G,aARoB,EASpBsG,OAToB,CA7C5B;;AAAA;AA6CQe,gBAAAA,WA7CR;AAyDQC,gBAAAA,KAzDR,GAyDgBrC,QAAQ,IAAI7E,GAAZ,GAAkB+E,OAAlB,GAA4B,CAzD5C,EAyD8C;;AAC1CvB,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B0D,IAAI,CAACC,SAAL,CAAeT,SAAS,CAACI,KAAzB,CAA/B,EAAgE,yBAAhE,EAA2FI,IAAI,CAACC,SAAL,CAAeT,SAAS,CAACU,SAAzB,CAA3F,EAAgI,sBAAhI,EAAwJF,IAAI,CAACC,SAAL,CAAeH,WAAW,CAACF,KAA3B,CAAxJ,EAA2L,0BAA3L,EAAuNI,IAAI,CAACC,SAAL,CAAeH,WAAW,CAACI,SAA3B,CAAvN,EAA8P,OAA9P,EAAuQzC,KAAvQ,EAA8Q,OAA9Q,EAAuRsC,KAAvR,EA1DJ,CA2DI;;AA3DJ;AAAA,uBA4DyB,KAAKI,YAAL,CACjBX,SAAS,CAACI,KADO,EACAJ,SAAS,CAACU,SADV,EACqBJ,WAAW,CAACF,KADjC,EACwCE,WAAW,CAACI,SADpD,EAEjBzC,KAFiB,EAEVsC,KAFU,CA5DzB;;AAAA;AA4DQK,gBAAAA,QA5DR;AAAA,kDAiEW;AACHlD,kBAAAA,MAAM,EAAEkD,QAAQ,CAAClD,MADd;AAEHwB,kBAAAA,GAAG,EAAE;AAFF,iBAjEX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;mFACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIN,gBAAAA,aADJ,SACIA,aADJ,EAEIC,WAFJ,SAEIA,WAFJ,EAGIZ,KAHJ,SAGIA,KAHJ,EAIIC,QAJJ,SAIIA,QAJJ,EAKIC,iBALJ,SAKIA,iBALJ,EAMIC,OANJ,SAMIA,OANJ,yBAOIL,QAPJ,EAOIA,QAPJ,+BAOe,CAPf,uCASIM,KATJ,EASIA,KATJ,4BASYrF,YATZ,gBAUIsF,QAVJ,SAUIA,QAVJ,EAWIC,iBAXJ,SAWIA,iBAXJ,EAYIsC,YAZJ,SAYIA,YAZJ,2BAcIC,UAdJ,EAcIA,UAdJ,iCAciB,CAdjB,iDAeIC,aAfJ,EAeIA,aAfJ,oCAeoB,IAfpB,qDAgBIC,cAhBJ,EAgBIA,cAhBJ,qCAgBqB,CAAC,CAhBtB;;AAkBI,qBAAK5E,mBAAL,CAAyB,CAAC6B,KAAD,EAAQE,iBAAR,EAA2BE,KAA3B,CAAzB;;AACA,qBAAKS,kBAAL,CAAwB,CAACZ,QAAD,EAAWI,QAAX,CAAxB;;AACA,qBAAKN,sBAAL,CAA4B,CAACI,OAAD,EAAUL,QAAV,EAAoBa,aAApB,EAAmCC,WAAnC,EAAgDgC,YAAhD,EAA8DA,YAA9D,CAA5B;;AApBJ,sBAsBQ3C,QAAQ,IAAI/E,MAtBpB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAuB8B,KAAK4F,eAAL,CAAqBZ,iBAArB,EAAwCC,OAAxC,CAvB9B;;AAAA;AAuBYY,gBAAAA,SAvBZ;;AAAA,sBAwBYA,SAAS,CAACC,WAAV,MAA2BhB,KAAK,CAACgB,WAAN,EAxBvC;AAAA;AAAA;AAAA;;AAAA,kDAyBmB;AACHvB,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,oBAAajB,KAAb,sCAA8Ce,SAA9C;AAFA,iBAzBnB;;AAAA;AAAA;AAAA;;AAAA;AAAA,sBA8Bed,QAAQ,IAAI9E,OA9B3B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA+B8B,KAAK+F,YAAL,CAAkBlB,KAAlB,EAAyBE,iBAAzB,EAA4CC,OAA5C,CA/B9B;;AAAA;AA+BYgB,gBAAAA,SA/BZ;;AAAA,sBAgCYA,SAAS,GAAGrB,QAhCxB;AAAA;AAAA;AAAA;;AAAA,kDAiCmB;AACHL,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,oBAAajB,KAAb;AAFA,iBAjCnB;;AAAA;AAAA;AAAA;;AAAA;AAAA,kDAuCe;AACHP,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,oCAA6BhB,QAA7B;AAFA,iBAvCf;;AAAA;AA6CQ+C,gBAAAA,YA7CR,GA6CuB,IA7CvB;AA8CQ/B,gBAAAA,GA9CR,GA8Cc,EA9Cd;;AAAA,sBAgDQ4B,UAAU,IAAI,CAhDtB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAiD6B,KAAKI,eAAL,CAAqB;AACtCjD,kBAAAA,KAAK,EAALA,KADsC;AAEtCC,kBAAAA,QAAQ,EAARA,QAFsC;AAGtCC,kBAAAA,iBAAiB,EAAjBA,iBAHsC;AAItCC,kBAAAA,OAAO,EAAPA,OAJsC;AAKtCC,kBAAAA,KAAK,EAALA,KALsC;AAMtCC,kBAAAA,QAAQ,EAARA,QANsC;AAOtCC,kBAAAA,iBAAiB,EAAjBA,iBAPsC;AAQtCC,kBAAAA,OAAO,EAAEsC,UAR6B;AAStC/C,kBAAAA,QAAQ,EAARA,QATsC;AAUtC8B,kBAAAA,KAAK,EAAEjB,aAV+B;AAWtCkB,kBAAAA,GAAG,EAAEjB;AAXiC,iBAArB,CAjD7B;;AAAA;AAiDQoC,gBAAAA,YAjDR;;AA+DQ,oBAAI,CAACA,YAAY,CAACvD,MAAlB,EAA0B;AACtBb,kBAAAA,OAAO,CAACsE,KAAR,CAAcF,YAAY,CAAC/B,GAA3B;AACAA,kBAAAA,GAAG,kBAAW+B,YAAY,CAAC/B,GAAxB,CAAH;AACH,iBAlET,CAmEQ;;;AAnER;AAAA,kFA4EW+B,YA5EX;AA6EQ/B,kBAAAA,GAAG,EAAHA;AA7ER;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;oFAiFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACIjB,gBAAAA,KADJ,SACIA,KADJ,EAEIC,QAFJ,SAEIA,QAFJ,EAGIC,iBAHJ,SAGIA,iBAHJ,EAIIC,OAJJ,SAIIA,OAJJ,EASIgD,SATJ,SASIA,SATJ;;AAAA,sBAWQlD,QAAQ,IAAI7E,GAXpB;AAAA;AAAA;AAAA;;AAAA,kDAYe;AACHqE,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,EAAE;AAFF,iBAZf;;AAAA;AAiBI,qBAAK9C,mBAAL,CAAyB,CAAC6B,KAAD,EAAQE,iBAAR,CAAzB;;AACA,qBAAKW,kBAAL,CAAwB,CAACZ,QAAD,CAAxB;;AACA,qBAAKF,sBAAL,CAA4B,CAACI,OAAD,EAAUgD,SAAV,CAA5B;;AAEM/B,gBAAAA,UArBV,GAqBuB,EArBvB;AAsBUC,gBAAAA,OAtBV,GAsBoB,CACZ,CAACrB,KAAD,EAAQ,KAAR,CADY,CAtBpB,EAwBM;;AACIsB,gBAAAA,OAzBV,GAyBoB1G,SAAS,CAAC,KAAK0C,IAAN,EAAY,CAAC+D,OAAD,EAAUD,UAAV,CAAZ,CAzB7B;AAAA;AAAA,uBA2B6B,KAAKxD,GAAL,CAASwF,eAAT,CAAyB;AAC9CvD,kBAAAA,EAAE,EAAEsD;AAD0C,iBAAzB,CA3B7B;;AAAA;AA2BQE,gBAAAA,YA3BR;AA+BQrB,gBAAAA,SA/BR,GA+BoB,KAAKR,aAAL,CAAmBvB,QAAnB,EAA6BC,iBAA7B,EAAgDC,OAAhD,CA/BpB;AAgCQ8B,gBAAAA,SAhCR,GAgCoBzG,KAAK,CAACyE,QAAD,EAAW+B,SAAX,EAAsB7B,OAAtB,CAhCzB;;AAoCI,oBAAI,CAACkD,YAAY,CAACC,iBAAlB,EAAqC;AACjCC,kBAAAA,iBAAiB,GAAGF,YAAY,CAAClB,KAAb,CAAmBF,SAAvC;AACAuB,kBAAAA,WAAW,GAAGH,YAAY,CAAClB,KAAb,CAAmBnC,KAAjC;AACH,iBAHD,MAGO;AACHwD,kBAAAA,WAAW,GAAGH,YAAY,CAAClB,KAAb,CAAmBnC,KAAjC;AACAuD,kBAAAA,iBAAiB,GAAGF,YAAY,CAAClB,KAAb,CAAmBF,SAAvC;AACH,iBA1CL,CA4CI;AACA;;;AA7CJ;AAAA,uBA8CsB,KAAKP,oBAAL,CACd1B,KADc,EAEdiC,SAFc,EAGduB,WAHc,EAIdD,iBAJc,EAKd,CALc,EAKX,CALW,EAKR,CALQ,EAMdvI,aANc,EAOdsG,OAPc,CA9CtB;;AAAA;AA8CU9B,gBAAAA,GA9CV;AAAA,kDAwDWA,GAxDX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;oFA2DA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIQ,gBAAAA,KADJ,SACIA,KADJ,EAEIC,QAFJ,SAEIA,QAFJ,EAGIC,iBAHJ,SAGIA,iBAHJ,EAIIC,OAJJ,SAIIA,OAJJ,yBAKIL,QALJ,EAKIA,QALJ,+BAKe,CALf,mBAOI2D,KAPJ,SAOIA,KAPJ;;AASI,qBAAKtF,mBAAL,CAAyB,CAAC6B,KAAD,EAAQE,iBAAR,CAAzB;;AACA,qBAAKW,kBAAL,CAAwB,CAACZ,QAAD,CAAxB;;AACA,qBAAKF,sBAAL,CAA4B,CAACI,OAAD,EAAUsD,KAAV,EAAiB3D,QAAjB,CAA5B;;AAEMsB,gBAAAA,UAbV,GAauB,EAbvB;AAcUC,gBAAAA,OAdV,GAcoB,CACZ,CAACrB,KAAD,EAAQ,KAAR,CADY,CAdpB;AAiBUsB,gBAAAA,OAjBV,GAiBoB1G,SAAS,CAAC,KAAK0C,IAAN,EAAY,CAAC+D,OAAD,EAAUD,UAAV,CAAZ,CAjB7B;AAAA;AAAA,uBAmByB,KAAKxD,GAAL,CAAS8F,WAAT,CAAqB;AACtC7D,kBAAAA,EAAE,EAAE4D;AADkC,iBAArB,CAnBzB;;AAAA;AAmBQE,gBAAAA,QAnBR;AAuBQ3B,gBAAAA,SAvBR,GAuBoB,KAAKR,aAAL,CAAmBvB,QAAnB,EAA6BC,iBAA7B,EAAgDC,OAAhD,CAvBpB;AAwBQ8B,gBAAAA,SAxBR,GAwBoBzG,KAAK,CAACyE,QAAD,EAAW+B,SAAX,EAAsBlC,QAAtB,CAxBzB;;AAyBI,qBAAKoC,gBAAL,CAAsBD,SAAtB,EAAiC0B,QAAQ,CAACxB,KAAT,CAAeC,SAAhD;;AAzBJ;AAAA,uBA2BmC,KAAKV,oBAAL,CAC3B1B,KAD2B,EAE3BiC,SAF2B,EAG3B0B,QAAQ,CAACxB,KAAT,CAAenC,KAHY,EAI3B2D,QAAQ,CAACxB,KAAT,CAAeF,SAJY,EAK3B,CAL2B,EAKxB,CALwB,EAKrB,CALqB,EAM3BjH,aAN2B,EAMZsG,OANY,CA3BnC;;AAAA;AA2BUsC,gBAAAA,gBA3BV;AAAA;AAAA,uBAoCoB,KAAKlB,YAAL,CACZkB,gBAAgB,CAACzB,KADL,EACYyB,gBAAgB,CAACnB,SAD7B,EACwCkB,QAAQ,CAACxB,KADjD,EACwDwB,QAAQ,CAAClB,SADjE,EAEZzC,KAFY,CApCpB;;AAAA;AAoCQR,gBAAAA,GApCR;AAAA,kDAwCWA,GAxCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QA2CA;;;;;sFACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIQ,gBAAAA,KADJ,SACIA,KADJ,EAEIC,QAFJ,SAEIA,QAFJ,EAGIC,iBAHJ,SAGIA,iBAHJ,EAIIC,OAJJ,SAIIA,OAJJ,EAMIC,KANJ,SAMIA,KANJ,EAOIC,QAPJ,SAOIA,QAPJ,EAQIC,iBARJ,SAQIA,iBARJ,EASIC,OATJ,SASIA,OATJ,yBAUIT,QAVJ,EAUIA,QAVJ,+BAUe,CAVf,sCAWIU,IAXJ,EAWIA,IAXJ,2BAWWC,IAAI,CAACC,GAAL,EAXX;;AAAA,sBAaQT,QAAQ,IAAI7E,GAbpB;AAAA;AAAA;AAAA;;AAAA,kDAce;AACHqE,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,EAAE;AAFF,iBAdf;;AAAA;AAmBI,qBAAK9C,mBAAL,CAAyB,CAAC6B,KAAD,EAAQE,iBAAR,EAA2BE,KAA3B,EAAkCE,iBAAlC,CAAzB;;AACA,qBAAKO,kBAAL,CAAwB,CAACZ,QAAD,EAAWI,QAAX,CAAxB;;AACA,qBAAKN,sBAAL,CAA4B,CAACI,OAAD,EAAUI,OAAV,EAAmBT,QAAnB,EAA6BU,IAA7B,CAA5B;;AAEMY,gBAAAA,UAvBV,GAuBuB,EAvBvB;AAwBUC,gBAAAA,OAxBV,GAwBoB,CACZ,CAACrB,KAAD,EAAQ,KAAR,CADY,CAxBpB,EA0BM;;AACIsB,gBAAAA,OA3BV,GA2BoB1G,SAAS,CAAC,KAAK0C,IAAN,EAAY,CAAC+D,OAAD,EAAUD,UAAV,CAAZ,CA3B7B;AA6BQY,gBAAAA,SA7BR,GA6BoB,KAAKR,aAAL,CAAmBvB,QAAnB,EAA6BC,iBAA7B,EAAgDC,OAAhD,CA7BpB;AA8BQ0D,gBAAAA,WA9BR,GA8BsB,KAAKrC,aAAL,CAAmBnB,QAAnB,EAA6BC,iBAA7B,EAAgDC,OAAhD,CA9BtB,EA+BI;;AA/BJ;AAAA,uBAgCsB,KAAKmB,oBAAL,CACd1B,KADc,EAEdxE,KAAK,CAACyE,QAAD,EAAW+B,SAAX,EAAsB7B,OAAtB,CAFS,EAGdC,KAHc,EAId5E,KAAK,CAAC6E,QAAD,EAAWwD,WAAX,EAAwB/D,QAAxB,CAJS,EAI0B;AACxCU,gBAAAA,IALc,EAMd,CANc,EAOd,CAPc,EAQdxF,aARc,EASdsG,OATc,CAhCtB;;AAAA;AAgCU9B,gBAAAA,GAhCV;AAAA,kDA4CWA,GA5CX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QA+CA;;;;;+FACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIQ,gBAAAA,KADJ,SACIA,KADJ,EAEIC,QAFJ,SAEIA,QAFJ,EAGIC,iBAHJ,SAGIA,iBAHJ,EAIIC,OAJJ,SAIIA,OAJJ,yBAKIL,QALJ,EAKIA,QALJ,+BAKe,CALf,mBAOIgE,OAPJ,SAOIA,OAPJ;;AASI,qBAAK3F,mBAAL,CAAyB,CAAC6B,KAAD,EAAQE,iBAAR,CAAzB;;AACA,qBAAKW,kBAAL,CAAwB,CAACZ,QAAD,CAAxB;;AACA,qBAAKF,sBAAL,CAA4B,CAACI,OAAD,EAAU2D,OAAV,EAAmBhE,QAAnB,CAA5B;;AAEMsB,gBAAAA,UAbV,GAauB,EAbvB;AAcUC,gBAAAA,OAdV,GAcoB,CACZ,CAACrB,KAAD,EAAQ,KAAR,CADY,CAdpB;AAkBUsB,gBAAAA,OAlBV,GAkBoB1G,SAAS,CAAC,KAAK0C,IAAN,EAAY,CAAC+D,OAAD,EAAUD,UAAV,CAAZ,CAlB7B;AAAA;AAAA,uBAmB2B,KAAKxD,GAAL,CAASmG,aAAT,CAAuB;AAC1ClE,kBAAAA,EAAE,EAAEiE;AADsC,iBAAvB,CAnB3B;;AAAA;AAmBQE,gBAAAA,UAnBR;AAuBQhC,gBAAAA,SAvBR,GAuBoB,KAAKR,aAAL,CAAmBvB,QAAnB,EAA6BC,iBAA7B,EAAgDC,OAAhD,CAvBpB;AAwBQ8B,gBAAAA,SAxBR,GAwBoBzG,KAAK,CAACyE,QAAD,EAAW+B,SAAX,EAAsBlC,QAAtB,CAxBzB;;AAyBI,qBAAKoC,gBAAL,CAAsBD,SAAtB,EAAiC+B,UAAU,CAAC7B,KAAX,CAAiBC,SAAlD;;AAzBJ;AAAA,uBA2BiC,KAAKV,oBAAL,CACzB1B,KADyB,EAEzBiC,SAFyB,EAGzB+B,UAAU,CAAC7B,KAAX,CAAiBnC,KAHQ,EAIzBgE,UAAU,CAAC7B,KAAX,CAAiBF,SAJQ,EAKzB,CALyB,EAKtB,CALsB,EAKnB,CALmB,EAMzBjH,aANyB,EAMVsG,OANU,CA3BjC;;AAAA;AA2BU2C,gBAAAA,cA3BV;AAAA;AAAA,uBAsCoB,KAAKvB,YAAL,CACZuB,cAAc,CAAC9B,KADH,EACU8B,cAAc,CAACxB,SADzB,EACoCuB,UAAU,CAAC7B,KAD/C,EACsD6B,UAAU,CAACvB,SADjE,EAEZzC,KAFY,CAtCpB;;AAAA;AAsCQR,gBAAAA,GAtCR;AAAA,kDA0CWA,GA1CX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QA6CA;;;;;iFACA,mBAAkB2C,KAAlB,EAAyBqB,WAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI;AACA;AACMU,gBAAAA,QAHV,GAGqB,KAAK5F,qBAAL,CAA2B3C,QAA3B,EAAqC,KAAKkB,eAA1C,CAHrB;AAIQmC,gBAAAA,QAJR,GAImBkF,QAAQ,CAACjF,OAAT,CAAiBkF,MAAjB,CAAwBhC,KAAxB,CAJnB;AAAA;AAAA,uBAKoB,KAAK7C,yBAAL,CACZkE,WADY,EACC,KAAK3G,eADN,EACuBmC,QADvB,EACiC,EADjC,EAEZ1D,SAAS,CAAC8I,WAFE,EAEW,aAFX,CALpB;;AAAA;AAKQC,gBAAAA,GALR;AAAA,mDASWA,GATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAYA;AAEA;;;;;kFAEA,mBAAmBC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA4BC,gBAAAA,eAA5B,iEAA8C,CAA9C;AAAiDC,gBAAAA,OAAjD,iEAA2D,CAA3D;;AAAgE;AAC5D,qBAAKrG,mBAAL,CAAyB,CAACmG,OAAD,CAAzB;;AACA,qBAAKvE,sBAAL,CAA4B,CAACyE,OAAD,CAA5B;;AAFJ,sBAIQD,eAAe,IAAI,CAJ3B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKqB,KAAKjH,IAAL,CAAUmH,GAAV,CAAcC,UAAd,CAAyBJ,OAAzB,CALrB;;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAUgC,KAAKK,QAAL,CAAcJ,eAAd,CAVhC;;AAAA;AAUUK,gBAAAA,aAVV;;AAAA,sBAWQA,aAAa,IAAI,IAXzB;AAAA;AAAA;AAAA;;AAAA,sBAYYJ,OAAO,GAAG,CAZtB;AAAA;AAAA;AAAA;;AAAA,sBAakB,6BAblB;;AAAA;AAecK,gBAAAA,QAfd,GAeyB,KAAKvG,qBAAL,CAA2BvC,QAA3B,EAAqCwI,eAArC,CAfzB;AAAA;AAAA,uBAgBqBM,QAAQ,CAAC5F,OAAT,CAAiBkC,SAAjB,CAA2BmD,OAA3B,EAAoCE,OAApC,EAA6CM,IAA7C,EAhBrB;;AAAA;AAAA;;AAAA;AAAA,sBAiBeF,aAAa,IAAI,EAAjB,IAAuBA,aAAa,IAAI,GAjBvD;AAAA;AAAA;AAAA;;AAiB8D;AAChDC,gBAAAA,SAlBd,GAkByB,KAAKvG,qBAAL,CAA2BzC,MAA3B,EAAmC0I,eAAnC,CAlBzB;AAAA;AAAA,uBAmBqBM,SAAQ,CAAC5F,OAAT,CAAiBkC,SAAjB,CAA2BmD,OAA3B,EAAoCQ,IAApC,EAnBrB;;AAAA;AAAA;;AAAA;AAAA,gCAqBiBP,eArBjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qFAyBA,mBAAsBA,eAAtB,EAAuCC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKrG,mBAAL,CAAyB,CAACoG,eAAD,CAAzB;;AACA,qBAAKxE,sBAAL,CAA4B,CAACyE,OAAD,CAA5B;;AAFJ;AAIYO,gBAAAA,SAJZ,GAIwB,KAAKzG,qBAAL,CAA2B7C,WAA3B,EAAwC8I,eAAxC,CAJxB;AAAA;AAAA,uBAKqBQ,SAAS,CAAC9F,OAAV,CAAkB+F,OAAlB,CAA0BR,OAA1B,EAAmCM,IAAnC,EALrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,oFAOgDP,eAAe,EAAEC,OAPjE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8EAWA,mBAAeD,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKpG,mBAAL,CAAyB,CAACoG,eAAD,CAAzB;;AAEMU,gBAAAA,QAHV,GAGqB,YAHrB;AAIUC,gBAAAA,SAJV,GAIsB,YAJtB;AAKUC,gBAAAA,QALV,GAKqB,KAAK7G,qBAAL,CAA2BxC,OAA3B,EAAoCyI,eAApC,CALrB;AAAA;AAAA;AAAA,uBAQ0BY,QAAQ,CAAClG,OAAT,CAAiBmG,iBAAjB,CAAmCH,QAAnC,EAA6CH,IAA7C,EAR1B;;AAAA;AAQYO,gBAAAA,KARZ;;AAAA,qBASYA,KATZ;AAAA;AAAA;AAAA;;AAAA,mDAUmB,GAVnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaQ;AACMC,gBAAAA,SAdd,GAc0B,KAAKhH,qBAAL,CAA2BzC,MAA3B,EAAmC0I,eAAnC,CAd1B;AAAA;AAAA;AAAA,uBAgB0Be,SAAS,CAACrG,OAAV,CAAkBsG,WAAlB,GAAgCT,IAAhC,EAhB1B;;AAAA;AAgBgBU,gBAAAA,CAhBhB;AAAA;AAAA,uBAiB0BF,SAAS,CAACrG,OAAV,CAAkBkC,SAAlB,CAA4BpG,YAA5B,EAA0C+J,IAA1C,EAjB1B;;AAAA;AAiBgBU,gBAAAA,CAjBhB;AAAA,mDAmBmB,EAnBnB;;AAAA;AAAA;AAAA;AAAA,mDAqBmB,IArBnB;;AAAA;AAAA;AAAA,uBAyBuBL,QAAQ,CAAClG,OAAT,CAAiBmG,iBAAjB,CAAmCF,SAAnC,EAA8CJ,IAA9C,EAzBvB;;AAAA;AAyBQW,gBAAAA,MAzBR;;AAAA,qBA0BQA,MA1BR;AAAA;AAAA;AAAA;;AAAA,mDA2Be,IA3Bf;;AAAA;AAAA,mDA8BW,IA9BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAiCA;AACA;AACA;;;;;uFACA,mBAAwBlB,eAAxB,EAAyCC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKrG,mBAAL,CAAyB,CAACoG,eAAD,CAAzB;;AACA,qBAAKxE,sBAAL,CAA4B,CAACyE,OAAD,CAA5B,EAFJ,CAII;;;AACMkB,gBAAAA,WALV,GAKwB,KAAKpH,qBAAL,CAA2B7C,WAA3B,EAAwC8I,eAAxC,CALxB;AAAA;AAAA,uBAMuBmB,WAAW,CAACzG,OAAZ,CAAoB0G,eAApB,CAAoCnB,OAApC,EAA6CM,IAA7C,EANvB;;AAAA;AAMQc,gBAAAA,MANR;;AAAA,sBAOQA,MAAM,IAAIA,MAAM,IAAI7K,YAP5B;AAAA;AAAA;AAAA;;AAQQ6D,gBAAAA,OAAO,CAACC,GAAR,kDAAsD2F,OAAtD,gCAAmFoB,MAAnF;AARR,mDASeA,MATf;;AAAA;AAUM;AAEIC,gBAAAA,iBAZV,GAY8B,KAAKvH,qBAAL,CAA2B1C,iBAA3B,EAA8C,KAAKkB,gBAAnD,CAZ9B;AAAA;AAAA,uBAaiB+I,iBAAiB,CAAC5G,OAAlB,CAA0B6G,iBAA1B,CAA4CvB,eAA5C,EAA6DC,OAA7D,EAAsEM,IAAtE,EAbjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kFAgBA,mBAAmBP,eAAnB,EAAoCC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKrG,mBAAL,CAAyB,CAACoG,eAAD,CAAzB;;AACA,qBAAKxE,sBAAL,CAA4B,CAACyE,OAAD,CAA5B,EAFJ,CAII;;;AACMkB,gBAAAA,WALV,GAKwB,KAAKpH,qBAAL,CAA2B7C,WAA3B,EAAwC8I,eAAxC,CALxB;AAAA;AAAA,uBAM0BmB,WAAW,CAACzG,OAAZ,CAAoB8G,YAApB,CAAiCvB,OAAjC,EAA0CM,IAA1C,EAN1B;;AAAA;AAMQ5G,gBAAAA,SANR;;AAAA,sBAOQA,SAAS,CAACY,MAAV,GAAmB,CAP3B;AAAA;AAAA;AAAA;;AAQQF,gBAAAA,OAAO,CAACC,GAAR,gDAAoD2F,OAApD,2BAA4EtG,SAA5E;AARR,mDASeA,SATf;;AAAA;AAUM;AAEI2H,gBAAAA,iBAZV,GAY8B,KAAKvH,qBAAL,CAA2B1C,iBAA3B,EAA8C,KAAKkB,gBAAnD,CAZ9B;AAAA;AAAA,uBAaiB+I,iBAAiB,CAAC5G,OAAlB,CAA0B8G,YAA1B,CAAuCxB,eAAvC,EAAwDC,OAAxD,EAAiEM,IAAjE,EAbjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;gGAgBA,mBAAiCP,eAAjC,EAAkDC,OAAlD,EAA2DwB,QAA3D,EAAqE5G,IAArE;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKjB,mBAAL,CAAyB,CAACoG,eAAD,EAAkByB,QAAlB,EAA4B5G,IAA5B,CAAzB;;AACA,qBAAKW,sBAAL,CAA4B,CAACyE,OAAD,CAA5B;;AAEIwB,gBAAAA,QAJR,GAImBA,QAAQ,CAACC,WAAT,EAJnB;AAAA;AAAA,uBAK4B,KAAKH,iBAAL,CAAuBvB,eAAvB,EAAwCC,OAAxC,CAL5B;;AAAA;AAKQ0B,gBAAAA,WALR;;AAAA,sBAMQA,WAAW,CAACD,WAAZ,MAA6BD,QANrC;AAAA;AAAA;AAAA;;AAAA,mDAOe;AACHvG,kBAAAA,MAAM,EAAE,IADL;AAEHyG,kBAAAA,WAAW,EAAXA;AAFG,iBAPf;;AAAA;AAAA;AAecR,gBAAAA,WAfd,GAe4B,KAAKpH,qBAAL,CAA2B7C,WAA3B,EAAwC8I,eAAxC,CAf5B;AAgBYvF,gBAAAA,QAhBZ,GAgBuB0G,WAAW,CAACzG,OAAZ,CAAoBkH,wBAApB,CAA6C3B,OAA7C,EAAsDwB,QAAtD,CAhBvB;AAAA;AAAA,uBAiBwB,KAAK1G,yBAAL,CACZF,IADY,EACNmF,eADM,EACWvF,QADX,EACqB,EADrB,EAEZ1D,SAAS,CAAC8K,0BAFE,EAE0B,8BAF1B,CAjBxB;;AAAA;AAiBY/B,gBAAAA,GAjBZ;;AAAA,sBAqBYA,GAAG,CAAC5E,MAAJ,IAAc,IArB1B;AAAA;AAAA;AAAA;;AAAA,mFAuBmB4E,GAvBnB;AAwBgB6B,kBAAAA,WAAW,EAAXA;AAxBhB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4BQtH,gBAAAA,OAAO,CAACsE,KAAR;;AA5BR;AA8BI;AAEM2C,gBAAAA,iBAhCV,GAgC8B,KAAKvH,qBAAL,CAA2B1C,iBAA3B,EAA8C,KAAKkB,gBAAnD,CAhC9B;AAiCQkC,gBAAAA,QAjCR,GAiCmB6G,iBAAiB,CAAC5G,OAAlB,CAA0BoH,0BAA1B,CAAqD9B,eAArD,EAAsEC,OAAtE,EAA+EwB,QAA/E,CAjCnB;AAAA;AAAA,uBAkCoB,KAAK1G,yBAAL,CACZF,IADY,EACN,KAAKtC,gBADC,EACiBkC,QADjB,EAC2B,EAD3B,EAEZ1D,SAAS,CAAC8K,0BAFE,EAE0B,8BAF1B,CAlCpB;;AAAA;AAkCQ/B,gBAAAA,GAlCR;AAAA,mFAuCWA,GAvCX;AAwCQ6B,kBAAAA,WAAW,EAAXA;AAxCR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qFA4CA,mBAAsB3B,eAAtB,EAAuCC,OAAvC,EAAgD8B,YAAhD,EAA8DlH,IAA9D;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKjB,mBAAL,CAAyB,CAACoG,eAAD,EAAkBnF,IAAlB,CAAzB;;AACA,qBAAKW,sBAAL,CAA4B,CAACyE,OAAD,CAA5B;;AACA,qBAAKzF,oBAAL,CAA0B,CAACuH,YAAD,CAA1B,EAHJ,CAG8C;;;AAH9C;AAAA;AAAA,uBAO2B,KAAKxF,eAAL,CAAqByD,eAArB,EAAsCC,OAAtC,CAP3B;;AAAA;AAOQ+B,gBAAAA,UAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,mDASe;AACH9G,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG,0CAAmCsB,IAAI,CAACC,SAAL,eAAnC;AAFA,iBATf;;AAAA;AAcI;AAEIpD,gBAAAA,IAhBR,GAgBeA,IAAI,CAAC6G,WAAL,EAhBf;AAAA;AAAA,uBAiB4B,KAAKH,iBAAL,CAAuBvB,eAAvB,EAAwCC,OAAxC,CAjB5B;;AAAA;AAiBQ0B,gBAAAA,WAjBR;;AAAA,sBAkBSA,WAAW,IAAInL,YAAf,IAA+BwL,UAAU,CAACN,WAAX,MAA4B7G,IAA5D,IAAkE;AAEjE8G,gBAAAA,WAAW,CAACD,WAAZ,MAA6B7G,IApBtC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAsBqC,KAAK2G,YAAL,CAAkBxB,eAAlB,EAAmCC,OAAnC,CAtBrC;;AAAA;AAsBYgC,gBAAAA,gBAtBZ;AAAA;AAyBgBC,gBAAAA,OAzBhB,GAyB0B,KAAKnI,qBAAL,CAA2B7C,WAA3B,EAAwC8I,eAAxC,CAzB1B;AAAA;AAAA,uBA0BiCkC,OAAO,CAACxH,OAAR,CAAgByH,aAAhB,CAA8BlC,OAA9B,EAAuC8B,YAAvC,CA1BjC;;AAAA;AA0BgBtH,gBAAAA,QA1BhB;AAAA;AAAA,uBA2B4B,KAAKM,yBAAL,CACZF,IADY,EACNmF,eADM,EACWvF,QADX,EACqB,EADrB,EAEZ1D,SAAS,CAACqL,eAFE,EAEe,kBAFf,CA3B5B;;AAAA;AA2BgBtC,gBAAAA,GA3BhB;;AAAA,sBA+BgBA,GAAG,CAAC5E,MAAJ,IAAc,IA/B9B;AAAA;AAAA;AAAA;;AAAA,mFAiCuB4E,GAjCvB;AAkCoBuC,kBAAAA,eAAe,EAAEJ,gBAlCrC;AAmCoBF,kBAAAA,YAAY,EAAZA;AAnCpB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuCY1H,gBAAAA,OAAO,CAACC,GAAR;;AAvCZ;AAyCQ;AAEMgH,gBAAAA,iBA3Cd,GA2CkC,KAAKvH,qBAAL,CAA2B1C,iBAA3B,EAA8C,KAAKkB,gBAAnD,CA3ClC;AA4CYkC,gBAAAA,QA5CZ,GA4CuB6G,iBAAiB,CAAC5G,OAAlB,CAA0B4H,6BAA1B,CAAwDtC,eAAxD,EAAyEC,OAAzE,EAAkF8B,YAAlF,CA5CvB;AAAA;AAAA,uBA6CwB,KAAKhH,yBAAL,CACZF,IADY,EACN,KAAKtC,gBADC,EACiBkC,QADjB,EAC2B,EAD3B,EAEZ1D,SAAS,CAACqL,eAFE,EAEe,kBAFf,CA7CxB;;AAAA;AA6CYtC,gBAAAA,GA7CZ;AAAA,mFAkDeA,GAlDf;AAmDYuC,kBAAAA,eAAe,EAAEJ,gBAnD7B;AAoDYF,kBAAAA,YAAY,EAAZA;AApDZ;;AAAA;AAAA,mDAwDe;AACH7G,kBAAAA,MAAM,EAAE,KADL;AAEH8G,kBAAAA,UAAU,EAAVA,UAFG;AAGHL,kBAAAA,WAAW,EAAXA,WAHG;AAIH,yCAAuB9G,IAJpB;AAKH6B,kBAAAA,GAAG,EAAE;AALF,iBAxDf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAiEA;AACA;AACA;AAEA;;;;;kFAEA,mBAAmB6F,SAAnB,EAA8BC,aAA9B,EAA6CC,UAA7C,EAAyDC,cAAzD,EAAyE7H,IAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA+EkD,gBAAAA,KAA/E,iEAAuF,CAAvF;AACU4B,gBAAAA,QADV,GACqB,KAAK5F,qBAAL,CAA2B3C,QAA3B,EAAqC,KAAKkB,eAA1C,CADrB;AAGQuB,gBAAAA,EAHR,GAGa,KAAKvB,eAHlB;AAIQmC,gBAAAA,QAJR,GAImBkF,QAAQ,CAACjF,OAAT,CAAiBiI,WAAjB,CAA6BJ,SAA7B,EAAwCC,aAAxC,EAAuDC,UAAvD,EAAmEC,cAAnE,CAJnB;AAMQ5H,gBAAAA,MANR,GAMiB;AACTiD,kBAAAA,KAAK,EAALA;AADS,iBANjB;AAAA;AAAA,uBASoB,KAAKhD,yBAAL,CAA+BF,IAA/B,EAAqChB,EAArC,EAAyCY,QAAzC,EAAmDK,MAAnD,EAA2D/D,SAAS,CAAC6L,WAArE,EAAkF,cAAlF,CATpB;;AAAA;AASQ3H,gBAAAA,GATR;AAUIZ,gBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBW,GAAxB;AAVJ,mDAWWA,GAXX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;2FAcA,mBAA4B4H,UAA5B,EAAwCC,gBAAxC,EAA0DC,cAA1D,EAA0ElI,IAA1E;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI;AACA;AAEIhB,gBAAAA,EAJR,GAIaiJ,gBAJb;AAKQhI,gBAAAA,MALR,GAKiB,EALjB;;AAAA,sBAMQ+H,UAAU,IAAInM,KANtB;AAAA;AAAA;AAAA;;AAOcsM,gBAAAA,cAPd,GAO+B,KAAKtK,yBAPpC;AAQcuK,gBAAAA,MARd,GAQuB,KAAKlJ,qBAAL,CAA2BzC,MAA3B,EAAmCwL,gBAAnC,CARvB,EAUQ;;AAVR;AAAA,uBAW8BG,MAAM,CAACvI,OAAP,CAAewI,SAAf,CAAyBrI,IAAzB,EAA+BmI,cAA/B,EAA+CzC,IAA/C,EAX9B;;AAAA;AAWY2C,gBAAAA,SAXZ;;AAAA,sBAYYA,SAAS,IAAIH,cAZzB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAeoC,KAAKhK,IAAL,CAAUmH,GAAV,CAAcK,IAAd,CAAmB;AACnC1F,kBAAAA,IAAI,EAAJA,IADmC;AAEnChB,kBAAAA,EAAE,EAAEiJ,gBAF+B;AAGnCK,kBAAAA,IAAI,EAAE,KAAKpK,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkBC,uBAAlB,CAA0C,UAA1C;AAH6B,iBAAnB,CAfpC;;AAAA;AAeoBC,gBAAAA,OAfpB;AAoBoBC,gBAAAA,MApBpB,GAoB6B,KAAKxK,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkBI,eAAlB,CAAkC,QAAlC,EAA4CF,OAA5C,CApB7B;AAqBgB,qBAAKzL,MAAL,WAAegD,IAAf,sBAA+B0I,MAA/B,cAAyCL,SAAzC,kBAA0DF,cAA1D;AArBhB;AAAA;;AAAA;AAAA;AAAA;AAuBgB,qBAAKnL,MAAL;;AAvBhB;AAyBYoD,gBAAAA,GAAG,GAAG;AACFC,kBAAAA,MAAM,EAAE;AADN,iBAAN;AAzBZ;AAAA;;AAAA;AA6BgBT,gBAAAA,QA7BhB,GA6B2BwI,MAAM,CAACvI,OAAP,CAAe+I,OAAf,CAAuBT,cAAvB,EAAuCD,cAAvC,CA7B3B;AAAA;AAAA,uBA8BwB,KAAKhI,yBAAL,CAA+BF,IAA/B,EAAqChB,EAArC,EAAyCY,QAAzC,EAAmDK,MAAnD,EAA2D/D,SAAS,CAAC2M,eAArE,EAAsF,kBAAtF,CA9BxB;;AAAA;AA8BYzI,gBAAAA,GA9BZ;;AAAA;AAAA;AAAA;;AAAA;AAAA,sBAgCe4H,UAAU,IAAIlM,MAAd,IAAwBkM,UAAU,IAAIjM,OAhCrD;AAAA;AAAA;AAAA;;AAiCQ;AACA;AACMoM,gBAAAA,eAnCd,GAmC+B,KAAKvK,oBAnCpC,EAmCyD;;AAEjD,oBAAIoK,UAAU,IAAIlM,MAAlB,EAA0B;AACtBgN,kBAAAA,IAAI,GAAG,KAAK5J,qBAAL,CAA2B7C,WAA3B,EAAwC4L,gBAAxC,CAAP;AACH,iBAFD,MAEO;AACHa,kBAAAA,IAAI,GAAG,KAAK5J,qBAAL,CAA2B5C,eAA3B,EAA4C2L,gBAA5C,CAAP;AACH,iBAzCT,CA0CQ;;;AA1CR;AAAA,uBA2C+Ba,IAAI,CAACjJ,OAAL,CAAakJ,gBAAb,CAA8B/I,IAA9B,EAAoCmI,eAApC,EAAoDzC,IAApD,EA3C/B;;AAAA;AA2CYsD,gBAAAA,UA3CZ;;AAAA,qBA4CYA,UA5CZ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA8C+BF,IAAI,CAACjJ,OAAL,CAAa6I,MAAb,GAAsBhD,IAAtB,EA9C/B;;AAAA;AA8CgBgD,gBAAAA,MA9ChB;AA+CY,qBAAK1L,MAAL,WAAegD,IAAf,sBAA+B0I,MAA/B,mBAA8CP,eAA9C;AACA/H,gBAAAA,GAAG,GAAG;AACFC,kBAAAA,MAAM,EAAE;AADN,iBAAN;AAhDZ;AAAA;;AAAA;AAoDYT,gBAAAA,SAAQ,GAAGkJ,IAAI,CAACjJ,OAAL,CAAaoJ,iBAAb,CAA+Bd,eAA/B,EAA+C,IAA/C,CAAX;AApDZ;AAAA,uBAqDwB,KAAKjI,yBAAL,CAA+BF,IAA/B,EAAqChB,EAArC,EAAyCY,SAAzC,EAAmDK,MAAnD,EAA2D/D,SAAS,CAACgN,YAArE,EAAmF,sBAAnF,CArDxB;;AAAA;AAqDY9I,gBAAAA,GArDZ;;AAAA;AAAA;AAAA;;AAAA;AAuDa;AACLA,gBAAAA,GAAG,GAAG;AACFC,kBAAAA,MAAM,EAAE;AADN,iBAAN;;AAxDR;AA4DQwB,gBAAAA,GA5DR,GA4DczB,GAAG,CAACC,MAAJ,GAAa,EAAb,GAAkB,cA5DhC;AAAA,mFA8DWD,GA9DX;AA+DQyB,kBAAAA,GAAG,EAAHA;AA/DR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;0FAmEA,mBAA2BjB,KAA3B,EAAkCuI,UAAlC,EAA8CnI,KAA9C,EAAqDoI,UAArD,EAAiEhI,IAAjE,EAAuEoB,KAAvE,EAA8EC,GAA9E,EAAmF4G,QAAnF,EAA6FnH,OAA7F;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKnD,mBAAL,CAAyB,CAAC6B,KAAD,EAAQI,KAAR,CAAzB;;AACA,qBAAKL,sBAAL,CAA4B,CAACS,IAAD,EAAOoB,KAAP,EAAcC,GAAd,CAA5B;;AACA,qBAAK6G,iBAAL,CAAuB,CAACH,UAAD,EAAaC,UAAb,CAAvB,EAHJ,CAKI;AAEA;AACA;;;AACIrG,gBAAAA,KATR,GASgB5G,KAAK,CACbyE,KADa,EAEbuI,UAFa,EAED;AACZnI,gBAAAA,KAHa,EAGN;AACPoI,gBAAAA,UAJa,EAID;AACZhI,gBAAAA,IALa,EAKP;AACNoB,gBAAAA,KANa,EAMN;AACPC,gBAAAA,GAPa,EAOR;AACL4G,gBAAAA,QARa,EAQH;AACVnH,gBAAAA,OATa,CASL;AATK,iBATrB,EAqBI;;AArBJ,sBAuBQd,IAAI,IAAI,CAvBhB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAwB4ChG,2BAA2B,CAAC,KAAK8C,IAAN,EAAY,KAAKT,eAAjB,EAAkCsF,KAAlC,EAAyCnC,KAAzC,CAxBvE;;AAAA;AAwBc2I,gBAAAA,qBAxBd;AAyBQlG,gBAAAA,SAAS,GAAGkG,qBAAqB,CAACC,GAAlC;AACAlB,gBAAAA,IAAI,GAAGiB,qBAAqB,CAACjB,IAA7B;AA1BR;AAAA;;AAAA;AA4BQjF,gBAAAA,SAAS,GAAG,sIAAZ;AACAiF,gBAAAA,IAAI,GAAG,EAAP;;AA7BR;AAAA,4BAmCQ/M,QAAQ,CAAC,KAAK2C,IAAN,EAAYiL,UAAZ,CAnChB,EAgCQM,MAhCR,aAgCQA,MAhCR,EAiCQtE,eAjCR,aAiCQA,eAjCR,EAkCQjC,KAlCR,aAkCQA,KAlCR;AAAA;AAAA,uBAqCoB,KAAKwG,qBAAL,CAA2BD,MAA3B,EAAmCtE,eAAnC,EAAoDjC,KAApD,EAA2DtC,KAA3D,CArCpB;;AAAA;AAqCQR,gBAAAA,GArCR;AAAA,mFAuCWA,GAvCX;AAwCQ2C,kBAAAA,KAAK,EAALA,KAxCR;AAyCQuF,kBAAAA,IAAI,EAAJA,IAzCR;AA0CQjF,kBAAAA,SAAS,EAATA;AA1CR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;0FA8CA,mBAA2BsG,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE0B,KAAKzL,IAAL,CAAUmH,GAAV,CAAcuE,qBAAd,CAAoCD,MAApC,CAF1B;;AAAA;AAEUE,gBAAAA,OAFV;AAGI;AACA;AACIpK,gBAAAA,GALR,GAKcoK,OAAO,CAACC,IAAR,CAAa,CAAb,CALd,EAK8B;AAE1B;AACA;;AACMC,gBAAAA,cATV,GAS2B,oEAT3B;AAUUC,gBAAAA,eAVV,GAU4B,oEAV5B,EAWI;;AACIC,gBAAAA,MAZR,GAYiBxK,GAAG,CAACyK,MAAJ,CAAW,CAAX,CAZjB;AAc2BxJ,gBAAAA,QAd3B,GAcsC,CAdtC;;AAAA,sBAeQuJ,MAAM,IAAIF,cAflB;AAAA;AAAA;AAAA;;AAgBQ/J,gBAAAA,IAAI,GAAG,KAAK9B,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkBI,eAAlB,CAAkC,SAAlC,EAA6ClJ,GAAG,CAACyK,MAAJ,CAAW,CAAX,CAA7C,CAAP,CAhBR,CAgB2E;;AACnElL,gBAAAA,EAAE,GAAG,KAAKd,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkBI,eAAlB,CAAkC,SAAlC,EAA6ClJ,GAAG,CAACyK,MAAJ,CAAW,CAAX,CAA7C,CAAL,CAjBR,CAiByE;;AACjE9E,gBAAAA,OAAO,GAAG,KAAKlH,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkBI,eAAlB,CAAkC,MAAlC,EAA0ClJ,GAAG,CAACyK,MAAJ,CAAW,CAAX,CAA1C,CAAV,CAlBR,CAkB2E;;AAlB3E;AAAA;;AAAA;AAAA,sBAmBeD,MAAM,IAAID,eAnBzB;AAAA;AAAA;AAAA;;AAoBQ;AACA;AACAhK,gBAAAA,IAAI,GAAG,KAAK9B,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkBI,eAAlB,CAAkC,SAAlC,EAA6ClJ,GAAG,CAACyK,MAAJ,CAAW,CAAX,CAA7C,CAAP,CAtBR,CAsB2E;;AACnElL,gBAAAA,EAAE,GAAG,KAAKd,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkBI,eAAlB,CAAkC,SAAlC,EAA6ClJ,GAAG,CAACyK,MAAJ,CAAW,CAAX,CAA7C,CAAL,CAvBR,CAuByE;;AAE7D9D,gBAAAA,CAzBZ,GAyBgB,KAAKlI,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkBI,eAAlB,CAAkC,mBAAlC,EAAuDlJ,GAAG,CAAC6I,IAA3D,CAzBhB;AA0BQlD,gBAAAA,OAAO,GAAGgB,CAAC,CAAC,CAAD,CAAX;AACA1F,gBAAAA,QAAQ,GAAG0F,CAAC,CAAC,CAAD,CAAZ;AA3BR;AAAA;;AAAA;AA6BQ,qBAAKpJ,MAAL,CAAY,4BAAZ;AACAwC,gBAAAA,OAAO,CAACC,GAAR,CAAYA,GAAZ;AA9BR,mDA+Be,EA/Bf;;AAAA;AAkCQ0K,gBAAAA,WAlCR,GAkCsB1K,GAAG,CAAC0K,WAlC1B;AAmCQhF,gBAAAA,eAnCR,GAmC0B1F,GAAG,CAAC2K,OAnC9B,EAmCsC;;AAC9BC,gBAAAA,QApCR,GAoCoBrK,IAAI,IAAIrE,YAAT,GAAyB,IAAzB,GAAgC,KApCnD,EAsCI;AACA;AACA;AACA;;AAzCJ,mDA2CW;AACHwO,kBAAAA,WAAW,EAAXA,WADG;AAEHR,kBAAAA,MAAM,EAANA,MAFG;AAGHxE,kBAAAA,eAAe,EAAfA,eAHG;AAIHC,kBAAAA,OAAO,EAAEjI,MAAM,CAACiI,OAAD,CAJZ;AAKH1E,kBAAAA,QAAQ,EAAEvD,MAAM,CAACuD,QAAD,CALb;AAMHV,kBAAAA,IAAI,EAAJA,IANG;AAOHhB,kBAAAA,EAAE,EAAFA,EAPG;AAQHqL,kBAAAA,QAAQ,EAARA;AARG,iBA3CX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+FA2DA,mBAAgCrK,IAAhC,EAAsChB,EAAtC,EAA0CY,QAA1C,EAAoDK,MAApD,EAA4DqK,OAA5D,EAAqE7K,GAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACqB,KAAK8K,aAAL,CAAmBvK,IAAnB,EAAyBhB,EAAzB,EAA6BY,QAA7B,EAAuCK,MAAvC,CADrB;;AAAA;AACUM,gBAAAA,EADV;;AAAA,qBAEQA,EAAE,CAACF,MAFX;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGkC,KAAKmK,mBAAL,CAAyBjK,EAAE,CAACC,eAA5B,EAA6C8J,OAA7C,EAAsD7K,GAAtD,CAHlC;;AAAA;AAGcgL,gBAAAA,WAHd;AAAA,mDAIe;AACHpK,kBAAAA,MAAM,EAAEoK,WADL;AAEHlK,kBAAAA,EAAE,EAAFA;AAFG,iBAJf;;AAAA;AAAA,mDASe;AACHF,kBAAAA,MAAM,EAAE,KADL;AAEHE,kBAAAA,EAAE,EAAFA;AAFG,iBATf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;mFAgBA,mBAAoBP,IAApB,EAA0BhB,EAA1B,EAA8BY,QAA9B,EAAwCK,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQqI,gBAAAA,IADR,GACe1I,QAAQ,CAAC8K,SAAT,EADf;AAAA;AAAA,uBAEyB,KAAKC,gBAAL,EAFzB;;AAAA;AAEQC,gBAAAA,QAFR;AAAA;AAAA;AAAA,uBAIwBhL,QAAQ,CAACiL,WAAT;AACZ7K,kBAAAA,IAAI,EAAJA,IADY;AAEZhB,kBAAAA,EAAE,EAAFA;AAFY,mBAGTiB,MAHS,EAJxB;;AAAA;AAIY6K,gBAAAA,GAJZ;AAAA;AAAA,uBASqB,KAAK5M,IAAL,CAAUmH,GAAV,CAAc0F,eAAd;AACT/K,kBAAAA,IAAI,EAAJA,IADS;AAEThB,kBAAAA,EAAE,EAAFA,EAFS;AAGTsJ,kBAAAA,IAAI,EAAJA,IAHS;AAITwC,kBAAAA,GAAG,EAAHA,GAJS;AAKTF,kBAAAA,QAAQ,EAARA;AALS,mBAMN3K,MANM,EATrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,mDAkBe;AACHI,kBAAAA,MAAM,EAAE,KADL;AAEHwB,kBAAAA,GAAG;AAFA,iBAlBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;mFAyBA,mBAAoB7B,IAApB,EAA0BhB,EAA1B,EAA8BgM,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ1C,gBAAAA,IADR,GACe0C,KAAK,CAACN,SAAN,EADf;AAAA;AAAA;AAAA,uBAGwBxM,IAAI,CAACmH,GAAL,CAASK,IAAT,CAAc;AAC1B1F,kBAAAA,IAAI,EAAJA,IAD0B;AAE1BhB,kBAAAA,EAAE,EAAFA,EAF0B;AAG1BsJ,kBAAAA,IAAI,EAAJA;AAH0B,iBAAd,CAHxB;;AAAA;AAGYlI,gBAAAA,GAHZ;AAAA,mDAQe,KAAKlC,IAAL,CAAUmH,GAAV,CAAckD,GAAd,CAAkB0C,gBAAlB,CAAmCD,KAAK,CAACE,OAAN,CAAcC,OAAjD,EAA0D/K,GAA1D,EAA+D,CAA/D,CARf;;AAAA;AAAA;AAAA;AAAA,mDAUe,EAVf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;sFAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC0B,KAAKlC,IAAL,CAAUmH,GAAV,CAAc+F,WAAd,EAD1B;;AAAA;AACUC,gBAAAA,OADV;AAEUC,gBAAAA,QAFV,GAEqBrQ,IAAI,CAACqD,KAAL,CAAWiN,IAAX,CAAgB,KAAKrN,IAAL,CAAUI,KAAV,CAAgBkN,KAAhB,CAAsB,KAAKnN,gBAA3B,EAA6C,MAA7C,CAAhB,CAFrB;AAAA,mDAGWpD,IAAI,CAACqD,KAAL,CAAWiN,IAAX,CAAgBF,OAAhB,EAAyBI,GAAzB,CAA6BH,QAA7B,EAAuCI,QAAvC,EAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;yFAMA,mBAA0BlL,eAA1B,EAA2CmL,KAA3C,EAAkDC,WAAlD,EAA+DC,cAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,oBADV,GACiC;AACzBtL,kBAAAA,eAAe,EAAfA,eADyB;AAEzBmL,kBAAAA,KAAK,EAALA;AAFyB,iBADjC;AAKI,qBAAK3O,MAAL,iCAAqC4O,WAArC;;AALJ,sBAOQpL,eAAe,IAAI9E,eAP3B;AAAA;AAAA;AAAA;;AAQQ;AACA,qBAAKqQ,SAAL,CAAe7P,SAAS,CAACiE,kBAAzB,EAA6C;AACzCwL,kBAAAA,KAAK,EAALA;AADyC,iBAA7C;;AATR,oBAaaE,cAbb;AAAA;AAAA;AAAA;;AAcY;AACA,qBAAK7O,MAAL,6CAAiD4O,WAAjD;AAfZ;AAAA,uBAgBkBI,KAAK,CAAC,KAAK,IAAN,CAhBvB;;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAmBqB,KAAKC,4BAAL,CAAkCN,KAAlC,EAAyCC,WAAzC,EAAsDC,cAAtD,CAnBrB;;AAAA;AAAA;;AAAA;AAAA;;AAwBQ,qBAAKE,SAAL,CAAe7P,SAAS,CAACiE,kBAAzB,EAA6C2L,oBAA7C;;AAxBR;AAAA,uBAyBc3Q,kBAAkB,CAAC,KAAK+C,IAAN,EAAYsC,eAAZ,CAzBhC;;AAAA;AA0BQ,qBAAKxD,MAAL,iCAAqC4O,WAArC;;AACA,qBAAKG,SAAL,CAAe7P,SAAS,CAACgQ,oBAAzB,EAA+CJ,oBAA/C;;AA3BR,mDA4Be,IA5Bf;;AAAA;AAAA;AAAA;AA8BQ,qBAAK9O,MAAL,iCAAqC4O,WAArC;;AACA,qBAAKG,SAAL,CAAe7P,SAAS,CAACiQ,iBAAzB,kCACOL,oBADP;AAEIhI,kBAAAA,KAAK;AAFT;;AA/BR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kGAuCA,mBAAmC6H,KAAnC,EAA0CC,WAA1C,EAAuDC,cAAvD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mDACW,IAAIO,OAAJ;AAAA,sFAAY,mBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,4BAAAA,cADS,GACQ,EADR,EAEf;;AAAA;AACMC,4BAAAA,WAHS;AAAA,kGAGK,mBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACYZ,cAAc,EAD1B;;AAAA;AACVa,wCAAAA,aADU;;AAAA,6CAEZA,aAFY;AAAA;AAAA;AAAA;;AAGZ,wCAAA,MAAI,CAAC1P,MAAL,kCAAsC4O,WAAtC;;AACA,wCAAA,MAAI,CAACG,SAAL,CAAe7P,SAAS,CAACgQ,oBAAzB,EAA+C;AAC3CP,0CAAAA,KAAK,EAALA;AAD2C,yCAA/C;;AAJY,2EAOLU,OAAO,CAAC,IAAD,CAPF;;AAAA;AAAA,8CAQLI,OAAO,IAAI,CARN;AAAA;AAAA;AAAA;;AAAA,2EASLH,MAAM,CAAC,KAAD,CATD;;AAAA;AAYhB,4CAAIG,OAAO,GAAG,EAAV,IAAgB,CAApB,EAAuB;AACnB,0CAAA,MAAI,CAACzP,MAAL,8BAAkCuP,cAAc,GAAGE,OAAjB,GAA2B,CAA7D,qBAAyEb,WAAzE;AACH;;AAde;AAAA,+CAgBVI,KAAK,CAAC,IAAD,CAhBK;;AAAA;AAAA,2EAiBTQ,WAAW,CAACC,OAAO,GAAG,CAAX,CAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAHL;;AAAA,8CAGTD,WAHS;AAAA;AAAA;AAAA;;AAAA,+DAuBRA,WAAW,CAACD,cAAD,CAvBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAZ;;AAAA;AAAA;AAAA;AAAA,oBADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WA4BA,mBAAUZ,KAAV,EAAiBrD,IAAjB,EAAuB;AACnB,WAAK5J,QAAL,CAAciO,IAAd,CAAmBhB,KAAnB,EAA0BrD,IAA1B;AACH;;;WAED,+BAAsBsE,WAAtB,EAA2D;AAAA,UAAxBzH,eAAwB,uEAAN,IAAM;AACvD,aAAOjK,oBAAoB,CAAC,KAAKgD,IAAN,EAAY,KAAKZ,KAAjB,EAAwBsP,WAAxB,EAAqCzH,eAArC,CAA3B;AACH;;;WAED,uBAAcsE,MAAd,EAAsBtE,eAAtB,EAAuCjC,KAAvC,EAA8C;AAC1C,UAAIN,SAAJ;;AACA,UAAI6G,MAAM,IAAIzN,GAAd,EAAmB;AACf;AACA4G,QAAAA,SAAS,GAAGtH,GAAG,CAAC,KAAK4C,IAAN,EAAYvC,YAAZ,CAAf;AACH,OAHD,MAGO,IAAI8N,MAAM,IAAI5N,KAAd,EAAqB;AACxB+G,QAAAA,SAAS,GAAGtH,GAAG,CAAC,KAAK4C,IAAN,EAAYiH,eAAZ,CAAf;AACH,OAFM,MAEA,IAAIsE,MAAM,IAAI3N,MAAV,IAAoB2N,MAAM,IAAI1N,OAAlC,EAA2C;AAC9C6G,QAAAA,SAAS,GAAGtH,GAAG,CAAC,KAAK4C,IAAN,EAAYiH,eAAZ,EAA6BjC,KAA7B,CAAf;AACH,OAFM,MAEA;AACH1D,QAAAA,OAAO,CAACqN,KAAR;AACA,kDAAmCpD,MAAnC;AACH;;AACD,aAAO7G,SAAP;AACH;;;WAED,6BAAoBkK,iBAApB,EAAuC;AACnCA,MAAAA,iBAAiB,CAAC/O,OAAlB,CAA0B,UAAAgP,GAAG,EAAI;AAC7B,YAAIA,GAAG,IAAI9O,SAAX,EAAsB;AAClBuB,UAAAA,OAAO,CAACqN,KAAR;AACA;AACH;;AACD,YAAIE,GAAG,CAACrN,MAAJ,IAAc,EAAlB,EAAsB;AAClBF,UAAAA,OAAO,CAACqN,KAAR;AACA,oDAAmCE,GAAnC;AACH;AACJ,OATD;AAUH;;;WACD,4BAAmBC,YAAnB,EAAiC;AAC7BA,MAAAA,YAAY,CAACjP,OAAb,CAAqB,UAAAgP,GAAG,EAAI;AACxB,YAAIA,GAAG,IAAI9O,SAAX,EAAsB;AAClBuB,UAAAA,OAAO,CAACqN,KAAR;AACA;AACH;;AACD,YAAIE,GAAG,CAACrN,MAAJ,IAAc,EAAlB,EAAsB;AAClBF,UAAAA,OAAO,CAACqN,KAAR;AACA,oDAAmCE,GAAnC;AACH;AACJ,OATD;AAUH;;;WACD,gCAAuBE,cAAvB,EAAuC;AACnCA,MAAAA,cAAc,CAAClP,OAAf,CAAuB,UAAAgP,GAAG,EAAI;AAC1B,YAAIA,GAAG,IAAI9O,SAAX,EAAsB;AAClBuB,UAAAA,OAAO,CAACqN,KAAR;AACA;AACH;;AACD,YAAI,OAAOE,GAAP,IAAc,QAAlB,EAA4B;AACxBvN,UAAAA,OAAO,CAACqN,KAAR;AACA,6DAA2CE,GAA3C;AACH;;AACD,YAAI5P,MAAM,CAAC4P,GAAG,CAACG,OAAJ,EAAD,CAAN,IAAyBH,GAA7B,EAAkC;AAC9BvN,UAAAA,OAAO,CAACqN,KAAR;AACA;AACH;;AACD,YAAIE,GAAG,GAAG,CAAV,EAAa;AACTvN,UAAAA,OAAO,CAACqN,KAAR;AACA,0CAAyBE,GAAzB;AACH;AACJ,OAjBD;AAkBH;;;WAED,8BAAqBI,aAArB,EAAoC;AAAA;;AAChC;AACAA,MAAAA,aAAa,CAACpP,OAAd,CAAsB,UAAAqP,YAAY,EAAI;AAClCA,QAAAA,YAAY,CAACrP,OAAb,CAAqB,UAAAgP,GAAG,EAAI;AACxB,cAAIA,GAAG,IAAI9O,SAAX,EAAsB;AAClBuB,YAAAA,OAAO,CAACqN,KAAR;AACA;AACH;;AACD,cAAIE,GAAG,CAACrN,MAAJ,GAAa,CAAjB,EAAoB;AAChB,gBAAIwF,OAAO,GAAG6H,GAAG,CAAC,CAAD,CAAjB;AACA,gBAAI7J,KAAK,GAAG6J,GAAG,CAAC,CAAD,CAAf;;AACA,YAAA,MAAI,CAAChO,mBAAL,CAAyB,CAACmG,OAAD,CAAzB;;AACA,YAAA,MAAI,CAACvE,sBAAL,CAA4B,CAACuC,KAAD,CAA5B;AACH;AACJ,SAXD;AAYH,OAbD;AAcH;;;WAED,2BAAkBmK,cAAlB,EAAkC;AAAA;;AAC9BA,MAAAA,cAAc,CAACtP,OAAf,CAAuB,UAAAgP,GAAG,EAAI;AAC1B,YAAIA,GAAG,IAAI9O,SAAX,EAAsB;AAClBuB,UAAAA,OAAO,CAACqN,KAAR;AACA;AACH;;AACD,YACIS,SADJ,GAGIP,GAHJ,CACIO,SADJ;AAAA,YAEIpK,KAFJ,GAGI6J,GAHJ,CAEI7J,KAFJ;;AAIA,YAAIoK,SAAS,IAAIrP,SAAjB,EAA4B;AACxBuB,UAAAA,OAAO,CAACqN,KAAR;AACA;AACH;;AACD,QAAA,MAAI,CAAClM,sBAAL,CAA4B,CAACuC,KAAD,CAA5B;AACH,OAdD;AAeH;;;WAED,0BAAiBqK,MAAjB,EAAyBC,MAAzB,EAAiC;AAC7B,UAAID,MAAM,CAACrK,KAAP,IAAgBsK,MAAM,CAACtK,KAAvB,IACAqK,MAAM,CAACD,SAAP,CAAiBG,UAAjB,IAA+BD,MAAM,CAACF,SAAP,CAAiBG,UADhD,IAEAF,MAAM,CAACD,SAAP,CAAiBhF,IAAjB,IAAyBkF,MAAM,CAACF,SAAP,CAAiBhF,IAF9C,EAGE;AACE9I,QAAAA,OAAO,CAACqN,KAAR;AACA;AACH;AACJ;;;WAED,cAAKa,MAAL,EAAa;AACT,aAAO,IAAI,KAAKxP,IAAL,CAAUI,KAAV,CAAgBC,EAApB,CAAuBmP,MAAvB,CAAP;AACH;;;;KAGL;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACb/Q,EAAAA,MAAM,EAANA;AADa,CAAjB","sourcesContent":["const {\r\n    EventEmitter\r\n} = require(\"fbemitter\")\r\nconst Web3 = require(\"web3\")\r\n\r\nconst {\r\n    makeContractInstance,\r\n    confirmTransaction,\r\n    createTypedDataAndSignature,\r\n    recoverTypedSignature,\r\n    enc,\r\n    decAsset,\r\n    encDataV1,\r\n} = require(\"./utils/utils.js\")\r\n\r\nconst {\r\n    ParulaAPI\r\n} = require('./api')\r\nconst {\r\n    NULL_BLOCK_HASH,\r\n    ZERO_ADDRESS,\r\n    ORDER_DATA_V1,\r\n    ERC20,\r\n    ERC721,\r\n    ERC1155,\r\n    ETH\r\n} = require(\"./constants\")\r\nconst {\r\n    Network,\r\n    EventType,\r\n    Order,\r\n    Asset\r\n} = require(\"./types\")\r\n\r\nconst {\r\n    NFTContract,\r\n    NFT1155Contract,\r\n    Exchange,\r\n    RoyaltiesRegistry,\r\n    IERC20,\r\n    IERC165,\r\n    IERC1155\r\n} = require(\"./contracts\")\r\n\r\n\r\nconst {\r\n    config\r\n} = require(\"../configs/rinkeby\") // defaultConfig\r\n\r\n\r\nclass Parula {\r\n    constructor(provider, apiConfig = {}, logger) {\r\n        // apiConfig.gasPrice = apiConfig.gasPrice || makeBigNumber(300000)\r\n\r\n        if (Object.keys(apiConfig) == 0) {\r\n            apiConfig = config\r\n        }\r\n        if (Number(provider.chainId) != apiConfig.chainId) {\r\n            throw \"parula-js.constructor:: provider.chain_id != config.chain_id\"\r\n        }\r\n        this.networkName = apiConfig.networkName\r\n\r\n        this.netId = apiConfig.netId\r\n\r\n        this.nftAddress = apiConfig.nftAddress\r\n        this.nft1155Address = apiConfig.nft1155Address\r\n        this.exchangeAddress = apiConfig.exchangeAddress\r\n        this.royaltiesAddress = apiConfig.royaltiesRegistryAddress\r\n        this.transferProxyAddress = apiConfig.transferProxyAddress\r\n        this.erc20TransferProxyAddress = apiConfig.erc20TransferProxyAddress\r\n\r\n        var neededProperties = [\r\n            'nftAddress', 'nft1155Address', 'netId', 'networkName', 'readonlyProviderUrl',\r\n            'exchangeAddress', 'royaltiesRegistryAddress', 'transferProxyAddress', 'erc20TransferProxyAddress',\r\n        ]\r\n        neededProperties.forEach(propName => {\r\n            if (apiConfig[propName] == undefined) {\r\n                throw `Configuration needed '${propName}' is not defined`\r\n            }\r\n        })\r\n\r\n        // Web3 Config\r\n        this.web3 = new Web3(provider)\r\n        this.web3ReadOnly = new Web3(apiConfig.readonlyProviderUrl)\r\n        this.gasPriceAddition = new Web3.utils.BN(1)\r\n\r\n        apiConfig.web3 = this.web3ReadOnly\r\n        this.api = new ParulaAPI(apiConfig, logger)\r\n\r\n        this.logger = logger || (function (arg) {\r\n            return arg;\r\n        })\r\n        this._emitter = new EventEmitter()\r\n    }\r\n\r\n    async createArtwork(signer, owner = '', erc721metadataURL = '', royalties = []) {\r\n        this._verifyParamAddress([signer])\r\n        if (owner) {\r\n            this._verifyParamAddress([owner])\r\n        } else {\r\n            owner = signer\r\n        }\r\n\r\n        var to = this.nftAddress\r\n        var nft_contract = this._makeContractInstance(NFTContract, this.nftAddress)\r\n        let _callobj\r\n\r\n        // check royalties valid\r\n        royalties.forEach((royalty) => {\r\n            // check royalty account\r\n            var is_valid_address = this.web3.utils.isAddress(royalty[0])\r\n            if (!is_valid_address) {\r\n                throw `fail to mint with royalty, invalid address: ${royalty[0]}`\r\n            }\r\n            // check royalty value\r\n            var _val = Number(royalty[1])\r\n            if (isNaN(_val) || _val < 1 || _val > 500) { // 1~500\r\n                throw `fail to mint with royalty, invalid value: ${royalty[1]}`\r\n            }\r\n        })\r\n        console.log(royalties)\r\n        if (royalties.length > 0) {\r\n            this._verifyParamTypePart([royalties])\r\n            _callobj = nft_contract.methods.mintItemWithRoyalty(owner, erc721metadataURL, owner, royalties) // royaltyOwner, royalties\r\n        } else {\r\n            _callobj = nft_contract.methods.mintItem(owner, erc721metadataURL)\r\n        }\r\n\r\n        const from = signer\r\n        const _param = {}\r\n\r\n        const ret = await this.sendTransactionAndConfirm(\r\n            from, to, _callobj, _param, EventType.TransactionCreated, \"Create NFT\")\r\n\r\n        if (ret.status) {\r\n            return await this._extractTransferInfo(ret.tx.transactionHash)\r\n        }\r\n    }\r\n\r\n    async createArtwork1155(signer, owner = '', erc721metadataURL = '', id = 0, quantity = 1, royalties = []) {\r\n        this._verifyParamAddress([signer])\r\n        if (owner) {\r\n            this._verifyParamAddress([owner])\r\n        } else {\r\n            owner = signer\r\n        }\r\n        this._verifyParamUintNumber([id, quantity])\r\n\r\n        var to = this.nft1155Address\r\n        var nft_contract = this._makeContractInstance(NFT1155Contract, this.nft1155Address)\r\n        let _callobj\r\n        if (royalties.length > 0) {\r\n            this._verifyParamTypePart([royalties])\r\n            _callobj = nft_contract.methods.mintItemWithRoyalty(owner, id, quantity, [], owner, royalties) //, royaltyOwner, royalties\r\n        } else {\r\n            _callobj = nft_contract.methods.mintItem(owner, id, quantity, [])\r\n        }\r\n\r\n        const from = signer\r\n        const _param = {}\r\n\r\n        const ret = await this.sendTransactionAndConfirm(\r\n            from, to, _callobj, _param, EventType.TransactionCreated, \"Create NFT\")\r\n\r\n        if (ret.status) {\r\n            return await this._extractTransferInfo(ret.tx.transactionHash)\r\n        }\r\n    }\r\n\r\n    async createSellOrder({\r\n        maker, // order maker address               web3.eth.abi.encodeParameters([\"address\", \"uint256\"], [token, tokenId]);\r\n        maTypeMV, // makerAsset,  // ma, Asset(ERC721, enc(erc721.address, erc721TokenId1), 1),\r\n        maContractAddress, // contract\r\n        maValue, // tokenId when erc721, 1155\r\n        quantity = 1,\r\n\r\n        taker = ZERO_ADDRESS, // order taker address, can be ZERO\r\n        taTypeMV, // takerAsset,  // ta, Asset(ETH, \"0x\", 200), ERC20\r\n        taContractAddress,\r\n        taValue, // or Value?\r\n\r\n        salt = Date.now(), // when regist order to orderbook salt is some-uint-value, else salt is 0\r\n        //   in ExchangeV2Core, same hashed order occur error\r\n        startDatetime = 0, // Date()\r\n        endDatetime = 0, // Date()\r\n    }) {\r\n        if (taTypeMV == ETH) {\r\n            this._verifyParamAddress([maker, maContractAddress, taker]) // eth는 contractAddress 없음\r\n        } else {\r\n            this._verifyParamAddress([maker, maContractAddress, taker, taContractAddress])\r\n        }\r\n        this._verifyParamTypeMV([maTypeMV, taTypeMV])\r\n        this._verifyParamUintNumber([maValue, taValue])\r\n\r\n        if (maTypeMV == ERC721) {\r\n            var realOwner = await this.getTokenOwnerOf(maContractAddress, maValue)\r\n            if (realOwner.toUpperCase() != maker.toUpperCase()) {\r\n                return {\r\n                    status: false,\r\n                    err: `Orderer(${maker}) is not the token owner(${realOwner})`\r\n                }\r\n            }\r\n        } else if (maTypeMV == ERC1155) {\r\n            var balanceOf = await this.getBalanceOf(maker, maContractAddress, maValue) // maValue is tokenId\r\n            if (balanceOf < quantity) {\r\n                return {\r\n                    status: false,\r\n                    err: `Orderer(${maker})'s balance is not enough. `\r\n                }\r\n            }\r\n        } else {\r\n            return {\r\n                status: false,\r\n                err: `Unsupported asset type: ${maTypeMV}`\r\n            }\r\n        }\r\n\r\n\r\n        const originFees = [] // originFees 가 원천징수 느낌인가보다\r\n        const payouts = [\r\n            [maker, 10000]\r\n        ] // 100% of takeAsset to orderMaker\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n        // TODO: check start and end date \r\n        //   var date = new Date()\r\n        //   date.valueOf() // 1622683295328\r\n        //   new Date(1622683295328) // 2021-06-03T01:21:35.328Z\r\n\r\n        var maEncData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var taEncData = this._encAssetData(taTypeMV, taContractAddress, taValue)\r\n        // order struct\r\n        const ret = await this._makeOrderAndApprove(\r\n            maker,\r\n            Asset(maTypeMV, maEncData, quantity), // 721이면 value 1, 1155면 1 이상\r\n            taker,\r\n            Asset(taTypeMV, taEncData, taValue), // takerAsset,\r\n            salt,\r\n            startDatetime,\r\n            endDatetime,\r\n            ORDER_DATA_V1,\r\n            encData\r\n        );\r\n\r\n        // TODO: api.putSellOrder\r\n        return ret // ,orderId,\r\n    }\r\n\r\n    // 누가 판다고 내놓은 거 산다는 오더&매치\r\n    async createBuyOrderAndMatch({\r\n        maker, // order maker address   \r\n        maTypeMV, // takerAsset,  // ta, Asset(ETH, \"0x\", 200), ERC20\r\n        maContractAddress, // contract\r\n        maValue,\r\n\r\n        sellOrderId, // off-chain registered, 아니면 order_id만 받고, getOrder로 가져와? 그게 성능상 좋겠구만\r\n\r\n        salt = 0, // when regist order to orderbook salt is 1, else salt is 0\r\n        start = 0, // Date()\r\n        end = 0, // Date()\r\n    }) {\r\n        console.log(`\r\n        파룰라js안쪽\r\n        maker ${maker}\r\n        maTypeMV ${maTypeMV}\r\n        maContractAddress ${maContractAddress}\r\n        maValue ${maValue}\r\n        sellOrderId ${sellOrderId}\r\n        `)\r\n        if (maTypeMV == ETH) {\r\n            this._verifyParamAddress([maker])\r\n        } else {\r\n            this._verifyParamAddress([maker, maContractAddress])\r\n        }\r\n        this._verifyParamTypeMV([maTypeMV])\r\n        this._verifyParamUintNumber([maValue, sellOrderId])\r\n\r\n        let err = ''\r\n        const originFees = []\r\n        const payouts = [\r\n            [maker, 10000]\r\n        ] // 100% of takeAsset to orderMaker\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n\r\n        // api.get sell order\r\n        const sellOrder = await this.api.getSellOrder({\r\n            id: sellOrderId\r\n        }) // 구현 필요, 디테일한 사용법도 필요\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var makeAsset = Asset(maTypeMV, assetData, maValue)\r\n        this._checkDiffAssets(makeAsset, sellOrder.order.takeAsset)\r\n        console.log('salt', salt)\r\n        // order struct\r\n        var retBuyOrder = await this._makeOrderAndApprove(\r\n            maker,\r\n            makeAsset,\r\n            sellOrder.order.maker,\r\n            sellOrder.order.makeAsset, // 보자보자 \r\n            salt,\r\n            start,\r\n            end,\r\n            ORDER_DATA_V1,\r\n            encData\r\n        );\r\n\r\n        let value = maTypeMV == ETH ? maValue : 0 // if eth value need, in wei\r\n        console.log('sellOrder.order', JSON.stringify(sellOrder.order), '---sellOrder.signature,', JSON.stringify(sellOrder.signature), '---retBuyOrder.order', JSON.stringify(retBuyOrder.order), '---retBuyOrder.signature', JSON.stringify(retBuyOrder.signature), 'maker', maker, 'value', value)\r\n        // need put buy-order?\r\n        var retMatch = await this._matchOrders(\r\n            sellOrder.order, sellOrder.signature, retBuyOrder.order, retBuyOrder.signature,\r\n            maker, value\r\n        )\r\n\r\n        return {\r\n            status: retMatch.status,\r\n            err: ''\r\n        }\r\n    }\r\n\r\n    ////////////////////////\r\n    //// bid에 매칭은 어떻게?\r\n    ////////////////////////\r\n    // auction 등록 -> 입찰(buyOrder) -> 낙찰(sellOrder -> matchOrders)\r\n    //\r\n    // 1. auction 등록하기\r\n    //   - 상품\r\n    //   - asset\r\n    //     - 시작가\r\n    //   - 시작일시\r\n    //   - 종료일시\r\n    //   - \r\n    // 2. listing auction\r\n    //   auction item은 [bid] 버튼 표시\r\n    //   실시간 종료까지 남은 시간 표시\r\n    //   정렬 (ebay참고: https://www.ebay.com/b/Toys-Hobbies/220/bn_1865497?LH_Auction=1&rt=nc&_sop=5)\r\n    //     best match\r\n    //     time: endding soonest\r\n    //     time: newly listed\r\n    //     price + shipping: lowest first\r\n    //     price + shipping: highest first\r\n    //     number of bids: fewest first\r\n    //     number of bids: most first\r\n    // 3. bidding\r\n    // 4. 낙찰(matchingOrder)\r\n\r\n    // 경매 내 놓는 오더\r\n    async createAuction({\r\n        startDatetime,\r\n        endDatetime,\r\n        maker,\r\n        maTypeMV,\r\n        maContractAddress,\r\n        maValue,\r\n        quantity = 1,\r\n\r\n        taker = ZERO_ADDRESS,\r\n        taTypeMV,\r\n        taContractAddress,\r\n        taPriceBegin,\r\n\r\n        taPriceEnd = 0, // 즉시구매가\r\n        isTimeLimited = true,\r\n        priceMinHidden = -1,\r\n    }) {\r\n        this._verifyParamAddress([maker, maContractAddress, taker])\r\n        this._verifyParamTypeMV([maTypeMV, taTypeMV])\r\n        this._verifyParamUintNumber([maValue, quantity, startDatetime, endDatetime, taPriceBegin, taPriceBegin])\r\n\r\n        if (maTypeMV == ERC721) {\r\n            var realOwner = await this.getTokenOwnerOf(maContractAddress, maValue)\r\n            if (realOwner.toUpperCase() != maker.toUpperCase()) {\r\n                return {\r\n                    status: false,\r\n                    err: `Orderer(${maker}) is not the token owner(${realOwner})`\r\n                }\r\n            }\r\n        } else if (maTypeMV == ERC1155) {\r\n            var balanceOf = await this.getBalanceOf(maker, maContractAddress, maValue) // maValue is tokenId\r\n            if (balanceOf < quantity) {\r\n                return {\r\n                    status: false,\r\n                    err: `Orderer(${maker})'s balance is not enough. `\r\n                }\r\n            }\r\n        } else {\r\n            return {\r\n                status: false,\r\n                err: `Unsupported asset type: ${maTypeMV}`\r\n            }\r\n        }\r\n\r\n        let retOrderData = null\r\n        let err = ''\r\n\r\n        if (taPriceEnd != 0) { // 즉시구매 시 사용될 sellOrder\r\n            retOrderData = await this.createSellOrder({\r\n                maker,\r\n                maTypeMV,\r\n                maContractAddress,\r\n                maValue,\r\n                taker,\r\n                taTypeMV,\r\n                taContractAddress,\r\n                taValue: taPriceEnd,\r\n                quantity,\r\n                start: startDatetime,\r\n                end: endDatetime\r\n            })\r\n\r\n            if (!retOrderData.status) {\r\n                console.error(retOrderData.err)\r\n                err = `err: ${retOrderData.err}`\r\n            }\r\n            // console.log(retOrderData.data, retOrderData.signature)\r\n        }\r\n        // 즉구 order, signature 만들었고,\r\n        //   즉구 order DB 테이블: market_order\r\n\r\n        // 테이블 따로 필요 없지?\r\n\r\n        // 경매 취소 가능한가? || 입찰 없으면 가능, 입찰 있으면 불가능\r\n        return {\r\n            ...retOrderData,\r\n            err\r\n        }\r\n    }\r\n\r\n    async createBidOrder({\r\n        maker, // bidder\r\n        maTypeMV,\r\n        maContractAddress,\r\n        maValue,\r\n\r\n        // taker, // auction owner\r\n        // taTypeMV, taContractAddress, taValue,\r\n\r\n        auctionId\r\n    }) {\r\n        if (maTypeMV == ETH) {\r\n            return {\r\n                status: false,\r\n                err: \"Can't use ETH for bid-order\"\r\n            }\r\n        }\r\n        this._verifyParamAddress([maker, maContractAddress])\r\n        this._verifyParamTypeMV([maTypeMV])\r\n        this._verifyParamUintNumber([maValue, auctionId])\r\n\r\n        const originFees = []\r\n        const payouts = [\r\n            [maker, 10000]\r\n        ] // 100% of takeAsset to orderMaker\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n\r\n        var auctionOrder = await this.api.getAuctionOrder({\r\n            id: auctionId\r\n        })\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var makeAsset = Asset(maTypeMV, assetData, maValue)\r\n\r\n        let order_maker;\r\n        let order_maker_asset;\r\n        if (!auctionOrder.immediate_buyable) {\r\n            order_maker_asset = auctionOrder.order.makeAsset\r\n            order_maker = auctionOrder.order.maker\r\n        } else {\r\n            order_maker = auctionOrder.order.maker\r\n            order_maker_asset = auctionOrder.order.makeAsset\r\n        }\r\n\r\n        // this._checkDiffAssets(makeAsset, auctionOrder.order.takeAsset)\r\n        // order struct\r\n        const ret = await this._makeOrderAndApprove(\r\n            maker,\r\n            makeAsset,\r\n            order_maker,\r\n            order_maker_asset,\r\n            1, 0, 0,\r\n            ORDER_DATA_V1,\r\n            encData\r\n        );\r\n\r\n        return ret\r\n    }\r\n\r\n    async createBidMatch({\r\n        maker,\r\n        maTypeMV,\r\n        maContractAddress,\r\n        maValue,\r\n        quantity = 1,\r\n\r\n        bidId, // off-chain registered id in DB\r\n    }) {\r\n        this._verifyParamAddress([maker, maContractAddress])\r\n        this._verifyParamTypeMV([maTypeMV])\r\n        this._verifyParamUintNumber([maValue, bidId, quantity])\r\n\r\n        const originFees = []\r\n        const payouts = [\r\n            [maker, 10000]\r\n        ]\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n\r\n        var bidOrder = await this.api.getBidOrder({\r\n            id: bidId\r\n        })\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var makeAsset = Asset(maTypeMV, assetData, quantity)\r\n        this._checkDiffAssets(makeAsset, bidOrder.order.takeAsset)\r\n\r\n        const retBidMatchOrder = await this._makeOrderAndApprove(\r\n            maker,\r\n            makeAsset,\r\n            bidOrder.order.maker,\r\n            bidOrder.order.makeAsset,\r\n            0, 0, 0,\r\n            ORDER_DATA_V1, encData\r\n        )\r\n        // TODO: match\r\n        var ret = await this._matchOrders(\r\n            retBidMatchOrder.order, retBidMatchOrder.signature, bidOrder.order, bidOrder.signature,\r\n            maker\r\n        )\r\n        return ret\r\n    }\r\n\r\n    // 나한테 팔라고 하는 제안 오더\r\n    async createOfferOrder({\r\n        maker, // offerer\r\n        maTypeMV,\r\n        maContractAddress,\r\n        maValue,\r\n\r\n        taker, // offeree\r\n        taTypeMV,\r\n        taContractAddress,\r\n        taValue,\r\n        quantity = 1,\r\n        salt = Date.now() //   in ExchangeV2Core, same hashed order occur error\r\n    }) {\r\n        if (maTypeMV == ETH) {\r\n            return {\r\n                status: false,\r\n                err: \"Can't use ETH for offer-order\"\r\n            }\r\n        }\r\n        this._verifyParamAddress([maker, maContractAddress, taker, taContractAddress])\r\n        this._verifyParamTypeMV([maTypeMV, taTypeMV])\r\n        this._verifyParamUintNumber([maValue, taValue, quantity, salt])\r\n\r\n        const originFees = []\r\n        const payouts = [\r\n            [maker, 10000]\r\n        ] // 100% of takeAsset to orderMaker\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var taAssetData = this._encAssetData(taTypeMV, taContractAddress, taValue)\r\n        // order struct\r\n        const ret = await this._makeOrderAndApprove(\r\n            maker,\r\n            Asset(maTypeMV, assetData, maValue),\r\n            taker,\r\n            Asset(taTypeMV, taAssetData, quantity), // target must be NFT?\r\n            salt,\r\n            0,\r\n            0,\r\n            ORDER_DATA_V1,\r\n            encData\r\n        );\r\n\r\n        return ret\r\n    }\r\n\r\n    // // offer를 수락하는 오더\r\n    async createAcceptOrderAndMatch({\r\n        maker,\r\n        maTypeMV,\r\n        maContractAddress,\r\n        maValue,\r\n        quantity = 1,\r\n\r\n        offerId, // off-chain registered, 아니면 order_id만 받고, getOrder로 가져와? 그게 성능상 좋겠구만\r\n    }) {\r\n        this._verifyParamAddress([maker, maContractAddress])\r\n        this._verifyParamTypeMV([maTypeMV])\r\n        this._verifyParamUintNumber([maValue, offerId, quantity])\r\n\r\n        const originFees = []\r\n        const payouts = [\r\n            [maker, 10000]\r\n        ]\r\n\r\n        const encData = encDataV1(this.web3, [payouts, originFees])\r\n        var offerOrder = await this.api.getOfferOrder({\r\n            id: offerId\r\n        })\r\n\r\n        var assetData = this._encAssetData(maTypeMV, maContractAddress, maValue)\r\n        var makeAsset = Asset(maTypeMV, assetData, quantity)\r\n        this._checkDiffAssets(makeAsset, offerOrder.order.takeAsset)\r\n\r\n        const retAcceptOrder = await this._makeOrderAndApprove(\r\n            maker,\r\n            makeAsset,\r\n            offerOrder.order.maker,\r\n            offerOrder.order.makeAsset,\r\n            0, 0, 0,\r\n            ORDER_DATA_V1, encData\r\n        )\r\n\r\n        // TODO: match\r\n        // console.log(retAcceptOrder.order, retAcceptOrder.signature, offerOrder.order, offerOrder.signature)\r\n        var ret = await this._matchOrders(\r\n            retAcceptOrder.order, retAcceptOrder.signature, offerOrder.order, offerOrder.signature,\r\n            maker\r\n        )\r\n        return ret\r\n    }\r\n\r\n    // order를 취소\r\n    async cancelOrder(order, order_maker) {\r\n        // https://github.com/rariblecom/protocol-documentation/blob/master/exchange/updating-cancelling-an-order.md\r\n        // order\r\n        const exchange = this._makeContractInstance(Exchange, this.exchangeAddress)\r\n        var _callobj = exchange.methods.cancel(order)\r\n        var res = await this.sendTransactionAndConfirm(\r\n            order_maker, this.exchangeAddress, _callobj, {},\r\n            EventType.CancelOrder, 'CancelOrder'\r\n        )\r\n        return res\r\n    }\r\n\r\n    // order update?\r\n\r\n    // swap eth to erc20 how to?\r\n\r\n    async getBalanceOf(account, contractAddress = 0, tokenId = 0) { // is 721 or 1155\r\n        this._verifyParamAddress([account])\r\n        this._verifyParamUintNumber([tokenId])\r\n\r\n        if (contractAddress == 0) { // ETH\r\n            return await this.web3.eth.getBalance(account)\r\n        }\r\n\r\n        // else\r\n\r\n        const contractClass = await this.classify(contractAddress)\r\n        if (contractClass == 1155) {\r\n            if (tokenId < 1) {\r\n                throw 'token id must bigger than 0'\r\n            }\r\n            const instance = this._makeContractInstance(IERC1155, contractAddress)\r\n            return await instance.methods.balanceOf(account, tokenId).call()\r\n        } else if (contractClass == 20 || contractClass == 721) { // ERC20 & ERC721 has same interface ( 'balanceOf(address account) returns(uint256 amount)' )\r\n            const instance = this._makeContractInstance(IERC20, contractAddress)\r\n            return await instance.methods.balanceOf(account).call()\r\n        } else {\r\n            throw `${contractAddress} is not token(20,721,1155) contract.`\r\n        }\r\n    }\r\n\r\n    async getTokenOwnerOf(contractAddress, tokenId) {\r\n        this._verifyParamAddress([contractAddress])\r\n        this._verifyParamUintNumber([tokenId])\r\n        try {\r\n            var tokenCont = this._makeContractInstance(NFTContract, contractAddress)\r\n            return await tokenCont.methods.ownerOf(tokenId).call()\r\n        } catch (err) {\r\n            throw `error:${err}: contract.ownerOf(${contractAddress, tokenId}) `\r\n        }\r\n    }\r\n\r\n    async classify(contractAddress) {\r\n        this._verifyParamAddress([contractAddress])\r\n\r\n        const erc721ID = '0x80ac58cd'\r\n        const erc1155ID = '0xd9b67a26'\r\n        const contract = this._makeContractInstance(IERC165, contractAddress)\r\n\r\n        try {\r\n            var is721 = await contract.methods.supportsInterface(erc721ID).call()\r\n            if (is721) {\r\n                return 721\r\n            }\r\n        } catch (e) {\r\n            // 20인지 체크 해야 함\r\n            const contract2 = this._makeContractInstance(IERC20, contractAddress)\r\n            try {\r\n                var r = await contract2.methods.totalSupply().call()\r\n                var r = await contract2.methods.balanceOf(ZERO_ADDRESS).call()\r\n                // TODO: 이거 호출될 때 metamask 에러 나는 것 같은데, 확인 필요 { .. -32000, ...}\r\n                return 20\r\n            } catch (e) {\r\n                return 9999 // it's not supports 'supportsInterface' and 'totalSupply'\r\n            }\r\n        }\r\n\r\n        var is1155 = await contract.methods.supportsInterface(erc1155ID).call()\r\n        if (is1155) {\r\n            return 1155\r\n        }\r\n\r\n        return 9999\r\n    }\r\n\r\n    ////////////////////////////\r\n    // Royalty\r\n    ////////////////////////////\r\n    async getRoyaltiesOwner(contractAddress, tokenId) {\r\n        this._verifyParamAddress([contractAddress])\r\n        this._verifyParamUintNumber([tokenId])\r\n\r\n        // RoyaltyV2\r\n        const nftContract = this._makeContractInstance(NFTContract, contractAddress)\r\n        var rOwner = await nftContract.methods.getRoyaltyOwner(tokenId).call()\r\n        if (rOwner && rOwner != ZERO_ADDRESS) {\r\n            console.log(`nftContract.getRoyaltyOwner works PARU#${tokenId}'s royaltyOwner -> ${rOwner}`)\r\n            return rOwner\r\n        } // EndOf - RoyaltyV2\r\n\r\n        const royaltiesRegistry = this._makeContractInstance(RoyaltiesRegistry, this.royaltiesAddress)\r\n        return await royaltiesRegistry.methods.getRoyaltiesOwner(contractAddress, tokenId).call()\r\n    }\r\n\r\n    async getRoyalties(contractAddress, tokenId) {\r\n        this._verifyParamAddress([contractAddress])\r\n        this._verifyParamUintNumber([tokenId])\r\n\r\n        // RoyaltyV2\r\n        const nftContract = this._makeContractInstance(NFTContract, contractAddress)\r\n        var royalties = await nftContract.methods.getRoyalties(tokenId).call()\r\n        if (royalties.length > 0) {\r\n            console.log(`nftContract.getRoyalties works. PARU#${tokenId}'s royalties: ${royalties}`)\r\n            return royalties\r\n        } // EO - RoyaltyV2\r\n\r\n        const royaltiesRegistry = this._makeContractInstance(RoyaltiesRegistry, this.royaltiesAddress)\r\n        return await royaltiesRegistry.methods.getRoyalties(contractAddress, tokenId).call()\r\n    }\r\n\r\n    async transferRoyaltiesOwnership(contractAddress, tokenId, ownerNew, from) {\r\n        this._verifyParamAddress([contractAddress, ownerNew, from])\r\n        this._verifyParamUintNumber([tokenId])\r\n\r\n        var ownerNew = ownerNew.toLowerCase()\r\n        var ownerBefore = await this.getRoyaltiesOwner(contractAddress, tokenId)\r\n        if (ownerBefore.toLowerCase() == ownerNew) {\r\n            return {\r\n                status: true,\r\n                ownerBefore\r\n            }\r\n        }\r\n\r\n        // RoyaltyV2\r\n        try {\r\n            const nftContract = this._makeContractInstance(NFTContract, contractAddress)\r\n            var _callobj = nftContract.methods.transferRoyaltyOwnership(tokenId, ownerNew)\r\n            var res = await this.sendTransactionAndConfirm(\r\n                from, contractAddress, _callobj, {},\r\n                EventType.TransferRoyaltiesOwnership, 'Transfer royalties ownership'\r\n            )\r\n            if (res.status == true) {\r\n                return {\r\n                    ...res,\r\n                    ownerBefore\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n        // EO - RoyaltyV2\r\n\r\n        const royaltiesRegistry = this._makeContractInstance(RoyaltiesRegistry, this.royaltiesAddress)\r\n        var _callobj = royaltiesRegistry.methods.transferRoyaltiesOwnership(contractAddress, tokenId, ownerNew)\r\n        var res = await this.sendTransactionAndConfirm(\r\n            from, this.royaltiesAddress, _callobj, {},\r\n            EventType.TransferRoyaltiesOwnership, 'Transfer royalties ownership'\r\n        )\r\n        return {\r\n            ...res,\r\n            ownerBefore\r\n        }\r\n    }\r\n\r\n    async updateRoyalties(contractAddress, tokenId, royaltiesNew, from) {\r\n        this._verifyParamAddress([contractAddress, from])\r\n        this._verifyParamUintNumber([tokenId])\r\n        this._verifyParamTypePart([royaltiesNew]) // TODO: 100곱해서 입력하게 할지 아니면 안에서 100 곱할지에 따라서 검사 달라진다. 그리고 그에 맞는 최대값 검사도 추가 필요함(총합 100%이하)\r\n\r\n        let tokenOwner;\r\n        try {\r\n            tokenOwner = await this.getTokenOwnerOf(contractAddress, tokenId)\r\n        } catch (err) {\r\n            return {\r\n                status: false,\r\n                err: `contract or tokenId problem:: ${JSON.stringify(err)}`\r\n            }\r\n        }\r\n        // var res = await parula.updateRoyalties(parula.nftAddress, tokenId, royaltiesTo, ALICE_ADDRESS)\r\n\r\n        var from = from.toLowerCase()\r\n        var ownerBefore = await this.getRoyaltiesOwner(contractAddress, tokenId)\r\n        if ((ownerBefore == ZERO_ADDRESS && tokenOwner.toLowerCase() == from) // ownerBefore가 zero고, tokenOwner(erc721.ownerOf(address)가 맞거나\r\n            ||\r\n            (ownerBefore.toLowerCase() == from)) { // royaltiesOwnership이 from면 성공한다\r\n            // update 한다\r\n            var _royaltiesBefore = await this.getRoyalties(contractAddress, tokenId)\r\n            //RoyaltyV2\r\n            try {\r\n                var nftCont = this._makeContractInstance(NFTContract, contractAddress)\r\n                var _callobj = await nftCont.methods.updateRoyalty(tokenId, royaltiesNew)\r\n                var res = await this.sendTransactionAndConfirm(\r\n                    from, contractAddress, _callobj, {},\r\n                    EventType.UpdateRoyalties, 'Update royalties'\r\n                )\r\n                if (res.status == true) {\r\n                    return {\r\n                        ...res,\r\n                        royaltiesBefore: _royaltiesBefore,\r\n                        royaltiesNew\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n            // EO - RoyaltyV2\r\n\r\n            const royaltiesRegistry = this._makeContractInstance(RoyaltiesRegistry, this.royaltiesAddress)\r\n            var _callobj = royaltiesRegistry.methods.setRoyaltiesByTokenAndTokenId(contractAddress, tokenId, royaltiesNew)\r\n            var res = await this.sendTransactionAndConfirm(\r\n                from, this.royaltiesAddress, _callobj, {},\r\n                EventType.UpdateRoyalties, 'Update royalties'\r\n            )\r\n            return {\r\n                ...res,\r\n                royaltiesBefore: _royaltiesBefore,\r\n                royaltiesNew\r\n            }\r\n        } else {\r\n            // 실패시킨다\r\n            return {\r\n                status: false,\r\n                tokenOwner,\r\n                ownerBefore,\r\n                'updateRequestedFrom': from,\r\n                err: 'ownership problem'\r\n            }\r\n        }\r\n    }\r\n    ////////////////////////////\r\n    // end of Royalty\r\n    ////////////////////////////\r\n\r\n    // TODO: consider update metadata\r\n\r\n    async _matchOrders(leftOrder, leftSignature, rightOrder, rightSignature, from, value = 0) {\r\n        const exchange = this._makeContractInstance(Exchange, this.exchangeAddress)\r\n\r\n        var to = this.exchangeAddress\r\n        var _callobj = exchange.methods.matchOrders(leftOrder, leftSignature, rightOrder, rightSignature)\r\n\r\n        var _param = {\r\n            value\r\n        }\r\n        var ret = await this.sendTransactionAndConfirm(from, to, _callobj, _param, EventType.MatchOrders, \"Match orders\")\r\n        console.log('ret::222', ret)\r\n        return ret\r\n    }\r\n\r\n    async _approveTransferProxy(asset_type, contract_address, approve_amount, from) {\r\n        // function isApprovedForAll(address owner, address operator)\r\n        // function setApprovalForAll(address operator, bool approved) public virtual override\r\n        let ret\r\n        var to = contract_address\r\n        var _param = {}\r\n        if (asset_type == ERC20) {\r\n            const transfer_proxy = this.erc20TransferProxyAddress\r\n            const ierc20 = this._makeContractInstance(IERC20, contract_address)\r\n\r\n            // check allowance(operator, spender) returns(uint256)\r\n            var allowance = await ierc20.methods.allowance(from, transfer_proxy).call()\r\n            if (allowance >= approve_amount) {\r\n                // skip approve if allowance is enough\r\n                try {\r\n                    var _symbol = await this.web3.eth.call({\r\n                        from,\r\n                        to: contract_address,\r\n                        data: this.web3.eth.abi.encodeFunctionSignature(\"symbol()\")\r\n                    })\r\n                    var symbol = this.web3.eth.abi.decodeParameter(\"string\", _symbol)\r\n                    this.logger(`${from} approve ${symbol}:${allowance} for ${transfer_proxy}`)\r\n                } catch (e) {\r\n                    this.logger(e)\r\n                }\r\n                ret = {\r\n                    status: true\r\n                }\r\n            } else {\r\n                var _callobj = ierc20.methods.approve(transfer_proxy, approve_amount)\r\n                ret = await this.sendTransactionAndConfirm(from, to, _callobj, _param, EventType.ApproveCurrency, \"Approve currency\")\r\n            }\r\n        } else if (asset_type == ERC721 || asset_type == ERC1155) {\r\n            // 721: function setApprovalForAll(address operator, bool _approved) external;\r\n            // 1155: function setApprovalForAll(address _operator, bool _approved) external;\r\n            const transfer_proxy = this.transferProxyAddress // transfer-proxy! not exchange\r\n            let ierc, _callobj\r\n            if (asset_type == ERC721) {\r\n                ierc = this._makeContractInstance(NFTContract, contract_address)\r\n            } else {\r\n                ierc = this._makeContractInstance(NFT1155Contract, contract_address)\r\n            }\r\n            // check isApprovedForAll(owner, operator) returns(bool)\r\n            var isApproved = await ierc.methods.isApprovedForAll(from, transfer_proxy).call()\r\n            if (isApproved) {\r\n                // skip setApprovalForAll if already approved\r\n                var symbol = await ierc.methods.symbol().call()\r\n                this.logger(`${from} approve ${symbol}# for ${transfer_proxy}`)\r\n                ret = {\r\n                    status: true\r\n                }\r\n            } else {\r\n                _callobj = ierc.methods.setApprovalForAll(transfer_proxy, true)\r\n                ret = await this.sendTransactionAndConfirm(from, to, _callobj, _param, EventType.ApproveOrder, \"Set approval for all\")\r\n            }\r\n        } else { // ETH\r\n            ret = {\r\n                status: true\r\n            }\r\n        }\r\n        var err = ret.status ? '' : \"approve fail\"\r\n        return {\r\n            ...ret,\r\n            err\r\n        }\r\n    }\r\n\r\n    async _makeOrderAndApprove(maker, makerAsset, taker, takerAsset, salt, start, end, dataType, encData) {\r\n        this._verifyParamAddress([maker, taker])\r\n        this._verifyParamUintNumber([salt, start, end])\r\n        this._verifyParamAsset([makerAsset, takerAsset])\r\n\r\n        // need to verify [dataType, encData] \r\n\r\n        // validate maker, taker addresses\r\n        // validate assets\r\n        var order = Order(\r\n            maker,\r\n            makerAsset, // Asset(ETH, \"0x\", 200), \r\n            taker, // can be ZERO\r\n            takerAsset, // Asset(ERC721, enc(erc721.address, erc721TokenId1), 1), \r\n            salt, // \r\n            start, // \r\n            end, // \r\n            dataType, // ORDER_DATA_V1 (DT magic value)\r\n            encData // encDataRight (DT encrypted)\r\n        );\r\n\r\n        // sign\r\n        let data, signature\r\n        if (salt != 0) {\r\n            const _signed_data_and_sign = await createTypedDataAndSignature(this.web3, this.exchangeAddress, order, maker)\r\n            signature = _signed_data_and_sign.sig\r\n            data = _signed_data_and_sign.data\r\n        } else {\r\n            signature = '0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\r\n            data = ''\r\n        }\r\n        const {\r\n            typeMV,\r\n            contractAddress,\r\n            value\r\n        } = decAsset(this.web3, makerAsset)\r\n\r\n        var ret = await this._approveTransferProxy(typeMV, contractAddress, value, maker)\r\n        return {\r\n            ...ret,\r\n            order,\r\n            data,\r\n            signature\r\n        }\r\n    }\r\n\r\n    async _extractTransferInfo(txHash) {\r\n        // parse ERC721-Transfer event\r\n        const receipt = await this.web3.eth.getTransactionReceipt(txHash)\r\n        // console.log(receipt.logs)\r\n        // receipt.transactionHash // txHash\r\n        let log = receipt.logs[0] // TODO: log가 여러 개일 때는 어떻게 할겨// arr = logs.map(log => { .. from = decode('address', log.topics[1]) ..})\r\n\r\n        // log.data // non-indexed 필드 데이터들이 여기에 저장됨(indexed 필드는 topics에)\r\n        // keccak256('Transfer(address,address,uint256)')\r\n        const sigTransfer721 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\r\n        const sigTransfer1155 = '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62'\r\n        // console.log(receipt)  // ganacli 에서 테스트하려고 했는데, event 발생이 안되네;\r\n        var sigEvt = log.topics[0]\r\n\r\n        let from, to, tokenId, quantity = 0;\r\n        if (sigEvt == sigTransfer721) {\r\n            from = this.web3.eth.abi.decodeParameter('address', log.topics[1]) // from\r\n            to = this.web3.eth.abi.decodeParameter('address', log.topics[2]) // to\r\n            tokenId = this.web3.eth.abi.decodeParameter('uint', log.topics[3]) // tokenId (hex)\r\n        } else if (sigEvt == sigTransfer1155) {\r\n            // in IERC1155\r\n            //   event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n            from = this.web3.eth.abi.decodeParameter('address', log.topics[2]) // from\r\n            to = this.web3.eth.abi.decodeParameter('address', log.topics[3]) // to\r\n\r\n            var r = this.web3.eth.abi.decodeParameter('(uint256,uint256)', log.data)\r\n            tokenId = r[0]\r\n            quantity = r[1]\r\n        } else {\r\n            this.logger('event type is not handled.')\r\n            console.log(log)\r\n            return {}\r\n        }\r\n\r\n        var blockNumber = log.blockNumber;\r\n        var contractAddress = log.address // contract\r\n        var isMinted = (from == ZERO_ADDRESS) ? true : false\r\n\r\n        // parse unindexed parameter  https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5\r\n        // const decoder = new ethers.utils.AbiCoder();\r\n        // const unindexedEvents = events.inputs.filter(event => event.indexed === false);\r\n        // const decodedLogs = logs.map(log => decoder.decode(unindexedEvents, log.data)\r\n\r\n        return {\r\n            blockNumber,\r\n            txHash,\r\n            contractAddress,\r\n            tokenId: Number(tokenId),\r\n            quantity: Number(quantity),\r\n            from,\r\n            to,\r\n            isMinted\r\n        }\r\n\r\n        // https://gist.github.com/wschwab/528153cb6f2ea17ef9eee0c180425961\r\n        // https://gist.github.com/wschwab/6e89eeb29a8e24203ee954c042e47a6f\r\n\r\n    }\r\n\r\n    async sendTransactionAndConfirm(from, to, _callobj, _param, evtType, log) {\r\n        const tx = await this._lowLevelSend(from, to, _callobj, _param)\r\n        if (tx.status) {\r\n            const isConfirmed = await this._confirmTransaction(tx.transactionHash, evtType, log)\r\n            return {\r\n                status: isConfirmed,\r\n                tx\r\n            }\r\n        } else {\r\n            return {\r\n                status: false,\r\n                tx\r\n            }\r\n        }\r\n    }\r\n\r\n    async _lowLevelSend(from, to, _callobj, _param) {\r\n        var data = _callobj.encodeABI()\r\n        var gasPrice = await this._computeGasPrice()\r\n        try {\r\n            var gas = await _callobj.estimateGas({\r\n                from,\r\n                to,\r\n                ..._param\r\n            })\r\n            return await this.web3.eth.sendTransaction({\r\n                from,\r\n                to,\r\n                data,\r\n                gas,\r\n                gasPrice,\r\n                ..._param\r\n            })\r\n        } catch (err) {\r\n            return {\r\n                status: false,\r\n                err\r\n            }\r\n        }\r\n    }\r\n\r\n    async _lowLevelCall(from, to, _call) {\r\n        var data = _call.encodeABI()\r\n        try {\r\n            var ret = await web3.eth.call({\r\n                from,\r\n                to,\r\n                data\r\n            })\r\n            return this.web3.eth.abi.decodeParameters(_call._method.outputs, ret)[0]\r\n        } catch (err) {\r\n            return {}\r\n        }\r\n    }\r\n\r\n    async _computeGasPrice() {\r\n        const meanGas = await this.web3.eth.getGasPrice()\r\n        const weiToAdd = Web3.utils.toBN(this.web3.utils.toWei(this.gasPriceAddition, 'gwei'))\r\n        return Web3.utils.toBN(meanGas).add(weiToAdd).toString()\r\n    }\r\n\r\n    async _confirmTransaction(transactionHash, event, description, testForSuccess) {\r\n        const transactionEventData = {\r\n            transactionHash,\r\n            event\r\n        }\r\n        this.logger(`transaction started - ${description}`)\r\n\r\n        if (transactionHash == NULL_BLOCK_HASH) {\r\n            // This was a smart contract wallet that doesn't know the transaction\r\n            this._dispatch(EventType.TransactionCreated, {\r\n                event\r\n            })\r\n\r\n            if (!testForSuccess) {\r\n                // Wait if test not implemented\r\n                this.logger(`Unknown action, waiting 1 minute: ${description}`)\r\n                await delay(60 * 1000)\r\n                return\r\n            }\r\n            return await this._pollCallbackForConfirmation(event, description, testForSuccess)\r\n        }\r\n\r\n        // Normal wallet\r\n        try {\r\n            this._dispatch(EventType.TransactionCreated, transactionEventData)\r\n            await confirmTransaction(this.web3, transactionHash)\r\n            this.logger(`transaction succeed - ${description}`)\r\n            this._dispatch(EventType.TransactionConfirmed, transactionEventData)\r\n            return true\r\n        } catch (error) {\r\n            this.logger(`transaction failed: - ${description}`)\r\n            this._dispatch(EventType.TransactionFailed, {\r\n                ...transactionEventData,\r\n                error\r\n            })\r\n            throw error\r\n        }\r\n    }\r\n\r\n    async _pollCallbackForConfirmation(event, description, testForSuccess) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const initialRetries = 60\r\n            // const testResolve: (r: number) => Promise<void> = async retries => {\r\n            const testResolve = async retries => {\r\n                const wasSuccessful = await testForSuccess()\r\n                if (wasSuccessful) {\r\n                    this.logger(`Transaction succeeded: ${description}`)\r\n                    this._dispatch(EventType.TransactionConfirmed, {\r\n                        event\r\n                    })\r\n                    return resolve(true)\r\n                } else if (retries <= 0) {\r\n                    return reject(false)\r\n                }\r\n\r\n                if (retries % 10 == 0) {\r\n                    this.logger(`Tested transaction ${initialRetries - retries + 1} times: ${description}`)\r\n                }\r\n\r\n                await delay(5000)\r\n                return testResolve(retries - 1)\r\n            }\r\n\r\n            return testResolve(initialRetries)\r\n        })\r\n    }\r\n\r\n    _dispatch(event, data) {\r\n        this._emitter.emit(event, data)\r\n    }\r\n\r\n    _makeContractInstance(contractAbi, contractAddress = null) {\r\n        return makeContractInstance(this.web3, this.netId, contractAbi, contractAddress)\r\n    }\r\n\r\n    _encAssetData(typeMV, contractAddress, value) {\r\n        let assetData\r\n        if (typeMV == ETH) {\r\n            // assetData = \"0x\" //ZERO_ADDRESS\r\n            assetData = enc(this.web3, ZERO_ADDRESS)\r\n        } else if (typeMV == ERC20) {\r\n            assetData = enc(this.web3, contractAddress)\r\n        } else if (typeMV == ERC721 || typeMV == ERC1155) {\r\n            assetData = enc(this.web3, contractAddress, value)\r\n        } else {\r\n            console.trace()\r\n            throw `unknown type magic-value (${typeMV})`\r\n        }\r\n        return assetData\r\n    }\r\n\r\n    _verifyParamAddress(addressesToVerify) {\r\n        addressesToVerify.forEach(one => {\r\n            if (one == undefined) {\r\n                console.trace()\r\n                throw `Address 'undefined' passed`\r\n            }\r\n            if (one.length != 42) {\r\n                console.trace()\r\n                throw `Address length incorrect :${one}`\r\n            }\r\n        })\r\n    }\r\n    _verifyParamTypeMV(typesToVrify) {\r\n        typesToVrify.forEach(one => {\r\n            if (one == undefined) {\r\n                console.trace()\r\n                throw `typeMV 'undefined' passed`\r\n            }\r\n            if (one.length != 10) {\r\n                console.trace()\r\n                throw `typeMV length incorrect : ${one}`\r\n            }\r\n        })\r\n    }\r\n    _verifyParamUintNumber(valuesToVerify) {\r\n        valuesToVerify.forEach(one => {\r\n            if (one == undefined) {\r\n                console.trace()\r\n                throw `value 'undefined' passed`\r\n            }\r\n            if (typeof one != 'number') {\r\n                console.trace()\r\n                throw `value is not 'number' type ${typeof one}`\r\n            }\r\n            if (Number(one.toFixed()) != one) {\r\n                console.trace()\r\n                throw `value is not integer`\r\n            }\r\n            if (one < 0) {\r\n                console.trace()\r\n                throw `value incorrect ${one}`\r\n            }\r\n        })\r\n    }\r\n\r\n    _verifyParamTypePart(partsToVerify) {\r\n        // typePart is struct defined in Libpart.sol, 'Libpart.Part[]'\r\n        partsToVerify.forEach(partToVerify => {\r\n            partToVerify.forEach(one => {\r\n                if (one == undefined) {\r\n                    console.trace()\r\n                    throw `value 'undefined' passed`\r\n                }\r\n                if (one.length > 0) {\r\n                    var account = one[0]\r\n                    var value = one[1]\r\n                    this._verifyParamAddress([account])\r\n                    this._verifyParamUintNumber([value])\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    _verifyParamAsset(assetsToVerify) {\r\n        assetsToVerify.forEach(one => {\r\n            if (one == undefined) {\r\n                console.trace()\r\n                throw `asset 'undefined' passed`\r\n            }\r\n            const {\r\n                assetType,\r\n                value\r\n            } = one\r\n            if (assetType == undefined) {\r\n                console.trace()\r\n                throw `assetType 'undefined' passed`\r\n            }\r\n            this._verifyParamUintNumber([value])\r\n        })\r\n    }\r\n\r\n    _checkDiffAssets(asset1, asset2) {\r\n        if (asset1.value != asset2.value ||\r\n            asset1.assetType.assetClass != asset2.assetType.assetClass ||\r\n            asset1.assetType.data != asset2.assetType.data\r\n        ) {\r\n            console.trace()\r\n            throw `asset not matched`\r\n        }\r\n    }\r\n\r\n    toBN(number) {\r\n        return new this.web3.utils.BN(number)\r\n    }\r\n}\r\n\r\n// export default Parula;\r\nmodule.exports = {\r\n    Parula\r\n}"]}]}