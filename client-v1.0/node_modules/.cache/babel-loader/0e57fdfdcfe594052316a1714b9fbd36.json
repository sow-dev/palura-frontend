{"remainingRequest":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/babel-loader/lib/index.js!/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/api.js","dependencies":[{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/api.js","mtime":1633507354000},{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/hyunjongkim/Documents/GitHub/palura-frontend/client-v1.0/src/parula-js/src/api.js"],"names":["fetch","require","queryString","decAsset","ZERO_ADDRESS","ParulaAPI","config","logger","web3","apiOrderUrl","apiBidUrl","query","apiUrl","id","get","_sellOrder","order","JSON","parse","order_rawdata","message","signature","order_signature","assetData","_encAssetData","maTypeMV","maContAddr","maTokenId","maker","order_wallet","makeAsset","Asset","immediate_buyable","apiPath","startsWith","_a","split","length","stringify","data","asset","typeMV","contractAddress","tokenId","maValue","value","qs","url","_fetch","response","json","opts","apiKey","finalOpts","headers","substr","then","res","_handleApiResponse","ok","status","text","result","errorMessage","errors","join","Error","ETH","enc","ERC20","ERC721","ERC1155","console","trace","_throwOrContinue","error","retries","isUnavailable","includes","module","exports"],"mappings":"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","sourcesContent":["const fetch = require('isomorphic-unfetch');\r\nconst queryString = require('query-string');\r\n\r\nconst { decAsset } = require(\"./utils/utils\")\r\nconst { ZERO_ADDRESS } = require(\"./constants\")\r\n\r\n\r\nclass ParulaAPI {\r\n    constructor(config, logger){\r\n        this.web3 = config.web3\r\n        this.logger = logger;\r\n        \r\n        this.apiOrderUrl = config.apiOrderUrl\r\n        this.apiBidUrl = config.apiBidUrl\r\n    }\r\n\r\n    async getSellOrder(query){\r\n      const apiUrl = `${this.apiOrderUrl}/order/${query.id}`\r\n      const _sellOrder = await this.get(apiUrl)\r\n      \r\n      const order = JSON.parse(_sellOrder.order_rawdata).message\r\n      const signature = _sellOrder.order_signature\r\n      return {order, signature}\r\n    }\r\n\r\n    async getAuctionOrder(query,){\r\n      const apiUrl = `${this.apiOrderUrl}/order/${query.id}`\r\n      const _sellOrder = await this.get(apiUrl)\r\n      \r\n      let order;\r\n      let signature;\r\n      if(_sellOrder.order_rawdata){\r\n        order = JSON.parse(_sellOrder.order_rawdata).message\r\n        signature = _sellOrder.order_signature;\r\n\r\n      }else{ \r\n        // 즉시구매 안되는 auction order의 경우 order_rawdata 없음\r\n        //   그래서 필요한 것들 만들어서 반환해준다\r\n        const assetData = this._encAssetData(_sellOrder.maTypeMV, _sellOrder.maContAddr, _sellOrder.maTokenId)\r\n        order = {\r\n          maker: _sellOrder.order_wallet,\r\n          makeAsset: Asset(_sellOrder.maTypeMV, assetData, 1) \r\n        }\r\n        signature = ''\r\n      }\r\n      return {order, signature, immediate_buyable:_sellOrder.immediate_buyable}\r\n    }\r\n\r\n    async getBidOrder(query){\r\n      const apiUrl = `${this.apiBidUrl}/bid/${query.id}`\r\n      const _sellOrder = await this.get(apiUrl)\r\n      \r\n      const order = JSON.parse(_sellOrder.order_rawdata).message\r\n      const signature = _sellOrder.order_signature\r\n      return {order, signature}\r\n    }\r\n\r\n    async getOfferOrder(query){\r\n      const apiUrl = `${this.apiOrderUrl}/order/${query.id}` // offerOrder 어떤 테이블에 저장되느냐에 따라 url 바뀔 수 있음\r\n      const _sellOrder = await this.get(apiUrl)\r\n      \r\n      const order = JSON.parse(_sellOrder.order_rawdata).message\r\n      const signature = _sellOrder.order_signature\r\n      return {order, signature}\r\n    }\r\n\r\n    /**\r\n     * Get JSON data from API, sending auth token in headers\r\n     * @param apiPath Path to URL endpoint under API\r\n     * @param query Data to send. Will be stringified using QueryString\r\n     */\r\n    async get(apiPath, query = {}){\r\n        if(apiPath.startsWith('undefined')){  // for test only\r\n          var _a = apiPath.split('/')\r\n          var id = _a[_a.length-1]\r\n          const _sellOrder = require(`../test/parula/sample_sell_order_${id}.json`)\r\n\r\n          const order_rawdata = JSON.stringify(_sellOrder.data)\r\n          const asset = decAsset(this.web3, _sellOrder.order.makeAsset) // {typeMV, contractAddress, tokenId, value}\r\n\r\n          return { // 로컬에서는 파일로 테스트하니까, 파일을 읽어서 API 호출 결과와 비슷하게 만들어서 반환해준다.\r\n            order_rawdata, \r\n            order_signature:_sellOrder.signature,\r\n            maTypeMV: asset.typeMV, \r\n            maContAddr: asset.contractAddress, \r\n            maTokenId: asset.tokenId, \r\n            maValue: asset.value\r\n          }\r\n        }\r\n        const qs = queryString.stringify(query)\r\n        const url = `${apiPath}?${qs}`\r\n\r\n        const response = await this._fetch(url)\r\n        return response.json()\r\n    }\r\n\r\n    async _fetch(apiUrl, opts={}){\r\n        const apiKey = this.apiKey\r\n        const finalOpts = {\r\n            ...opts,\r\n            headers: {\r\n                // ...(apiKey ? { 'X-API-KEY': apiKey } : {}),\r\n                ...(opts.headers || {}),\r\n            }\r\n        }\r\n\r\n        this.logger(`Sending request: ${apiUrl} ${JSON.stringify(finalOpts).substr(0, 100)}...`)\r\n\r\n        return fetch(apiUrl, finalOpts).then(async res => this._handleApiResponse(res))\r\n    }\r\n\r\n    async _handleApiResponse(response) {\r\n        if (response.ok) {\r\n          this.logger(`Got success: ${response.status}`)\r\n          return response\r\n        }\r\n    \r\n        let result\r\n        let errorMessage\r\n        try {\r\n          result = await response.text()\r\n          result = JSON.parse(result)\r\n        } catch {\r\n          // Result will be undefined or text\r\n        }\r\n    \r\n        this.logger(`Got error ${response.status}: ${JSON.stringify(result)}`)\r\n    \r\n        switch (response.status) {\r\n          case 400:\r\n            errorMessage = result && result.errors\r\n              ? result.errors.join(', ')\r\n              : `Invalid request: ${JSON.stringify(result)}`\r\n            break\r\n          case 401:\r\n          case 403:\r\n            errorMessage = `Unauthorized. Full message was '${JSON.stringify(result)}'`\r\n            break\r\n          case 404:\r\n            errorMessage = `Not found. Full message was '${JSON.stringify(result)}'`\r\n            break\r\n          case 500:\r\n            errorMessage = `Internal server error. OpenSea has been alerted, but if the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was ${JSON.stringify(result)}`\r\n            break\r\n          case 503:\r\n            errorMessage = `Service unavailable. Please try again in a few minutes. If the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was ${JSON.stringify(result)}`\r\n            break\r\n          default:\r\n            errorMessage = `Message: ${JSON.stringify(result)}`\r\n            break\r\n        }\r\n    \r\n        throw new Error(`API Error ${response.status}: ${errorMessage}`)\r\n      }\r\n\r\n      _encAssetData(typeMV, contractAddress, value){\r\n        let assetData\r\n        if (typeMV==ETH){\r\n            // assetData = \"0x\" //ZERO_ADDRESS\r\n            assetData = enc(this.web3, ZERO_ADDRESS)\r\n        }else if (typeMV==ERC20){\r\n            assetData = enc(this.web3, contractAddress)\r\n        }else if (typeMV==ERC721 || typeMV==ERC1155){\r\n            assetData = enc(this.web3, contractAddress, value)\r\n        }else {\r\n            console.trace()\r\n            throw `unknown type magic-value (${typeMV})`\r\n        }\r\n        return assetData\r\n    }\r\n}\r\nfunction _throwOrContinue(error, retries) {\r\n    const isUnavailable = !!error.message && (\r\n    error.message.includes('503') ||\r\n    error.message.includes('429')\r\n    )\r\n    if (retries <= 0 || !isUnavailable) {\r\n    throw error\r\n    }\r\n}\r\n\r\nmodule.exports = { ParulaAPI }"]}]}